
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b364  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800b504  0800b504  0001b504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7fc  0800b7fc  0002028c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7fc  0800b7fc  0001b7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b804  0800b804  0002028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b804  0800b804  0001b804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b808  0800b808  0001b808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000028c  20000000  0800b80c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006540  2000028c  0800ba98  0002028c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200067cc  0800ba98  000267cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028a26  00000000  00000000  000202bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000541d  00000000  00000000  00048ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd8  00000000  00000000  0004e100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019f0  00000000  00000000  0004fcd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007792  00000000  00000000  000516c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f496  00000000  00000000  00058e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dc53  00000000  00000000  000782f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00115f43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007828  00000000  00000000  00115f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000028c 	.word	0x2000028c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b4ec 	.word	0x0800b4ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000290 	.word	0x20000290
 80001dc:	0800b4ec 	.word	0x0800b4ec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f001 f8ca 	bl	8001724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f8f6 	bl	8000780 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 f986 	bl	80008a4 <MX_GPIO_Init>
  BSP_LED_Init(LED3);
 8000598:	2001      	movs	r0, #1
 800059a:	f000 fe83 	bl	80012a4 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 fe80 	bl	80012a4 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 80005a4:	2002      	movs	r0, #2
 80005a6:	f000 fe7d 	bl	80012a4 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 80005aa:	2003      	movs	r0, #3
 80005ac:	f000 fe7a 	bl	80012a4 <BSP_LED_Init>
  MX_USART1_UART_Init();
 80005b0:	f000 f94e 	bl	8000850 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005b4:	f007 f80e 	bl	80075d4 <osKernelInitialize>

  /* Create the queue(s) */
  /* creation of queue_1 */
  queue_1Handle = osMessageQueueNew (100, sizeof(uint8_t), &queue_1_attributes);
 80005b8:	4a21      	ldr	r2, [pc, #132]	; (8000640 <main+0xb8>)
 80005ba:	2101      	movs	r1, #1
 80005bc:	2064      	movs	r0, #100	; 0x64
 80005be:	f007 f900 	bl	80077c2 <osMessageQueueNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a1f      	ldr	r2, [pc, #124]	; (8000644 <main+0xbc>)
 80005c6:	6013      	str	r3, [r2, #0]

  /* creation of queue_2_1 */
  queue_2_1Handle = osMessageQueueNew (100, sizeof(uint8_t), &queue_2_1_attributes);
 80005c8:	4a1f      	ldr	r2, [pc, #124]	; (8000648 <main+0xc0>)
 80005ca:	2101      	movs	r1, #1
 80005cc:	2064      	movs	r0, #100	; 0x64
 80005ce:	f007 f8f8 	bl	80077c2 <osMessageQueueNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a1d      	ldr	r2, [pc, #116]	; (800064c <main+0xc4>)
 80005d6:	6013      	str	r3, [r2, #0]

  /* creation of queue_2_2 */
  queue_2_2Handle = osMessageQueueNew (100, sizeof(uint8_t), &queue_2_2_attributes);
 80005d8:	4a1d      	ldr	r2, [pc, #116]	; (8000650 <main+0xc8>)
 80005da:	2101      	movs	r1, #1
 80005dc:	2064      	movs	r0, #100	; 0x64
 80005de:	f007 f8f0 	bl	80077c2 <osMessageQueueNew>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a1b      	ldr	r2, [pc, #108]	; (8000654 <main+0xcc>)
 80005e6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task_1 */
  task_1Handle = osThreadNew(StartDefaultTask, NULL, &task_1_attributes);
 80005e8:	4a1b      	ldr	r2, [pc, #108]	; (8000658 <main+0xd0>)
 80005ea:	2100      	movs	r1, #0
 80005ec:	481b      	ldr	r0, [pc, #108]	; (800065c <main+0xd4>)
 80005ee:	f007 f83b 	bl	8007668 <osThreadNew>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a1a      	ldr	r2, [pc, #104]	; (8000660 <main+0xd8>)
 80005f6:	6013      	str	r3, [r2, #0]

  /* creation of task_2 */
  task_2Handle = osThreadNew(StartTask02, NULL, &task_2_attributes);
 80005f8:	4a1a      	ldr	r2, [pc, #104]	; (8000664 <main+0xdc>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	481a      	ldr	r0, [pc, #104]	; (8000668 <main+0xe0>)
 80005fe:	f007 f833 	bl	8007668 <osThreadNew>
 8000602:	4603      	mov	r3, r0
 8000604:	4a19      	ldr	r2, [pc, #100]	; (800066c <main+0xe4>)
 8000606:	6013      	str	r3, [r2, #0]

  /* creation of task_3 */
  task_3Handle = osThreadNew(StartTask03, NULL, &task_3_attributes);
 8000608:	4a19      	ldr	r2, [pc, #100]	; (8000670 <main+0xe8>)
 800060a:	2100      	movs	r1, #0
 800060c:	4819      	ldr	r0, [pc, #100]	; (8000674 <main+0xec>)
 800060e:	f007 f82b 	bl	8007668 <osThreadNew>
 8000612:	4603      	mov	r3, r0
 8000614:	4a18      	ldr	r2, [pc, #96]	; (8000678 <main+0xf0>)
 8000616:	6013      	str	r3, [r2, #0]

  /* creation of task_4 */
  task_4Handle = osThreadNew(StartTask04, NULL, &task_4_attributes);
 8000618:	4a18      	ldr	r2, [pc, #96]	; (800067c <main+0xf4>)
 800061a:	2100      	movs	r1, #0
 800061c:	4818      	ldr	r0, [pc, #96]	; (8000680 <main+0xf8>)
 800061e:	f007 f823 	bl	8007668 <osThreadNew>
 8000622:	4603      	mov	r3, r0
 8000624:	4a17      	ldr	r2, [pc, #92]	; (8000684 <main+0xfc>)
 8000626:	6013      	str	r3, [r2, #0]

  uartRxHandle = osThreadNew(UARTTask, NULL, &uartrx_attributes);
 8000628:	4a17      	ldr	r2, [pc, #92]	; (8000688 <main+0x100>)
 800062a:	2100      	movs	r1, #0
 800062c:	4817      	ldr	r0, [pc, #92]	; (800068c <main+0x104>)
 800062e:	f007 f81b 	bl	8007668 <osThreadNew>
 8000632:	4603      	mov	r3, r0
 8000634:	4a16      	ldr	r2, [pc, #88]	; (8000690 <main+0x108>)
 8000636:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000638:	f006 fff0 	bl	800761c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063c:	e7fe      	b.n	800063c <main+0xb4>
 800063e:	bf00      	nop
 8000640:	0800b760 	.word	0x0800b760
 8000644:	20004dec 	.word	0x20004dec
 8000648:	0800b778 	.word	0x0800b778
 800064c:	20004dfc 	.word	0x20004dfc
 8000650:	0800b790 	.word	0x0800b790
 8000654:	20004df8 	.word	0x20004df8
 8000658:	0800b6ac 	.word	0x0800b6ac
 800065c:	08000b61 	.word	0x08000b61
 8000660:	20004e00 	.word	0x20004e00
 8000664:	0800b6d0 	.word	0x0800b6d0
 8000668:	08000d19 	.word	0x08000d19
 800066c:	20004e48 	.word	0x20004e48
 8000670:	0800b6f4 	.word	0x0800b6f4
 8000674:	08000dfd 	.word	0x08000dfd
 8000678:	20004df4 	.word	0x20004df4
 800067c:	0800b718 	.word	0x0800b718
 8000680:	08001091 	.word	0x08001091
 8000684:	20004e54 	.word	0x20004e54
 8000688:	0800b73c 	.word	0x0800b73c
 800068c:	080006bd 	.word	0x080006bd
 8000690:	20004df0 	.word	0x20004df0

08000694 <ledMorseCode>:
  /* USER CODE END 3 */
}


void ledMorseCode(MORSELED status)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
	if (status == ON){
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d103      	bne.n	80006ac <ledMorseCode+0x18>
		BSP_LED_On(LED4);
 80006a4:	2000      	movs	r0, #0
 80006a6:	f000 fe75 	bl	8001394 <BSP_LED_On>
	}else{
		BSP_LED_Off(LED4);
		//BSP_LED_Off(LED5);
		//BSP_LED_Off(LED6);
	}
}
 80006aa:	e002      	b.n	80006b2 <ledMorseCode+0x1e>
		BSP_LED_Off(LED4);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f000 fe8b 	bl	80013c8 <BSP_LED_Off>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <UARTTask>:


void UARTTask(void *argument)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	uint8_t ch;

	while(1){
		if(HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, 0xFFFF) == HAL_OK){
 80006c4:	f107 010f 	add.w	r1, r7, #15
 80006c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006cc:	2201      	movs	r2, #1
 80006ce:	4827      	ldr	r0, [pc, #156]	; (800076c <UARTTask+0xb0>)
 80006d0:	f003 fcd1 	bl	8004076 <HAL_UART_Receive>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d144      	bne.n	8000764 <UARTTask+0xa8>
		   CDC_Transmit_FS(&ch,  1);
 80006da:	f107 030f 	add.w	r3, r7, #15
 80006de:	2101      	movs	r1, #1
 80006e0:	4618      	mov	r0, r3
 80006e2:	f009 fe37 	bl	800a354 <CDC_Transmit_FS>

		   // Check for uppercase letters
		  if (ch >= 'A' && ch <= 'Z') {
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	2b40      	cmp	r3, #64	; 0x40
 80006ea:	d90b      	bls.n	8000704 <UARTTask+0x48>
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	2b5a      	cmp	r3, #90	; 0x5a
 80006f0:	d808      	bhi.n	8000704 <UARTTask+0x48>
			flash_morse_code(letters[ch - 'A']);
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	3b41      	subs	r3, #65	; 0x41
 80006f6:	4a1e      	ldr	r2, [pc, #120]	; (8000770 <UARTTask+0xb4>)
 80006f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 fd83 	bl	8001208 <flash_morse_code>
 8000702:	e02f      	b.n	8000764 <UARTTask+0xa8>
		  }
		  // Check for lowercase letters
		  else  if (ch >= 'a' && ch <= 'z') {
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	2b60      	cmp	r3, #96	; 0x60
 8000708:	d90b      	bls.n	8000722 <UARTTask+0x66>
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	2b7a      	cmp	r3, #122	; 0x7a
 800070e:	d808      	bhi.n	8000722 <UARTTask+0x66>
			flash_morse_code(letters[ch - 'a']);
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	3b61      	subs	r3, #97	; 0x61
 8000714:	4a16      	ldr	r2, [pc, #88]	; (8000770 <UARTTask+0xb4>)
 8000716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800071a:	4618      	mov	r0, r3
 800071c:	f000 fd74 	bl	8001208 <flash_morse_code>
 8000720:	e020      	b.n	8000764 <UARTTask+0xa8>
		  }
		  // Check for numbers
		  else if (ch >= '0' && ch <= '9') {
 8000722:	7bfb      	ldrb	r3, [r7, #15]
 8000724:	2b2f      	cmp	r3, #47	; 0x2f
 8000726:	d90b      	bls.n	8000740 <UARTTask+0x84>
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	2b39      	cmp	r3, #57	; 0x39
 800072c:	d808      	bhi.n	8000740 <UARTTask+0x84>
			flash_morse_code(numbers[ch - '0']);
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	3b30      	subs	r3, #48	; 0x30
 8000732:	4a10      	ldr	r2, [pc, #64]	; (8000774 <UARTTask+0xb8>)
 8000734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000738:	4618      	mov	r0, r3
 800073a:	f000 fd65 	bl	8001208 <flash_morse_code>
 800073e:	e011      	b.n	8000764 <UARTTask+0xa8>
		  }
		  // Check for space between words
		  else if (ch == ' ') {
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	2b20      	cmp	r3, #32
 8000744:	d108      	bne.n	8000758 <UARTTask+0x9c>
			// Put space between two words in a message...equal to seven dots
			osDelay(dot_duration * 7);
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <UARTTask+0xbc>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4613      	mov	r3, r2
 800074c:	00db      	lsls	r3, r3, #3
 800074e:	1a9b      	subs	r3, r3, r2
 8000750:	4618      	mov	r0, r3
 8000752:	f007 f81b 	bl	800778c <osDelay>
 8000756:	e005      	b.n	8000764 <UARTTask+0xa8>
		  }
		  // Check for sentinel value
		  else if (ch == '!') {
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	2b21      	cmp	r3, #33	; 0x21
 800075c:	d102      	bne.n	8000764 <UARTTask+0xa8>
			done = 1;
 800075e:	4b07      	ldr	r3, [pc, #28]	; (800077c <UARTTask+0xc0>)
 8000760:	2201      	movs	r2, #1
 8000762:	701a      	strb	r2, [r3, #0]
		  }
		}
	    osDelay(100);
 8000764:	2064      	movs	r0, #100	; 0x64
 8000766:	f007 f811 	bl	800778c <osDelay>
		if(HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, 0xFFFF) == HAL_OK){
 800076a:	e7ab      	b.n	80006c4 <UARTTask+0x8>
 800076c:	20004e04 	.word	0x20004e04
 8000770:	20000000 	.word	0x20000000
 8000774:	20000068 	.word	0x20000068
 8000778:	20000090 	.word	0x20000090
 800077c:	200002a8 	.word	0x200002a8

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b094      	sub	sp, #80	; 0x50
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 0320 	add.w	r3, r7, #32
 800078a:	2230      	movs	r2, #48	; 0x30
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f00a fa84 	bl	800ac9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	4b27      	ldr	r3, [pc, #156]	; (8000848 <SystemClock_Config+0xc8>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ac:	4a26      	ldr	r2, [pc, #152]	; (8000848 <SystemClock_Config+0xc8>)
 80007ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b2:	6413      	str	r3, [r2, #64]	; 0x40
 80007b4:	4b24      	ldr	r3, [pc, #144]	; (8000848 <SystemClock_Config+0xc8>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	4b21      	ldr	r3, [pc, #132]	; (800084c <SystemClock_Config+0xcc>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a20      	ldr	r2, [pc, #128]	; (800084c <SystemClock_Config+0xcc>)
 80007ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	4b1e      	ldr	r3, [pc, #120]	; (800084c <SystemClock_Config+0xcc>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007dc:	2301      	movs	r3, #1
 80007de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e6:	2302      	movs	r3, #2
 80007e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007f0:	2304      	movs	r3, #4
 80007f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007f4:	2348      	movs	r3, #72	; 0x48
 80007f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007fc:	2303      	movs	r3, #3
 80007fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000800:	f107 0320 	add.w	r3, r7, #32
 8000804:	4618      	mov	r0, r3
 8000806:	f002 fc31 	bl	800306c <HAL_RCC_OscConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000810:	f000 fcf4 	bl	80011fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000814:	230f      	movs	r3, #15
 8000816:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000818:	2302      	movs	r3, #2
 800081a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000824:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	2102      	movs	r1, #2
 8000830:	4618      	mov	r0, r3
 8000832:	f002 fe93 	bl	800355c <HAL_RCC_ClockConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800083c:	f000 fcde 	bl	80011fc <Error_Handler>
  }
}
 8000840:	bf00      	nop
 8000842:	3750      	adds	r7, #80	; 0x50
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40023800 	.word	0x40023800
 800084c:	40007000 	.word	0x40007000

08000850 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <MX_USART1_UART_Init+0x50>)
 8000858:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <MX_USART1_UART_Init+0x4c>)
 800085c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000860:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_USART1_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_USART1_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000888:	f003 fb16 	bl	8003eb8 <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000892:	f000 fcb3 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20004e04 	.word	0x20004e04
 80008a0:	40011000 	.word	0x40011000

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08c      	sub	sp, #48	; 0x30
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	61bb      	str	r3, [r7, #24]
 80008be:	4b96      	ldr	r3, [pc, #600]	; (8000b18 <MX_GPIO_Init+0x274>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a95      	ldr	r2, [pc, #596]	; (8000b18 <MX_GPIO_Init+0x274>)
 80008c4:	f043 0310 	orr.w	r3, r3, #16
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b93      	ldr	r3, [pc, #588]	; (8000b18 <MX_GPIO_Init+0x274>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0310 	and.w	r3, r3, #16
 80008d2:	61bb      	str	r3, [r7, #24]
 80008d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
 80008da:	4b8f      	ldr	r3, [pc, #572]	; (8000b18 <MX_GPIO_Init+0x274>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a8e      	ldr	r2, [pc, #568]	; (8000b18 <MX_GPIO_Init+0x274>)
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b8c      	ldr	r3, [pc, #560]	; (8000b18 <MX_GPIO_Init+0x274>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	4b88      	ldr	r3, [pc, #544]	; (8000b18 <MX_GPIO_Init+0x274>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a87      	ldr	r2, [pc, #540]	; (8000b18 <MX_GPIO_Init+0x274>)
 80008fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b85      	ldr	r3, [pc, #532]	; (8000b18 <MX_GPIO_Init+0x274>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	4b81      	ldr	r3, [pc, #516]	; (8000b18 <MX_GPIO_Init+0x274>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a80      	ldr	r2, [pc, #512]	; (8000b18 <MX_GPIO_Init+0x274>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b7e      	ldr	r3, [pc, #504]	; (8000b18 <MX_GPIO_Init+0x274>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	4b7a      	ldr	r3, [pc, #488]	; (8000b18 <MX_GPIO_Init+0x274>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a79      	ldr	r2, [pc, #484]	; (8000b18 <MX_GPIO_Init+0x274>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b77      	ldr	r3, [pc, #476]	; (8000b18 <MX_GPIO_Init+0x274>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b73      	ldr	r3, [pc, #460]	; (8000b18 <MX_GPIO_Init+0x274>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a72      	ldr	r2, [pc, #456]	; (8000b18 <MX_GPIO_Init+0x274>)
 8000950:	f043 0308 	orr.w	r3, r3, #8
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b70      	ldr	r3, [pc, #448]	; (8000b18 <MX_GPIO_Init+0x274>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0308 	and.w	r3, r3, #8
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2108      	movs	r1, #8
 8000966:	486d      	ldr	r0, [pc, #436]	; (8000b1c <MX_GPIO_Init+0x278>)
 8000968:	f001 f9c0 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	2101      	movs	r1, #1
 8000970:	486b      	ldr	r0, [pc, #428]	; (8000b20 <MX_GPIO_Init+0x27c>)
 8000972:	f001 f9bb 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000976:	2200      	movs	r2, #0
 8000978:	f24f 0110 	movw	r1, #61456	; 0xf010
 800097c:	4869      	ldr	r0, [pc, #420]	; (8000b24 <MX_GPIO_Init+0x280>)
 800097e:	f001 f9b5 	bl	8001cec <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000982:	2304      	movs	r3, #4
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4861      	ldr	r0, [pc, #388]	; (8000b1c <MX_GPIO_Init+0x278>)
 8000996:	f001 f80d 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800099a:	2308      	movs	r3, #8
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	485a      	ldr	r0, [pc, #360]	; (8000b1c <MX_GPIO_Init+0x278>)
 80009b2:	f000 ffff 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 80009b6:	2332      	movs	r3, #50	; 0x32
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ba:	4b5b      	ldr	r3, [pc, #364]	; (8000b28 <MX_GPIO_Init+0x284>)
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4854      	ldr	r0, [pc, #336]	; (8000b1c <MX_GPIO_Init+0x278>)
 80009ca:	f000 fff3 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009ce:	2301      	movs	r3, #1
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	484e      	ldr	r0, [pc, #312]	; (8000b20 <MX_GPIO_Init+0x27c>)
 80009e6:	f000 ffe5 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009ea:	2308      	movs	r3, #8
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009fa:	2305      	movs	r3, #5
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4846      	ldr	r0, [pc, #280]	; (8000b20 <MX_GPIO_Init+0x27c>)
 8000a06:	f000 ffd5 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a0e:	4b47      	ldr	r3, [pc, #284]	; (8000b2c <MX_GPIO_Init+0x288>)
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4844      	ldr	r0, [pc, #272]	; (8000b30 <MX_GPIO_Init+0x28c>)
 8000a1e:	f000 ffc9 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a22:	2310      	movs	r3, #16
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a32:	2306      	movs	r3, #6
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	483c      	ldr	r0, [pc, #240]	; (8000b30 <MX_GPIO_Init+0x28c>)
 8000a3e:	f000 ffb9 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000a42:	23e0      	movs	r3, #224	; 0xe0
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a52:	2305      	movs	r3, #5
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4834      	ldr	r0, [pc, #208]	; (8000b30 <MX_GPIO_Init+0x28c>)
 8000a5e:	f000 ffa9 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000a62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a74:	2305      	movs	r3, #5
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	482d      	ldr	r0, [pc, #180]	; (8000b34 <MX_GPIO_Init+0x290>)
 8000a80:	f000 ff98 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a84:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a88:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4821      	ldr	r0, [pc, #132]	; (8000b24 <MX_GPIO_Init+0x280>)
 8000a9e:	f000 ff89 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000aa2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ab4:	2306      	movs	r3, #6
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4818      	ldr	r0, [pc, #96]	; (8000b20 <MX_GPIO_Init+0x27c>)
 8000ac0:	f000 ff78 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ac4:	2320      	movs	r3, #32
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4813      	ldr	r0, [pc, #76]	; (8000b24 <MX_GPIO_Init+0x280>)
 8000ad8:	f000 ff6c 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000adc:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae2:	2312      	movs	r3, #18
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aee:	2304      	movs	r3, #4
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	480e      	ldr	r0, [pc, #56]	; (8000b34 <MX_GPIO_Init+0x290>)
 8000afa:	f000 ff5b 	bl	80019b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2105      	movs	r1, #5
 8000b02:	2006      	movs	r0, #6
 8000b04:	f000 ff2c 	bl	8001960 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b08:	2006      	movs	r0, #6
 8000b0a:	f000 ff45 	bl	8001998 <HAL_NVIC_EnableIRQ>

}
 8000b0e:	bf00      	nop
 8000b10:	3730      	adds	r7, #48	; 0x30
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40020800 	.word	0x40020800
 8000b24:	40020c00 	.word	0x40020c00
 8000b28:	10120000 	.word	0x10120000
 8000b2c:	10310000 	.word	0x10310000
 8000b30:	40020000 	.word	0x40020000
 8000b34:	40020400 	.word	0x40020400

08000b38 <UART_transmit>:


/* USER CODE BEGIN 4 */

void UART_transmit(uint8_t *buff, uint16_t len)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, buff, len, 0xFFFF);
 8000b44:	887a      	ldrh	r2, [r7, #2]
 8000b46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	4803      	ldr	r0, [pc, #12]	; (8000b5c <UART_transmit+0x24>)
 8000b4e:	f003 fa00 	bl	8003f52 <HAL_UART_Transmit>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20004e04 	.word	0x20004e04

08000b60 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08c      	sub	sp, #48	; 0x30
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000b68:	f009 fb30 	bl	800a1cc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	uint8_t val = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t i = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	char buf[32];
	uint8_t init = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sprintf(buf, "\r\n");
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	495f      	ldr	r1, [pc, #380]	; (8000d00 <StartDefaultTask+0x1a0>)
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00a f891 	bl	800acac <siprintf>
	CDC_Transmit_FS((uint8_t *) buf, strlen(buf));
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fb26 	bl	80001e0 <strlen>
 8000b94:	4603      	mov	r3, r0
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f009 fbd8 	bl	800a354 <CDC_Transmit_FS>
	UART_transmit((uint8_t *) buf, strlen(buf));
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fb19 	bl	80001e0 <strlen>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	f107 030c 	add.w	r3, r7, #12
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ffbd 	bl	8000b38 <UART_transmit>
  /* Infinite loop */
  for(;;)
  {
	time = HAL_GetTick();
 8000bbe:	f000 fde7 	bl	8001790 <HAL_GetTick>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	4a4f      	ldr	r2, [pc, #316]	; (8000d04 <StartDefaultTask+0x1a4>)
 8000bc6:	6013      	str	r3, [r2, #0]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 8000bc8:	e010      	b.n	8000bec <StartDefaultTask+0x8c>
	  val = 1;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bd6:	484c      	ldr	r0, [pc, #304]	; (8000d08 <StartDefaultTask+0x1a8>)
 8000bd8:	f001 f888 	bl	8001cec <HAL_GPIO_WritePin>
	  prev_time = HAL_GetTick();
 8000bdc:	f000 fdd8 	bl	8001790 <HAL_GetTick>
 8000be0:	4603      	mov	r3, r0
 8000be2:	4a4a      	ldr	r2, [pc, #296]	; (8000d0c <StartDefaultTask+0x1ac>)
 8000be4:	6013      	str	r3, [r2, #0]
	  init = 1;
 8000be6:	2301      	movs	r3, #1
 8000be8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 8000bec:	2101      	movs	r1, #1
 8000bee:	4848      	ldr	r0, [pc, #288]	; (8000d10 <StartDefaultTask+0x1b0>)
 8000bf0:	f001 f864 	bl	8001cbc <HAL_GPIO_ReadPin>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1e7      	bne.n	8000bca <StartDefaultTask+0x6a>

	}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c00:	4841      	ldr	r0, [pc, #260]	; (8000d08 <StartDefaultTask+0x1a8>)
 8000c02:	f001 f873 	bl	8001cec <HAL_GPIO_WritePin>
	if((HAL_GetTick() - time > 700) && val) {
 8000c06:	f000 fdc3 	bl	8001790 <HAL_GetTick>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	4b3d      	ldr	r3, [pc, #244]	; (8000d04 <StartDefaultTask+0x1a4>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000c16:	d910      	bls.n	8000c3a <StartDefaultTask+0xda>
 8000c18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d00c      	beq.n	8000c3a <StartDefaultTask+0xda>
	  i = 3;
 8000c20:	2303      	movs	r3, #3
 8000c22:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	  xQueueSend(queue_1Handle, &i, portMAX_DELAY);
 8000c26:	4b3b      	ldr	r3, [pc, #236]	; (8000d14 <StartDefaultTask+0x1b4>)
 8000c28:	6818      	ldr	r0, [r3, #0]
 8000c2a:	f107 012d 	add.w	r1, r7, #45	; 0x2d
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f04f 32ff 	mov.w	r2, #4294967295
 8000c34:	f007 f85e 	bl	8007cf4 <xQueueGenericSend>
 8000c38:	e058      	b.n	8000cec <StartDefaultTask+0x18c>
	} else if ((HAL_GetTick() - time > 300) && val) {
 8000c3a:	f000 fda9 	bl	8001790 <HAL_GetTick>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	4b30      	ldr	r3, [pc, #192]	; (8000d04 <StartDefaultTask+0x1a4>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000c4a:	d910      	bls.n	8000c6e <StartDefaultTask+0x10e>
 8000c4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d00c      	beq.n	8000c6e <StartDefaultTask+0x10e>
	  i = 1;
 8000c54:	2301      	movs	r3, #1
 8000c56:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	  xQueueSend(queue_1Handle, &i, portMAX_DELAY);
 8000c5a:	4b2e      	ldr	r3, [pc, #184]	; (8000d14 <StartDefaultTask+0x1b4>)
 8000c5c:	6818      	ldr	r0, [r3, #0]
 8000c5e:	f107 012d 	add.w	r1, r7, #45	; 0x2d
 8000c62:	2300      	movs	r3, #0
 8000c64:	f04f 32ff 	mov.w	r2, #4294967295
 8000c68:	f007 f844 	bl	8007cf4 <xQueueGenericSend>
 8000c6c:	e03e      	b.n	8000cec <StartDefaultTask+0x18c>
	} else if ((HAL_GetTick() - time) > 100 && val) {
 8000c6e:	f000 fd8f 	bl	8001790 <HAL_GetTick>
 8000c72:	4602      	mov	r2, r0
 8000c74:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <StartDefaultTask+0x1a4>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	2b64      	cmp	r3, #100	; 0x64
 8000c7c:	d910      	bls.n	8000ca0 <StartDefaultTask+0x140>
 8000c7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d00c      	beq.n	8000ca0 <StartDefaultTask+0x140>
	  i = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	  xQueueSend(queue_1Handle, &i, portMAX_DELAY);
 8000c8c:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <StartDefaultTask+0x1b4>)
 8000c8e:	6818      	ldr	r0, [r3, #0]
 8000c90:	f107 012d 	add.w	r1, r7, #45	; 0x2d
 8000c94:	2300      	movs	r3, #0
 8000c96:	f04f 32ff 	mov.w	r2, #4294967295
 8000c9a:	f007 f82b 	bl	8007cf4 <xQueueGenericSend>
 8000c9e:	e025      	b.n	8000cec <StartDefaultTask+0x18c>
	} else if ((HAL_GetTick() - prev_time) > 300 && (HAL_GetTick() - prev_time) < 450 && !val && init) {
 8000ca0:	f000 fd76 	bl	8001790 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <StartDefaultTask+0x1ac>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000cb0:	d91c      	bls.n	8000cec <StartDefaultTask+0x18c>
 8000cb2:	f000 fd6d 	bl	8001790 <HAL_GetTick>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <StartDefaultTask+0x1ac>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000cc2:	d213      	bcs.n	8000cec <StartDefaultTask+0x18c>
 8000cc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d10f      	bne.n	8000cec <StartDefaultTask+0x18c>
 8000ccc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d00b      	beq.n	8000cec <StartDefaultTask+0x18c>
	  i = 2;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	  xQueueSend(queue_1Handle, &i, portMAX_DELAY);
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <StartDefaultTask+0x1b4>)
 8000cdc:	6818      	ldr	r0, [r3, #0]
 8000cde:	f107 012d 	add.w	r1, r7, #45	; 0x2d
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce8:	f007 f804 	bl	8007cf4 <xQueueGenericSend>
	}
	val = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	vTaskDelay(100);
 8000cf2:	2064      	movs	r0, #100	; 0x64
 8000cf4:	f007 fd88 	bl	8008808 <vTaskDelay>
    osDelay(1);
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f006 fd47 	bl	800778c <osDelay>
	time = HAL_GetTick();
 8000cfe:	e75e      	b.n	8000bbe <StartDefaultTask+0x5e>
 8000d00:	0800b54c 	.word	0x0800b54c
 8000d04:	20004e50 	.word	0x20004e50
 8000d08:	40020c00 	.word	0x40020c00
 8000d0c:	20004e4c 	.word	0x20004e4c
 8000d10:	40020000 	.word	0x40020000
 8000d14:	20004dec 	.word	0x20004dec

08000d18 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	uint8_t j = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  if(xQueueReceive(queue_1Handle,  &j, (TickType_t) 5)) {
 8000d24:	4b32      	ldr	r3, [pc, #200]	; (8000df0 <StartTask02+0xd8>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f107 010f 	add.w	r1, r7, #15
 8000d2c:	2205      	movs	r2, #5
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f007 f97a 	bl	8008028 <xQueueReceive>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d056      	beq.n	8000de8 <StartTask02+0xd0>
		  if(j == 1) {
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d112      	bne.n	8000d66 <StartTask02+0x4e>
			xQueueSend(queue_2_1Handle, &j, portMAX_DELAY);
 8000d40:	4b2c      	ldr	r3, [pc, #176]	; (8000df4 <StartTask02+0xdc>)
 8000d42:	6818      	ldr	r0, [r3, #0]
 8000d44:	f107 010f 	add.w	r1, r7, #15
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d4e:	f006 ffd1 	bl	8007cf4 <xQueueGenericSend>
			xQueueSend(queue_2_2Handle, &j, portMAX_DELAY);
 8000d52:	4b29      	ldr	r3, [pc, #164]	; (8000df8 <StartTask02+0xe0>)
 8000d54:	6818      	ldr	r0, [r3, #0]
 8000d56:	f107 010f 	add.w	r1, r7, #15
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d60:	f006 ffc8 	bl	8007cf4 <xQueueGenericSend>
 8000d64:	e03d      	b.n	8000de2 <StartTask02+0xca>
		  } else if (j == 0) {
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d112      	bne.n	8000d92 <StartTask02+0x7a>
			xQueueSend(queue_2_1Handle, &j, portMAX_DELAY);
 8000d6c:	4b21      	ldr	r3, [pc, #132]	; (8000df4 <StartTask02+0xdc>)
 8000d6e:	6818      	ldr	r0, [r3, #0]
 8000d70:	f107 010f 	add.w	r1, r7, #15
 8000d74:	2300      	movs	r3, #0
 8000d76:	f04f 32ff 	mov.w	r2, #4294967295
 8000d7a:	f006 ffbb 	bl	8007cf4 <xQueueGenericSend>
			xQueueSend(queue_2_2Handle, &j, portMAX_DELAY);
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <StartTask02+0xe0>)
 8000d80:	6818      	ldr	r0, [r3, #0]
 8000d82:	f107 010f 	add.w	r1, r7, #15
 8000d86:	2300      	movs	r3, #0
 8000d88:	f04f 32ff 	mov.w	r2, #4294967295
 8000d8c:	f006 ffb2 	bl	8007cf4 <xQueueGenericSend>
 8000d90:	e027      	b.n	8000de2 <StartTask02+0xca>
		  } else if (j == 2) {
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d112      	bne.n	8000dbe <StartTask02+0xa6>
			xQueueSend(queue_2_1Handle, &j, portMAX_DELAY);
 8000d98:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <StartTask02+0xdc>)
 8000d9a:	6818      	ldr	r0, [r3, #0]
 8000d9c:	f107 010f 	add.w	r1, r7, #15
 8000da0:	2300      	movs	r3, #0
 8000da2:	f04f 32ff 	mov.w	r2, #4294967295
 8000da6:	f006 ffa5 	bl	8007cf4 <xQueueGenericSend>
			xQueueSend(queue_2_2Handle, &j, portMAX_DELAY);
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <StartTask02+0xe0>)
 8000dac:	6818      	ldr	r0, [r3, #0]
 8000dae:	f107 010f 	add.w	r1, r7, #15
 8000db2:	2300      	movs	r3, #0
 8000db4:	f04f 32ff 	mov.w	r2, #4294967295
 8000db8:	f006 ff9c 	bl	8007cf4 <xQueueGenericSend>
 8000dbc:	e011      	b.n	8000de2 <StartTask02+0xca>
		  } else {
			xQueueSend(queue_2_1Handle, &j, portMAX_DELAY);
 8000dbe:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <StartTask02+0xdc>)
 8000dc0:	6818      	ldr	r0, [r3, #0]
 8000dc2:	f107 010f 	add.w	r1, r7, #15
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dcc:	f006 ff92 	bl	8007cf4 <xQueueGenericSend>
			xQueueSend(queue_2_2Handle, &j, portMAX_DELAY);
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <StartTask02+0xe0>)
 8000dd2:	6818      	ldr	r0, [r3, #0]
 8000dd4:	f107 010f 	add.w	r1, r7, #15
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f04f 32ff 	mov.w	r2, #4294967295
 8000dde:	f006 ff89 	bl	8007cf4 <xQueueGenericSend>
		  }
		  vTaskDelay(200);
 8000de2:	20c8      	movs	r0, #200	; 0xc8
 8000de4:	f007 fd10 	bl	8008808 <vTaskDelay>
		}
    osDelay(1);
 8000de8:	2001      	movs	r0, #1
 8000dea:	f006 fccf 	bl	800778c <osDelay>
	  if(xQueueReceive(queue_1Handle,  &j, (TickType_t) 5)) {
 8000dee:	e799      	b.n	8000d24 <StartTask02+0xc>
 8000df0:	20004dec 	.word	0x20004dec
 8000df4:	20004dfc 	.word	0x20004dfc
 8000df8:	20004df8 	.word	0x20004df8

08000dfc <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b090      	sub	sp, #64	; 0x40
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	  uint8_t buf[10];
	  uint8_t i = 0, count = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  char a[32];
	  for(uint8_t k = 0; k < 10; k++) {
 8000e10:	2300      	movs	r3, #0
 8000e12:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000e16:	e00c      	b.n	8000e32 <StartTask03+0x36>
		buf[k] = 5;
 8000e18:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000e1c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000e20:	4413      	add	r3, r2
 8000e22:	2205      	movs	r2, #5
 8000e24:	f803 2c10 	strb.w	r2, [r3, #-16]
	  for(uint8_t k = 0; k < 10; k++) {
 8000e28:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000e32:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000e36:	2b09      	cmp	r3, #9
 8000e38:	d9ee      	bls.n	8000e18 <StartTask03+0x1c>
	  }
  /* Infinite loop */
  for(;;)
  {
	  if(xQueueReceive(queue_2_1Handle, &i, portMAX_DELAY)) {
 8000e3a:	4b8f      	ldr	r3, [pc, #572]	; (8001078 <StartTask03+0x27c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 8000e42:	f04f 32ff 	mov.w	r2, #4294967295
 8000e46:	4618      	mov	r0, r3
 8000e48:	f007 f8ee 	bl	8008028 <xQueueReceive>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f000 810a 	beq.w	8001068 <StartTask03+0x26c>
		if(i == 2) {
 8000e54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	f040 80d2 	bne.w	8001002 <StartTask03+0x206>
		   if (count != 0) {
 8000e5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 8100 	beq.w	8001068 <StartTask03+0x26c>
		  if(buf[0] == 0 && buf[1] == 1 && count == 2) {
 8000e68:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d127      	bne.n	8000ec0 <StartTask03+0xc4>
 8000e70:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d123      	bne.n	8000ec0 <StartTask03+0xc4>
 8000e78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d11f      	bne.n	8000ec0 <StartTask03+0xc4>
			sprintf(a, "A");
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	497d      	ldr	r1, [pc, #500]	; (800107c <StartTask03+0x280>)
 8000e86:	4618      	mov	r0, r3
 8000e88:	f009 ff10 	bl	800acac <siprintf>
			UART_transmit((uint8_t *) a, strlen(a));
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff f9a5 	bl	80001e0 <strlen>
 8000e96:	4603      	mov	r3, r0
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fe49 	bl	8000b38 <UART_transmit>
			CDC_Transmit_FS((uint8_t *) a, strlen(a));
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff f998 	bl	80001e0 <strlen>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	4611      	mov	r1, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f009 fa4a 	bl	800a354 <CDC_Transmit_FS>
		  }
		  if (buf[0] == 0 && buf[1] == 0 && buf[2] == 1 && count == 3) {
 8000ec0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d12b      	bne.n	8000f20 <StartTask03+0x124>
 8000ec8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d127      	bne.n	8000f20 <StartTask03+0x124>
 8000ed0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d123      	bne.n	8000f20 <StartTask03+0x124>
 8000ed8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	d11f      	bne.n	8000f20 <StartTask03+0x124>
			sprintf(a, "U");
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	4966      	ldr	r1, [pc, #408]	; (8001080 <StartTask03+0x284>)
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f009 fee0 	bl	800acac <siprintf>
			CDC_Transmit_FS((uint8_t *) a, strlen(a));
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff f975 	bl	80001e0 <strlen>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	f107 030c 	add.w	r3, r7, #12
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f009 fa27 	bl	800a354 <CDC_Transmit_FS>
			UART_transmit((uint8_t *) a, strlen(a));
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff f968 	bl	80001e0 <strlen>
 8000f10:	4603      	mov	r3, r0
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	4611      	mov	r1, r2
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fe0c 	bl	8000b38 <UART_transmit>
		  }
		  if(buf[0] == 1 && count == 1) {
 8000f20:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d123      	bne.n	8000f70 <StartTask03+0x174>
 8000f28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d11f      	bne.n	8000f70 <StartTask03+0x174>
			sprintf(a, "T");
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	4953      	ldr	r1, [pc, #332]	; (8001084 <StartTask03+0x288>)
 8000f36:	4618      	mov	r0, r3
 8000f38:	f009 feb8 	bl	800acac <siprintf>
			CDC_Transmit_FS((uint8_t *) a, strlen(a));
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff f94d 	bl	80001e0 <strlen>
 8000f46:	4603      	mov	r3, r0
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f009 f9ff 	bl	800a354 <CDC_Transmit_FS>
			UART_transmit((uint8_t *) a, strlen(a));
 8000f56:	f107 030c 	add.w	r3, r7, #12
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff f940 	bl	80001e0 <strlen>
 8000f60:	4603      	mov	r3, r0
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	4611      	mov	r1, r2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fde4 	bl	8000b38 <UART_transmit>
		  }
		  if (buf[0] == 0 && buf[1] == 1 && buf[2] == 0 && count == 3) {
 8000f70:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d12b      	bne.n	8000fd0 <StartTask03+0x1d4>
 8000f78:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d127      	bne.n	8000fd0 <StartTask03+0x1d4>
 8000f80:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d123      	bne.n	8000fd0 <StartTask03+0x1d4>
 8000f88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f8c:	2b03      	cmp	r3, #3
 8000f8e:	d11f      	bne.n	8000fd0 <StartTask03+0x1d4>
			sprintf(a, "R");
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	493c      	ldr	r1, [pc, #240]	; (8001088 <StartTask03+0x28c>)
 8000f96:	4618      	mov	r0, r3
 8000f98:	f009 fe88 	bl	800acac <siprintf>
			CDC_Transmit_FS((uint8_t *) a, strlen(a));
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff f91d 	bl	80001e0 <strlen>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f009 f9cf 	bl	800a354 <CDC_Transmit_FS>
			UART_transmit((uint8_t *) a, strlen(a));
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff f910 	bl	80001e0 <strlen>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	4611      	mov	r1, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fdb4 	bl	8000b38 <UART_transmit>
		  }
		  count = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		  for(uint8_t k = 0; k < 10; k++) {
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8000fdc:	e00c      	b.n	8000ff8 <StartTask03+0x1fc>
			buf[k] = 5;
 8000fde:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000fe2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000fe6:	4413      	add	r3, r2
 8000fe8:	2205      	movs	r2, #5
 8000fea:	f803 2c10 	strb.w	r2, [r3, #-16]
		  for(uint8_t k = 0; k < 10; k++) {
 8000fee:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8000ff8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000ffc:	2b09      	cmp	r3, #9
 8000ffe:	d9ee      	bls.n	8000fde <StartTask03+0x1e2>
 8001000:	e032      	b.n	8001068 <StartTask03+0x26c>
		  }
		   }
		} else if (i == 3) {
 8001002:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001006:	2b03      	cmp	r3, #3
 8001008:	d120      	bne.n	800104c <StartTask03+0x250>
		sprintf(a, " ");
 800100a:	f107 030c 	add.w	r3, r7, #12
 800100e:	491f      	ldr	r1, [pc, #124]	; (800108c <StartTask03+0x290>)
 8001010:	4618      	mov	r0, r3
 8001012:	f009 fe4b 	bl	800acac <siprintf>
		CDC_Transmit_FS((uint8_t *) a, strlen(a));
 8001016:	f107 030c 	add.w	r3, r7, #12
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff f8e0 	bl	80001e0 <strlen>
 8001020:	4603      	mov	r3, r0
 8001022:	b29a      	uxth	r2, r3
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	4611      	mov	r1, r2
 800102a:	4618      	mov	r0, r3
 800102c:	f009 f992 	bl	800a354 <CDC_Transmit_FS>
		UART_transmit((uint8_t *) a, strlen(a));
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff f8d3 	bl	80001e0 <strlen>
 800103a:	4603      	mov	r3, r0
 800103c:	b29a      	uxth	r2, r3
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fd77 	bl	8000b38 <UART_transmit>
 800104a:	e00d      	b.n	8001068 <StartTask03+0x26c>
	  } else {
		  buf[count] = i;
 800104c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001050:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001054:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001058:	440b      	add	r3, r1
 800105a:	f803 2c10 	strb.w	r2, [r3, #-16]
		  count++;
 800105e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001062:	3301      	adds	r3, #1
 8001064:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
	  }
	  vTaskDelay(300);
 8001068:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800106c:	f007 fbcc 	bl	8008808 <vTaskDelay>
    osDelay(1);
 8001070:	2001      	movs	r0, #1
 8001072:	f006 fb8b 	bl	800778c <osDelay>
	  if(xQueueReceive(queue_2_1Handle, &i, portMAX_DELAY)) {
 8001076:	e6e0      	b.n	8000e3a <StartTask03+0x3e>
 8001078:	20004dfc 	.word	0x20004dfc
 800107c:	0800b550 	.word	0x0800b550
 8001080:	0800b554 	.word	0x0800b554
 8001084:	0800b558 	.word	0x0800b558
 8001088:	0800b55c 	.word	0x0800b55c
 800108c:	0800b560 	.word	0x0800b560

08001090 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08c      	sub	sp, #48	; 0x30
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	  uint8_t buf[32];
	  uint8_t count = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  for(uint8_t i = 0; i <= 32; i++) {
 800109e:	2300      	movs	r3, #0
 80010a0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80010a4:	e00c      	b.n	80010c0 <StartTask04+0x30>
	    buf[i] = 5;
 80010a6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80010aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80010ae:	4413      	add	r3, r2
 80010b0:	2205      	movs	r2, #5
 80010b2:	f803 2c24 	strb.w	r2, [r3, #-36]
	  for(uint8_t i = 0; i <= 32; i++) {
 80010b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80010ba:	3301      	adds	r3, #1
 80010bc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80010c0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80010c4:	2b20      	cmp	r3, #32
 80010c6:	d9ee      	bls.n	80010a6 <StartTask04+0x16>
	  }
	  uint8_t z;
  /* Infinite loop */
  for(;;)
  {
	  if(xQueueReceive(queue_2_2Handle, &z, portMAX_DELAY)) {
 80010c8:	4b41      	ldr	r3, [pc, #260]	; (80011d0 <StartTask04+0x140>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f107 010b 	add.w	r1, r7, #11
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295
 80010d4:	4618      	mov	r0, r3
 80010d6:	f006 ffa7 	bl	8008028 <xQueueReceive>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d072      	beq.n	80011c6 <StartTask04+0x136>
		if(z >= 0 && z <= 2) {
 80010e0:	7afb      	ldrb	r3, [r7, #11]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d80a      	bhi.n	80010fc <StartTask04+0x6c>
		  buf[count++] = z;
 80010e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80010f0:	7afa      	ldrb	r2, [r7, #11]
 80010f2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80010f6:	440b      	add	r3, r1
 80010f8:	f803 2c24 	strb.w	r2, [r3, #-36]
		}
		if(z == 3) {
 80010fc:	7afb      	ldrb	r3, [r7, #11]
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d161      	bne.n	80011c6 <StartTask04+0x136>
		  count = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		  for(uint8_t k = 0; buf[k] != 5 && k < 32; k++) {
 8001108:	2300      	movs	r3, #0
 800110a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800110e:	e04d      	b.n	80011ac <StartTask04+0x11c>
			if(buf[k] == 0) {
 8001110:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001114:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001118:	4413      	add	r3, r2
 800111a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d110      	bne.n	8001144 <StartTask04+0xb4>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);
 8001122:	2201      	movs	r2, #1
 8001124:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001128:	482a      	ldr	r0, [pc, #168]	; (80011d4 <StartTask04+0x144>)
 800112a:	f000 fddf 	bl	8001cec <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 800112e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001132:	f000 fb39 	bl	80017a8 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800113c:	4825      	ldr	r0, [pc, #148]	; (80011d4 <StartTask04+0x144>)
 800113e:	f000 fdd5 	bl	8001cec <HAL_GPIO_WritePin>
 8001142:	e026      	b.n	8001192 <StartTask04+0x102>
			} else if (buf[k] == 1) {
 8001144:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001148:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800114c:	4413      	add	r3, r2
 800114e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d110      	bne.n	8001178 <StartTask04+0xe8>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);
 8001156:	2201      	movs	r2, #1
 8001158:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800115c:	481d      	ldr	r0, [pc, #116]	; (80011d4 <StartTask04+0x144>)
 800115e:	f000 fdc5 	bl	8001cec <HAL_GPIO_WritePin>
			  HAL_Delay(3000);
 8001162:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001166:	f000 fb1f 	bl	80017a8 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001170:	4818      	ldr	r0, [pc, #96]	; (80011d4 <StartTask04+0x144>)
 8001172:	f000 fdbb 	bl	8001cec <HAL_GPIO_WritePin>
 8001176:	e00c      	b.n	8001192 <StartTask04+0x102>
			} else if(buf[k] == 2) {
 8001178:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800117c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001180:	4413      	add	r3, r2
 8001182:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001186:	2b02      	cmp	r3, #2
 8001188:	d103      	bne.n	8001192 <StartTask04+0x102>
			  HAL_Delay(3000);
 800118a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800118e:	f000 fb0b 	bl	80017a8 <HAL_Delay>
			}
			buf[k] = 5;
 8001192:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001196:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800119a:	4413      	add	r3, r2
 800119c:	2205      	movs	r2, #5
 800119e:	f803 2c24 	strb.w	r2, [r3, #-36]
		  for(uint8_t k = 0; buf[k] != 5 && k < 32; k++) {
 80011a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80011a6:	3301      	adds	r3, #1
 80011a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80011ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80011b0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80011b4:	4413      	add	r3, r2
 80011b6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011ba:	2b05      	cmp	r3, #5
 80011bc:	d003      	beq.n	80011c6 <StartTask04+0x136>
 80011be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80011c2:	2b1f      	cmp	r3, #31
 80011c4:	d9a4      	bls.n	8001110 <StartTask04+0x80>
		  }
		}
	  }
    osDelay(1);
 80011c6:	2001      	movs	r0, #1
 80011c8:	f006 fae0 	bl	800778c <osDelay>
	  if(xQueueReceive(queue_2_2Handle, &z, portMAX_DELAY)) {
 80011cc:	e77c      	b.n	80010c8 <StartTask04+0x38>
 80011ce:	bf00      	nop
 80011d0:	20004df8 	.word	0x20004df8
 80011d4:	40020c00 	.word	0x40020c00

080011d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d101      	bne.n	80011ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011ea:	f000 fabd 	bl	8001768 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40014800 	.word	0x40014800

080011fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001200:	b672      	cpsid	i
}
 8001202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001204:	e7fe      	b.n	8001204 <Error_Handler+0x8>
	...

08001208 <flash_morse_code>:
unsigned int dot_duration = 200;
/**
  *  Flashes the Morse code for the input letter or number
  *  @param morse_code pointer to the morse code
  */
void flash_morse_code(char *morse_code) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

  unsigned int i = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]

  // Read the dots and dashes and flash accordingly
  while (morse_code[i] != NULL) {
 8001214:	e009      	b.n	800122a <flash_morse_code+0x22>
    flash_dot_or_dash(morse_code[i]);
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4413      	add	r3, r2
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f818 	bl	8001254 <flash_dot_or_dash>
    i++;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	3301      	adds	r3, #1
 8001228:	60fb      	str	r3, [r7, #12]
  while (morse_code[i] != NULL) {
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4413      	add	r3, r2
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1ef      	bne.n	8001216 <flash_morse_code+0xe>
  }

  // Space between two letters is equal to three dots
  osDelay(dot_duration * 3);
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <flash_morse_code+0x48>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	4613      	mov	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f006 faa3 	bl	800778c <osDelay>
}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000090 	.word	0x20000090

08001254 <flash_dot_or_dash>:

/**
  *  Flashes the dot or dash in the Morse code
  *  @param dot_or_dash character that is a dot or a dash
  */
void flash_dot_or_dash(char dot_or_dash) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]

  // Make the LED shine
  ledMorseCode(ON);
 800125e:	2001      	movs	r0, #1
 8001260:	f7ff fa18 	bl	8000694 <ledMorseCode>


  if (dot_or_dash == '.') { // If it is a dot
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	2b2e      	cmp	r3, #46	; 0x2e
 8001268:	d105      	bne.n	8001276 <flash_dot_or_dash+0x22>
	  osDelay(dot_duration);
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <flash_dot_or_dash+0x4c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f006 fa8c 	bl	800778c <osDelay>
 8001274:	e007      	b.n	8001286 <flash_dot_or_dash+0x32>
  }
  else { // Has to be a dash...equal to three dots
	  osDelay(dot_duration * 3);
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <flash_dot_or_dash+0x4c>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	4613      	mov	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f006 fa83 	bl	800778c <osDelay>
  }

  // Turn the LED off
  ledMorseCode(OFF);
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff fa04 	bl	8000694 <ledMorseCode>

  // Give space between parts of the same letter...equal to one dot
  osDelay(dot_duration);
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <flash_dot_or_dash+0x4c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f006 fa7b 	bl	800778c <osDelay>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000090 	.word	0x20000090

080012a4 <BSP_LED_Init>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10e      	bne.n	80012d2 <BSP_LED_Init+0x2e>
 80012b4:	2300      	movs	r3, #0
 80012b6:	61bb      	str	r3, [r7, #24]
 80012b8:	4b33      	ldr	r3, [pc, #204]	; (8001388 <BSP_LED_Init+0xe4>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012bc:	4a32      	ldr	r2, [pc, #200]	; (8001388 <BSP_LED_Init+0xe4>)
 80012be:	f043 0308 	orr.w	r3, r3, #8
 80012c2:	6313      	str	r3, [r2, #48]	; 0x30
 80012c4:	4b30      	ldr	r3, [pc, #192]	; (8001388 <BSP_LED_Init+0xe4>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c8:	f003 0308 	and.w	r3, r3, #8
 80012cc:	61bb      	str	r3, [r7, #24]
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	e034      	b.n	800133c <BSP_LED_Init+0x98>
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d10e      	bne.n	80012f6 <BSP_LED_Init+0x52>
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <BSP_LED_Init+0xe4>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	4a29      	ldr	r2, [pc, #164]	; (8001388 <BSP_LED_Init+0xe4>)
 80012e2:	f043 0308 	orr.w	r3, r3, #8
 80012e6:	6313      	str	r3, [r2, #48]	; 0x30
 80012e8:	4b27      	ldr	r3, [pc, #156]	; (8001388 <BSP_LED_Init+0xe4>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	f003 0308 	and.w	r3, r3, #8
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	e022      	b.n	800133c <BSP_LED_Init+0x98>
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d10e      	bne.n	800131a <BSP_LED_Init+0x76>
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	4b21      	ldr	r3, [pc, #132]	; (8001388 <BSP_LED_Init+0xe4>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	4a20      	ldr	r2, [pc, #128]	; (8001388 <BSP_LED_Init+0xe4>)
 8001306:	f043 0308 	orr.w	r3, r3, #8
 800130a:	6313      	str	r3, [r2, #48]	; 0x30
 800130c:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <BSP_LED_Init+0xe4>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	f003 0308 	and.w	r3, r3, #8
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	e010      	b.n	800133c <BSP_LED_Init+0x98>
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2b03      	cmp	r3, #3
 800131e:	d10d      	bne.n	800133c <BSP_LED_Init+0x98>
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <BSP_LED_Init+0xe4>)
 8001326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001328:	4a17      	ldr	r2, [pc, #92]	; (8001388 <BSP_LED_Init+0xe4>)
 800132a:	f043 0308 	orr.w	r3, r3, #8
 800132e:	6313      	str	r3, [r2, #48]	; 0x30
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <BSP_LED_Init+0xe4>)
 8001332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001334:	f003 0308 	and.w	r3, r3, #8
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	4a13      	ldr	r2, [pc, #76]	; (800138c <BSP_LED_Init+0xe8>)
 8001340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001346:	2301      	movs	r3, #1
 8001348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800134a:	2301      	movs	r3, #1
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800134e:	2302      	movs	r3, #2
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <BSP_LED_Init+0xec>)
 8001356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135a:	f107 021c 	add.w	r2, r7, #28
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f000 fb27 	bl	80019b4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	4a09      	ldr	r2, [pc, #36]	; (8001390 <BSP_LED_Init+0xec>)
 800136a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	4a06      	ldr	r2, [pc, #24]	; (800138c <BSP_LED_Init+0xe8>)
 8001372:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001376:	2200      	movs	r2, #0
 8001378:	4619      	mov	r1, r3
 800137a:	f000 fcb7 	bl	8001cec <HAL_GPIO_WritePin>
}
 800137e:	bf00      	nop
 8001380:	3730      	adds	r7, #48	; 0x30
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800
 800138c:	0800b7a8 	.word	0x0800b7a8
 8001390:	20000094 	.word	0x20000094

08001394 <BSP_LED_On>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	4a07      	ldr	r2, [pc, #28]	; (80013c0 <BSP_LED_On+0x2c>)
 80013a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <BSP_LED_On+0x30>)
 80013aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013ae:	2201      	movs	r2, #1
 80013b0:	4619      	mov	r1, r3
 80013b2:	f000 fc9b 	bl	8001cec <HAL_GPIO_WritePin>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000094 	.word	0x20000094
 80013c4:	0800b7a8 	.word	0x0800b7a8

080013c8 <BSP_LED_Off>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <BSP_LED_Off+0x2c>)
 80013d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <BSP_LED_Off+0x30>)
 80013de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013e2:	2200      	movs	r2, #0
 80013e4:	4619      	mov	r1, r3
 80013e6:	f000 fc81 	bl	8001cec <HAL_GPIO_WritePin>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000094 	.word	0x20000094
 80013f8:	0800b7a8 	.word	0x0800b7a8

080013fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_MspInit+0x54>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	4a11      	ldr	r2, [pc, #68]	; (8001450 <HAL_MspInit+0x54>)
 800140c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001410:	6453      	str	r3, [r2, #68]	; 0x44
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <HAL_MspInit+0x54>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_MspInit+0x54>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <HAL_MspInit+0x54>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142c:	6413      	str	r3, [r2, #64]	; 0x40
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_MspInit+0x54>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	210f      	movs	r1, #15
 800143e:	f06f 0001 	mvn.w	r0, #1
 8001442:	f000 fa8d 	bl	8001960 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800

08001454 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	; 0x28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a28      	ldr	r2, [pc, #160]	; (8001514 <HAL_UART_MspInit+0xc0>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d14a      	bne.n	800150c <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	4b27      	ldr	r3, [pc, #156]	; (8001518 <HAL_UART_MspInit+0xc4>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	4a26      	ldr	r2, [pc, #152]	; (8001518 <HAL_UART_MspInit+0xc4>)
 8001480:	f043 0310 	orr.w	r3, r3, #16
 8001484:	6453      	str	r3, [r2, #68]	; 0x44
 8001486:	4b24      	ldr	r3, [pc, #144]	; (8001518 <HAL_UART_MspInit+0xc4>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	f003 0310 	and.w	r3, r3, #16
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	4b20      	ldr	r3, [pc, #128]	; (8001518 <HAL_UART_MspInit+0xc4>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a1f      	ldr	r2, [pc, #124]	; (8001518 <HAL_UART_MspInit+0xc4>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <HAL_UART_MspInit+0xc4>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	4b19      	ldr	r3, [pc, #100]	; (8001518 <HAL_UART_MspInit+0xc4>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a18      	ldr	r2, [pc, #96]	; (8001518 <HAL_UART_MspInit+0xc4>)
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b16      	ldr	r3, [pc, #88]	; (8001518 <HAL_UART_MspInit+0xc4>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d0:	2302      	movs	r3, #2
 80014d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014dc:	2307      	movs	r3, #7
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4619      	mov	r1, r3
 80014e6:	480d      	ldr	r0, [pc, #52]	; (800151c <HAL_UART_MspInit+0xc8>)
 80014e8:	f000 fa64 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014fc:	2307      	movs	r3, #7
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	4806      	ldr	r0, [pc, #24]	; (8001520 <HAL_UART_MspInit+0xcc>)
 8001508:	f000 fa54 	bl	80019b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800150c:	bf00      	nop
 800150e:	3728      	adds	r7, #40	; 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40011000 	.word	0x40011000
 8001518:	40023800 	.word	0x40023800
 800151c:	40020000 	.word	0x40020000
 8001520:	40020400 	.word	0x40020400

08001524 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08c      	sub	sp, #48	; 0x30
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8001534:	2200      	movs	r2, #0
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	201a      	movs	r0, #26
 800153a:	f000 fa11 	bl	8001960 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800153e:	201a      	movs	r0, #26
 8001540:	f000 fa2a 	bl	8001998 <HAL_NVIC_EnableIRQ>
  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <HAL_InitTick+0xa0>)
 800154a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154c:	4a1d      	ldr	r2, [pc, #116]	; (80015c4 <HAL_InitTick+0xa0>)
 800154e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001552:	6453      	str	r3, [r2, #68]	; 0x44
 8001554:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <HAL_InitTick+0xa0>)
 8001556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001560:	f107 0210 	add.w	r2, r7, #16
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4611      	mov	r1, r2
 800156a:	4618      	mov	r0, r3
 800156c:	f002 f9f2 	bl	8003954 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001570:	f002 f9dc 	bl	800392c <HAL_RCC_GetPCLK2Freq>
 8001574:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001578:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <HAL_InitTick+0xa4>)
 800157a:	fba2 2303 	umull	r2, r3, r2, r3
 800157e:	0c9b      	lsrs	r3, r3, #18
 8001580:	3b01      	subs	r3, #1
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <HAL_InitTick+0xa8>)
 8001586:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <HAL_InitTick+0xac>)
 8001588:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <HAL_InitTick+0xa8>)
 800158c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001590:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001592:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <HAL_InitTick+0xa8>)
 8001594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001596:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <HAL_InitTick+0xa8>)
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_InitTick+0xa8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 80015a4:	4809      	ldr	r0, [pc, #36]	; (80015cc <HAL_InitTick+0xa8>)
 80015a6:	f002 fa07 	bl	80039b8 <HAL_TIM_Base_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d104      	bne.n	80015ba <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 80015b0:	4806      	ldr	r0, [pc, #24]	; (80015cc <HAL_InitTick+0xa8>)
 80015b2:	f002 fa5b 	bl	8003a6c <HAL_TIM_Base_Start_IT>
 80015b6:	4603      	mov	r3, r0
 80015b8:	e000      	b.n	80015bc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3730      	adds	r7, #48	; 0x30
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40023800 	.word	0x40023800
 80015c8:	431bde83 	.word	0x431bde83
 80015cc:	20004e58 	.word	0x20004e58
 80015d0:	40014800 	.word	0x40014800

080015d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <NMI_Handler+0x4>

080015da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <HardFault_Handler+0x4>

080015e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <MemManage_Handler+0x4>

080015e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <BusFault_Handler+0x4>

080015ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <UsageFault_Handler+0x4>

080015f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001604:	2001      	movs	r0, #1
 8001606:	f000 fb8b 	bl	8001d20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001616:	f002 fa8b 	bl	8003b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20004e58 	.word	0x20004e58

08001624 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <OTG_FS_IRQHandler+0x10>)
 800162a:	f000 fcec 	bl	8002006 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200063b4 	.word	0x200063b4

08001638 <_sbrk>:
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	4a14      	ldr	r2, [pc, #80]	; (8001694 <_sbrk+0x5c>)
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <_sbrk+0x60>)
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <_sbrk+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <_sbrk+0x22>
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <_sbrk+0x64>)
 8001656:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <_sbrk+0x68>)
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <_sbrk+0x64>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	429a      	cmp	r2, r3
 8001666:	d207      	bcs.n	8001678 <_sbrk+0x40>
 8001668:	f009 fae0 	bl	800ac2c <__errno>
 800166c:	4603      	mov	r3, r0
 800166e:	220c      	movs	r2, #12
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	e009      	b.n	800168c <_sbrk+0x54>
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <_sbrk+0x64>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	4a05      	ldr	r2, [pc, #20]	; (800169c <_sbrk+0x64>)
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20020000 	.word	0x20020000
 8001698:	00000400 	.word	0x00000400
 800169c:	200002ac 	.word	0x200002ac
 80016a0:	200067d0 	.word	0x200067d0

080016a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <SystemInit+0x28>)
 80016aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ae:	4a07      	ldr	r2, [pc, #28]	; (80016cc <SystemInit+0x28>)
 80016b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <SystemInit+0x28>)
 80016ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016be:	609a      	str	r2, [r3, #8]
#endif
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <Reset_Handler>:
 80016d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001708 <LoopFillZerobss+0x14>
 80016d4:	2100      	movs	r1, #0
 80016d6:	e003      	b.n	80016e0 <LoopCopyDataInit>

080016d8 <CopyDataInit>:
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <LoopFillZerobss+0x18>)
 80016da:	585b      	ldr	r3, [r3, r1]
 80016dc:	5043      	str	r3, [r0, r1]
 80016de:	3104      	adds	r1, #4

080016e0 <LoopCopyDataInit>:
 80016e0:	480b      	ldr	r0, [pc, #44]	; (8001710 <LoopFillZerobss+0x1c>)
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <LoopFillZerobss+0x20>)
 80016e4:	1842      	adds	r2, r0, r1
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d3f6      	bcc.n	80016d8 <CopyDataInit>
 80016ea:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <LoopFillZerobss+0x24>)
 80016ec:	e002      	b.n	80016f4 <LoopFillZerobss>

080016ee <FillZerobss>:
 80016ee:	2300      	movs	r3, #0
 80016f0:	f842 3b04 	str.w	r3, [r2], #4

080016f4 <LoopFillZerobss>:
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <LoopFillZerobss+0x28>)
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d3f9      	bcc.n	80016ee <FillZerobss>
 80016fa:	f7ff ffd3 	bl	80016a4 <SystemInit>
 80016fe:	f009 fa9b 	bl	800ac38 <__libc_init_array>
 8001702:	f7fe ff41 	bl	8000588 <main>
 8001706:	4770      	bx	lr
 8001708:	20020000 	.word	0x20020000
 800170c:	0800b80c 	.word	0x0800b80c
 8001710:	20000000 	.word	0x20000000
 8001714:	2000028c 	.word	0x2000028c
 8001718:	2000028c 	.word	0x2000028c
 800171c:	200067cc 	.word	0x200067cc

08001720 <ADC_IRQHandler>:
 8001720:	e7fe      	b.n	8001720 <ADC_IRQHandler>
	...

08001724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0d      	ldr	r2, [pc, #52]	; (8001764 <HAL_Init+0x40>)
 800172e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001732:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <HAL_Init+0x40>)
 800173a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800173e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_Init+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a07      	ldr	r2, [pc, #28]	; (8001764 <HAL_Init+0x40>)
 8001746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174c:	2003      	movs	r0, #3
 800174e:	f000 f8fc 	bl	800194a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001752:	2000      	movs	r0, #0
 8001754:	f7ff fee6 	bl	8001524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001758:	f7ff fe50 	bl	80013fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023c00 	.word	0x40023c00

08001768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_IncTick+0x20>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_IncTick+0x24>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4413      	add	r3, r2
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <HAL_IncTick+0x24>)
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	200000ac 	.word	0x200000ac
 800178c:	20004ea0 	.word	0x20004ea0

08001790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return uwTick;
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <HAL_GetTick+0x14>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20004ea0 	.word	0x20004ea0

080017a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b0:	f7ff ffee 	bl	8001790 <HAL_GetTick>
 80017b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c0:	d005      	beq.n	80017ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017c2:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <HAL_Delay+0x44>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4413      	add	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ce:	bf00      	nop
 80017d0:	f7ff ffde 	bl	8001790 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d8f7      	bhi.n	80017d0 <HAL_Delay+0x28>
  {
  }
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200000ac 	.word	0x200000ac

080017f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800180c:	4013      	ands	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800181c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001822:	4a04      	ldr	r2, [pc, #16]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	60d3      	str	r3, [r2, #12]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <__NVIC_GetPriorityGrouping+0x18>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	f003 0307 	and.w	r3, r3, #7
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	2b00      	cmp	r3, #0
 8001864:	db0b      	blt.n	800187e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	f003 021f 	and.w	r2, r3, #31
 800186c:	4907      	ldr	r1, [pc, #28]	; (800188c <__NVIC_EnableIRQ+0x38>)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	2001      	movs	r0, #1
 8001876:	fa00 f202 	lsl.w	r2, r0, r2
 800187a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000e100 	.word	0xe000e100

08001890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	6039      	str	r1, [r7, #0]
 800189a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	db0a      	blt.n	80018ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	490c      	ldr	r1, [pc, #48]	; (80018dc <__NVIC_SetPriority+0x4c>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	0112      	lsls	r2, r2, #4
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	440b      	add	r3, r1
 80018b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b8:	e00a      	b.n	80018d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4908      	ldr	r1, [pc, #32]	; (80018e0 <__NVIC_SetPriority+0x50>)
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	3b04      	subs	r3, #4
 80018c8:	0112      	lsls	r2, r2, #4
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	440b      	add	r3, r1
 80018ce:	761a      	strb	r2, [r3, #24]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000e100 	.word	0xe000e100
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b089      	sub	sp, #36	; 0x24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f1c3 0307 	rsb	r3, r3, #7
 80018fe:	2b04      	cmp	r3, #4
 8001900:	bf28      	it	cs
 8001902:	2304      	movcs	r3, #4
 8001904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3304      	adds	r3, #4
 800190a:	2b06      	cmp	r3, #6
 800190c:	d902      	bls.n	8001914 <NVIC_EncodePriority+0x30>
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3b03      	subs	r3, #3
 8001912:	e000      	b.n	8001916 <NVIC_EncodePriority+0x32>
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	f04f 32ff 	mov.w	r2, #4294967295
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43da      	mvns	r2, r3
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	401a      	ands	r2, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800192c:	f04f 31ff 	mov.w	r1, #4294967295
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	43d9      	mvns	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	4313      	orrs	r3, r2
         );
}
 800193e:	4618      	mov	r0, r3
 8001940:	3724      	adds	r7, #36	; 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ff4c 	bl	80017f0 <__NVIC_SetPriorityGrouping>
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
 800196c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001972:	f7ff ff61 	bl	8001838 <__NVIC_GetPriorityGrouping>
 8001976:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	68b9      	ldr	r1, [r7, #8]
 800197c:	6978      	ldr	r0, [r7, #20]
 800197e:	f7ff ffb1 	bl	80018e4 <NVIC_EncodePriority>
 8001982:	4602      	mov	r2, r0
 8001984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ff80 	bl	8001890 <__NVIC_SetPriority>
}
 8001990:	bf00      	nop
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff ff54 	bl	8001854 <__NVIC_EnableIRQ>
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	; 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
 80019ce:	e159      	b.n	8001c84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019d0:	2201      	movs	r2, #1
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	f040 8148 	bne.w	8001c7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d005      	beq.n	8001a06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d130      	bne.n	8001a68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	2203      	movs	r2, #3
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 0201 	and.w	r2, r3, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d017      	beq.n	8001aa4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d123      	bne.n	8001af8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	08da      	lsrs	r2, r3, #3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3208      	adds	r2, #8
 8001ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	220f      	movs	r2, #15
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	08da      	lsrs	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3208      	adds	r2, #8
 8001af2:	69b9      	ldr	r1, [r7, #24]
 8001af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	2203      	movs	r2, #3
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0203 	and.w	r2, r3, #3
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 80a2 	beq.w	8001c7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b57      	ldr	r3, [pc, #348]	; (8001c9c <HAL_GPIO_Init+0x2e8>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	4a56      	ldr	r2, [pc, #344]	; (8001c9c <HAL_GPIO_Init+0x2e8>)
 8001b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b48:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4a:	4b54      	ldr	r3, [pc, #336]	; (8001c9c <HAL_GPIO_Init+0x2e8>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b56:	4a52      	ldr	r2, [pc, #328]	; (8001ca0 <HAL_GPIO_Init+0x2ec>)
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	220f      	movs	r2, #15
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a49      	ldr	r2, [pc, #292]	; (8001ca4 <HAL_GPIO_Init+0x2f0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d019      	beq.n	8001bb6 <HAL_GPIO_Init+0x202>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a48      	ldr	r2, [pc, #288]	; (8001ca8 <HAL_GPIO_Init+0x2f4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <HAL_GPIO_Init+0x1fe>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a47      	ldr	r2, [pc, #284]	; (8001cac <HAL_GPIO_Init+0x2f8>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d00d      	beq.n	8001bae <HAL_GPIO_Init+0x1fa>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a46      	ldr	r2, [pc, #280]	; (8001cb0 <HAL_GPIO_Init+0x2fc>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d007      	beq.n	8001baa <HAL_GPIO_Init+0x1f6>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a45      	ldr	r2, [pc, #276]	; (8001cb4 <HAL_GPIO_Init+0x300>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d101      	bne.n	8001ba6 <HAL_GPIO_Init+0x1f2>
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	e008      	b.n	8001bb8 <HAL_GPIO_Init+0x204>
 8001ba6:	2307      	movs	r3, #7
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x204>
 8001baa:	2303      	movs	r3, #3
 8001bac:	e004      	b.n	8001bb8 <HAL_GPIO_Init+0x204>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e002      	b.n	8001bb8 <HAL_GPIO_Init+0x204>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_GPIO_Init+0x204>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	f002 0203 	and.w	r2, r2, #3
 8001bbe:	0092      	lsls	r2, r2, #2
 8001bc0:	4093      	lsls	r3, r2
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc8:	4935      	ldr	r1, [pc, #212]	; (8001ca0 <HAL_GPIO_Init+0x2ec>)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	089b      	lsrs	r3, r3, #2
 8001bce:	3302      	adds	r3, #2
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bd6:	4b38      	ldr	r3, [pc, #224]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bfa:	4a2f      	ldr	r2, [pc, #188]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c00:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c24:	4a24      	ldr	r2, [pc, #144]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c2a:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c4e:	4a1a      	ldr	r2, [pc, #104]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c78:	4a0f      	ldr	r2, [pc, #60]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3301      	adds	r3, #1
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	2b0f      	cmp	r3, #15
 8001c88:	f67f aea2 	bls.w	80019d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3724      	adds	r7, #36	; 0x24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40013800 	.word	0x40013800
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	40020800 	.word	0x40020800
 8001cb0:	40020c00 	.word	0x40020c00
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40013c00 	.word	0x40013c00

08001cbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	887b      	ldrh	r3, [r7, #2]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
 8001cd8:	e001      	b.n	8001cde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	807b      	strh	r3, [r7, #2]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cfc:	787b      	ldrb	r3, [r7, #1]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d02:	887a      	ldrh	r2, [r7, #2]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d08:	e003      	b.n	8001d12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d0a:	887b      	ldrh	r3, [r7, #2]
 8001d0c:	041a      	lsls	r2, r3, #16
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	619a      	str	r2, [r3, #24]
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d2a:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d2c:	695a      	ldr	r2, [r3, #20]
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	4013      	ands	r3, r2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d006      	beq.n	8001d44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d36:	4a05      	ldr	r2, [pc, #20]	; (8001d4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 f806 	bl	8001d50 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40013c00 	.word	0x40013c00

08001d50 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d68:	b08f      	sub	sp, #60	; 0x3c
 8001d6a:	af0a      	add	r7, sp, #40	; 0x28
 8001d6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e10f      	b.n	8001f98 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d106      	bne.n	8001d98 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f008 fc32 	bl	800a5fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d102      	bne.n	8001db2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f002 fd27 	bl	800480a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	603b      	str	r3, [r7, #0]
 8001dc2:	687e      	ldr	r6, [r7, #4]
 8001dc4:	466d      	mov	r5, sp
 8001dc6:	f106 0410 	add.w	r4, r6, #16
 8001dca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dd2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dd6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dda:	1d33      	adds	r3, r6, #4
 8001ddc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dde:	6838      	ldr	r0, [r7, #0]
 8001de0:	f002 fbfe 	bl	80045e0 <USB_CoreInit>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d005      	beq.n	8001df6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2202      	movs	r2, #2
 8001dee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e0d0      	b.n	8001f98 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f002 fd15 	bl	800482c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e02:	2300      	movs	r3, #0
 8001e04:	73fb      	strb	r3, [r7, #15]
 8001e06:	e04a      	b.n	8001e9e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e08:	7bfa      	ldrb	r2, [r7, #15]
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	1a9b      	subs	r3, r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	333d      	adds	r3, #61	; 0x3d
 8001e18:	2201      	movs	r2, #1
 8001e1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e1c:	7bfa      	ldrb	r2, [r7, #15]
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	1a9b      	subs	r3, r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	333c      	adds	r3, #60	; 0x3c
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e30:	7bfa      	ldrb	r2, [r7, #15]
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	b298      	uxth	r0, r3
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	1a9b      	subs	r3, r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	3342      	adds	r3, #66	; 0x42
 8001e44:	4602      	mov	r2, r0
 8001e46:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e48:	7bfa      	ldrb	r2, [r7, #15]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	333f      	adds	r3, #63	; 0x3f
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e5c:	7bfa      	ldrb	r2, [r7, #15]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	1a9b      	subs	r3, r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	3344      	adds	r3, #68	; 0x44
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e70:	7bfa      	ldrb	r2, [r7, #15]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	3348      	adds	r3, #72	; 0x48
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e84:	7bfa      	ldrb	r2, [r7, #15]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	1a9b      	subs	r3, r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	3350      	adds	r3, #80	; 0x50
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	73fb      	strb	r3, [r7, #15]
 8001e9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d3af      	bcc.n	8001e08 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	73fb      	strb	r3, [r7, #15]
 8001eac:	e044      	b.n	8001f38 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001eae:	7bfa      	ldrb	r2, [r7, #15]
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	1a9b      	subs	r3, r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	440b      	add	r3, r1
 8001ebc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ec4:	7bfa      	ldrb	r2, [r7, #15]
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001ed6:	7bfa      	ldrb	r2, [r7, #15]
 8001ed8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001eda:	7bfa      	ldrb	r2, [r7, #15]
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	1a9b      	subs	r3, r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ef0:	7bfa      	ldrb	r2, [r7, #15]
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	1a9b      	subs	r3, r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f06:	7bfa      	ldrb	r2, [r7, #15]
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	1a9b      	subs	r3, r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f1c:	7bfa      	ldrb	r2, [r7, #15]
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	1a9b      	subs	r3, r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	3301      	adds	r3, #1
 8001f36:	73fb      	strb	r3, [r7, #15]
 8001f38:	7bfa      	ldrb	r2, [r7, #15]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d3b5      	bcc.n	8001eae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	687e      	ldr	r6, [r7, #4]
 8001f4a:	466d      	mov	r5, sp
 8001f4c:	f106 0410 	add.w	r4, r6, #16
 8001f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f60:	1d33      	adds	r3, r6, #4
 8001f62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f64:	6838      	ldr	r0, [r7, #0]
 8001f66:	f002 fc8b 	bl	8004880 <USB_DevInit>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2202      	movs	r2, #2
 8001f74:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e00d      	b.n	8001f98 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f003 fcd3 	bl	800593c <USB_DevDisconnect>

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fa0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_PCD_Start+0x1c>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e020      	b.n	8001ffe <HAL_PCD_Start+0x5e>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d109      	bne.n	8001fe0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d005      	beq.n	8001fe0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f002 fbff 	bl	80047e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f003 fc83 	bl	80058fa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002006:	b590      	push	{r4, r7, lr}
 8002008:	b08d      	sub	sp, #52	; 0x34
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f003 fd41 	bl	8005aa4 <USB_GetMode>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	f040 839d 	bne.w	8002764 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f003 fca5 	bl	800597e <USB_ReadInterrupts>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 8393 	beq.w	8002762 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f003 fc9c 	bl	800597e <USB_ReadInterrupts>
 8002046:	4603      	mov	r3, r0
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b02      	cmp	r3, #2
 800204e:	d107      	bne.n	8002060 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695a      	ldr	r2, [r3, #20]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f002 0202 	and.w	r2, r2, #2
 800205e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f003 fc8a 	bl	800597e <USB_ReadInterrupts>
 800206a:	4603      	mov	r3, r0
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	2b10      	cmp	r3, #16
 8002072:	d161      	bne.n	8002138 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699a      	ldr	r2, [r3, #24]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0210 	bic.w	r2, r2, #16
 8002082:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002084:	6a3b      	ldr	r3, [r7, #32]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	f003 020f 	and.w	r2, r3, #15
 8002090:	4613      	mov	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	1a9b      	subs	r3, r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	4413      	add	r3, r2
 80020a0:	3304      	adds	r3, #4
 80020a2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	0c5b      	lsrs	r3, r3, #17
 80020a8:	f003 030f 	and.w	r3, r3, #15
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d124      	bne.n	80020fa <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d035      	beq.n	8002128 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	091b      	lsrs	r3, r3, #4
 80020c4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80020c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	461a      	mov	r2, r3
 80020ce:	6a38      	ldr	r0, [r7, #32]
 80020d0:	f003 faf0 	bl	80056b4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	091b      	lsrs	r3, r3, #4
 80020dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020e0:	441a      	add	r2, r3
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	699a      	ldr	r2, [r3, #24]
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020f2:	441a      	add	r2, r3
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	619a      	str	r2, [r3, #24]
 80020f8:	e016      	b.n	8002128 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	0c5b      	lsrs	r3, r3, #17
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	2b06      	cmp	r3, #6
 8002104:	d110      	bne.n	8002128 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800210c:	2208      	movs	r2, #8
 800210e:	4619      	mov	r1, r3
 8002110:	6a38      	ldr	r0, [r7, #32]
 8002112:	f003 facf 	bl	80056b4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	699a      	ldr	r2, [r3, #24]
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002122:	441a      	add	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	699a      	ldr	r2, [r3, #24]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0210 	orr.w	r2, r2, #16
 8002136:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f003 fc1e 	bl	800597e <USB_ReadInterrupts>
 8002142:	4603      	mov	r3, r0
 8002144:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002148:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800214c:	d16e      	bne.n	800222c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f003 fc24 	bl	80059a4 <USB_ReadDevAllOutEpInterrupt>
 800215c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800215e:	e062      	b.n	8002226 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d057      	beq.n	800221a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f003 fc49 	bl	8005a0c <USB_ReadDevOutEPInterrupt>
 800217a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00c      	beq.n	80021a0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	4413      	add	r3, r2
 800218e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002192:	461a      	mov	r2, r3
 8002194:	2301      	movs	r3, #1
 8002196:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002198:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 fdb0 	bl	8002d00 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00c      	beq.n	80021c4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b6:	461a      	mov	r2, r3
 80021b8:	2308      	movs	r3, #8
 80021ba:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80021bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 feaa 	bl	8002f18 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d008      	beq.n	80021e0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021da:	461a      	mov	r2, r3
 80021dc:	2310      	movs	r3, #16
 80021de:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	f003 0320 	and.w	r3, r3, #32
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	015a      	lsls	r2, r3, #5
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021f6:	461a      	mov	r2, r3
 80021f8:	2320      	movs	r3, #32
 80021fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d009      	beq.n	800221a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	4413      	add	r3, r2
 800220e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002212:	461a      	mov	r2, r3
 8002214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002218:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	3301      	adds	r3, #1
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002222:	085b      	lsrs	r3, r3, #1
 8002224:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002228:	2b00      	cmp	r3, #0
 800222a:	d199      	bne.n	8002160 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f003 fba4 	bl	800597e <USB_ReadInterrupts>
 8002236:	4603      	mov	r3, r0
 8002238:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800223c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002240:	f040 80c0 	bne.w	80023c4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f003 fbc5 	bl	80059d8 <USB_ReadDevAllInEpInterrupt>
 800224e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002254:	e0b2      	b.n	80023bc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 80a7 	beq.w	80023b0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f003 fbeb 	bl	8005a48 <USB_ReadDevInEPInterrupt>
 8002272:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d057      	beq.n	800232e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	f003 030f 	and.w	r3, r3, #15
 8002284:	2201      	movs	r2, #1
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	43db      	mvns	r3, r3
 8002298:	69f9      	ldr	r1, [r7, #28]
 800229a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800229e:	4013      	ands	r3, r2
 80022a0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	015a      	lsls	r2, r3, #5
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ae:	461a      	mov	r2, r3
 80022b0:	2301      	movs	r3, #1
 80022b2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d132      	bne.n	8002322 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	3348      	adds	r3, #72	; 0x48
 80022cc:	6819      	ldr	r1, [r3, #0]
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d2:	4613      	mov	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	1a9b      	subs	r3, r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4403      	add	r3, r0
 80022dc:	3344      	adds	r3, #68	; 0x44
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4419      	add	r1, r3
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e6:	4613      	mov	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	1a9b      	subs	r3, r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4403      	add	r3, r0
 80022f0:	3348      	adds	r3, #72	; 0x48
 80022f2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d113      	bne.n	8002322 <HAL_PCD_IRQHandler+0x31c>
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022fe:	4613      	mov	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	3350      	adds	r3, #80	; 0x50
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d108      	bne.n	8002322 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800231a:	461a      	mov	r2, r3
 800231c:	2101      	movs	r1, #1
 800231e:	f003 fbf3 	bl	8005b08 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	b2db      	uxtb	r3, r3
 8002326:	4619      	mov	r1, r3
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f008 f9f6 	bl	800a71a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	4413      	add	r3, r2
 8002340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002344:	461a      	mov	r2, r3
 8002346:	2308      	movs	r3, #8
 8002348:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b00      	cmp	r3, #0
 8002352:	d008      	beq.n	8002366 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	015a      	lsls	r2, r3, #5
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	4413      	add	r3, r2
 800235c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002360:	461a      	mov	r2, r3
 8002362:	2310      	movs	r3, #16
 8002364:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236c:	2b00      	cmp	r3, #0
 800236e:	d008      	beq.n	8002382 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	015a      	lsls	r2, r3, #5
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	4413      	add	r3, r2
 8002378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800237c:	461a      	mov	r2, r3
 800237e:	2340      	movs	r3, #64	; 0x40
 8002380:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	015a      	lsls	r2, r3, #5
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	4413      	add	r3, r2
 8002394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002398:	461a      	mov	r2, r3
 800239a:	2302      	movs	r3, #2
 800239c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80023a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 fc1b 	bl	8002be6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	3301      	adds	r3, #1
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b8:	085b      	lsrs	r3, r3, #1
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f47f af49 	bne.w	8002256 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f003 fad8 	bl	800597e <USB_ReadInterrupts>
 80023ce:	4603      	mov	r3, r0
 80023d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023d8:	d122      	bne.n	8002420 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023e8:	f023 0301 	bic.w	r3, r3, #1
 80023ec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d108      	bne.n	800240a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002400:	2100      	movs	r1, #0
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 fe26 	bl	8003054 <HAL_PCDEx_LPM_Callback>
 8002408:	e002      	b.n	8002410 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f008 f9f2 	bl	800a7f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800241e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f003 faaa 	bl	800597e <USB_ReadInterrupts>
 800242a:	4603      	mov	r3, r0
 800242c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002430:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002434:	d112      	bne.n	800245c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b01      	cmp	r3, #1
 8002444:	d102      	bne.n	800244c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f008 f9ae 	bl	800a7a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695a      	ldr	r2, [r3, #20]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800245a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f003 fa8c 	bl	800597e <USB_ReadInterrupts>
 8002466:	4603      	mov	r3, r0
 8002468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800246c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002470:	f040 80c7 	bne.w	8002602 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	69fa      	ldr	r2, [r7, #28]
 800247e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002482:	f023 0301 	bic.w	r3, r3, #1
 8002486:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2110      	movs	r1, #16
 800248e:	4618      	mov	r0, r3
 8002490:	f002 fb5a 	bl	8004b48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002494:	2300      	movs	r3, #0
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002498:	e056      	b.n	8002548 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800249a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024a6:	461a      	mov	r2, r3
 80024a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024ac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80024ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b0:	015a      	lsls	r2, r3, #5
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024be:	0151      	lsls	r1, r2, #5
 80024c0:	69fa      	ldr	r2, [r7, #28]
 80024c2:	440a      	add	r2, r1
 80024c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024cc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80024ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024de:	0151      	lsls	r1, r2, #5
 80024e0:	69fa      	ldr	r2, [r7, #28]
 80024e2:	440a      	add	r2, r1
 80024e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f0:	015a      	lsls	r2, r3, #5
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024fa:	461a      	mov	r2, r3
 80024fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002500:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002504:	015a      	lsls	r2, r3, #5
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	4413      	add	r3, r2
 800250a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002512:	0151      	lsls	r1, r2, #5
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	440a      	add	r2, r1
 8002518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800251c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002520:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	4413      	add	r3, r2
 800252a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002532:	0151      	lsls	r1, r2, #5
 8002534:	69fa      	ldr	r2, [r7, #28]
 8002536:	440a      	add	r2, r1
 8002538:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800253c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002540:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002544:	3301      	adds	r3, #1
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800254e:	429a      	cmp	r2, r3
 8002550:	d3a3      	bcc.n	800249a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	69fa      	ldr	r2, [r7, #28]
 800255c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002560:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002564:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	2b00      	cmp	r3, #0
 800256c:	d016      	beq.n	800259c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002574:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002578:	69fa      	ldr	r2, [r7, #28]
 800257a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800257e:	f043 030b 	orr.w	r3, r3, #11
 8002582:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	69fa      	ldr	r2, [r7, #28]
 8002590:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002594:	f043 030b 	orr.w	r3, r3, #11
 8002598:	6453      	str	r3, [r2, #68]	; 0x44
 800259a:	e015      	b.n	80025c8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	69fa      	ldr	r2, [r7, #28]
 80025a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025ae:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80025b2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	69fa      	ldr	r2, [r7, #28]
 80025be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025c2:	f043 030b 	orr.w	r3, r3, #11
 80025c6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	69fa      	ldr	r2, [r7, #28]
 80025d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025d6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80025da:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025ec:	461a      	mov	r2, r3
 80025ee:	f003 fa8b 	bl	8005b08 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695a      	ldr	r2, [r3, #20]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002600:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f003 f9b9 	bl	800597e <USB_ReadInterrupts>
 800260c:	4603      	mov	r3, r0
 800260e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002616:	d124      	bne.n	8002662 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f003 fa4f 	bl	8005ac0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f002 faef 	bl	8004c0a <USB_GetDevSpeed>
 800262c:	4603      	mov	r3, r0
 800262e:	461a      	mov	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681c      	ldr	r4, [r3, #0]
 8002638:	f001 f958 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 800263c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002642:	b2db      	uxtb	r3, r3
 8002644:	461a      	mov	r2, r3
 8002646:	4620      	mov	r0, r4
 8002648:	f002 f82c 	bl	80046a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f008 f88c 	bl	800a76a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	695a      	ldr	r2, [r3, #20]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002660:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f003 f989 	bl	800597e <USB_ReadInterrupts>
 800266c:	4603      	mov	r3, r0
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b08      	cmp	r3, #8
 8002674:	d10a      	bne.n	800268c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f008 f869 	bl	800a74e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	695a      	ldr	r2, [r3, #20]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f002 0208 	and.w	r2, r2, #8
 800268a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f003 f974 	bl	800597e <USB_ReadInterrupts>
 8002696:	4603      	mov	r3, r0
 8002698:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800269c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a0:	d10f      	bne.n	80026c2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	4619      	mov	r1, r3
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f008 f8c1 	bl	800a834 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80026c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f003 f959 	bl	800597e <USB_ReadInterrupts>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026d6:	d10f      	bne.n	80026f8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	4619      	mov	r1, r3
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f008 f894 	bl	800a810 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695a      	ldr	r2, [r3, #20]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80026f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f003 f93e 	bl	800597e <USB_ReadInterrupts>
 8002702:	4603      	mov	r3, r0
 8002704:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800270c:	d10a      	bne.n	8002724 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f008 f8a2 	bl	800a858 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002722:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f003 f928 	bl	800597e <USB_ReadInterrupts>
 800272e:	4603      	mov	r3, r0
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b04      	cmp	r3, #4
 8002736:	d115      	bne.n	8002764 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f008 f892 	bl	800a874 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6859      	ldr	r1, [r3, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	430a      	orrs	r2, r1
 800275e:	605a      	str	r2, [r3, #4]
 8002760:	e000      	b.n	8002764 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002762:	bf00      	nop
    }
  }
}
 8002764:	3734      	adds	r7, #52	; 0x34
 8002766:	46bd      	mov	sp, r7
 8002768:	bd90      	pop	{r4, r7, pc}

0800276a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
 8002772:	460b      	mov	r3, r1
 8002774:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_PCD_SetAddress+0x1a>
 8002780:	2302      	movs	r3, #2
 8002782:	e013      	b.n	80027ac <HAL_PCD_SetAddress+0x42>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	78fa      	ldrb	r2, [r7, #3]
 8002790:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f003 f886 	bl	80058ae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	4608      	mov	r0, r1
 80027be:	4611      	mov	r1, r2
 80027c0:	461a      	mov	r2, r3
 80027c2:	4603      	mov	r3, r0
 80027c4:	70fb      	strb	r3, [r7, #3]
 80027c6:	460b      	mov	r3, r1
 80027c8:	803b      	strh	r3, [r7, #0]
 80027ca:	4613      	mov	r3, r2
 80027cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	da0f      	bge.n	80027fa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027da:	78fb      	ldrb	r3, [r7, #3]
 80027dc:	f003 020f 	and.w	r2, r3, #15
 80027e0:	4613      	mov	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	3338      	adds	r3, #56	; 0x38
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	4413      	add	r3, r2
 80027ee:	3304      	adds	r3, #4
 80027f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	705a      	strb	r2, [r3, #1]
 80027f8:	e00f      	b.n	800281a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	f003 020f 	and.w	r2, r3, #15
 8002800:	4613      	mov	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	4413      	add	r3, r2
 8002810:	3304      	adds	r3, #4
 8002812:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800281a:	78fb      	ldrb	r3, [r7, #3]
 800281c:	f003 030f 	and.w	r3, r3, #15
 8002820:	b2da      	uxtb	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002826:	883a      	ldrh	r2, [r7, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	78ba      	ldrb	r2, [r7, #2]
 8002830:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	785b      	ldrb	r3, [r3, #1]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d004      	beq.n	8002844 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002844:	78bb      	ldrb	r3, [r7, #2]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d102      	bne.n	8002850 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_PCD_EP_Open+0xaa>
 800285a:	2302      	movs	r3, #2
 800285c:	e00e      	b.n	800287c <HAL_PCD_EP_Open+0xc8>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68f9      	ldr	r1, [r7, #12]
 800286c:	4618      	mov	r0, r3
 800286e:	f002 f9f1 	bl	8004c54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800287a:	7afb      	ldrb	r3, [r7, #11]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002890:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002894:	2b00      	cmp	r3, #0
 8002896:	da0f      	bge.n	80028b8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002898:	78fb      	ldrb	r3, [r7, #3]
 800289a:	f003 020f 	and.w	r2, r3, #15
 800289e:	4613      	mov	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	1a9b      	subs	r3, r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	3338      	adds	r3, #56	; 0x38
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	4413      	add	r3, r2
 80028ac:	3304      	adds	r3, #4
 80028ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2201      	movs	r2, #1
 80028b4:	705a      	strb	r2, [r3, #1]
 80028b6:	e00f      	b.n	80028d8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028b8:	78fb      	ldrb	r3, [r7, #3]
 80028ba:	f003 020f 	and.w	r2, r3, #15
 80028be:	4613      	mov	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	1a9b      	subs	r3, r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	3304      	adds	r3, #4
 80028d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_PCD_EP_Close+0x6e>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e00e      	b.n	8002910 <HAL_PCD_EP_Close+0x8c>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68f9      	ldr	r1, [r7, #12]
 8002900:	4618      	mov	r0, r3
 8002902:	f002 fa2f 	bl	8004d64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	607a      	str	r2, [r7, #4]
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	460b      	mov	r3, r1
 8002926:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002928:	7afb      	ldrb	r3, [r7, #11]
 800292a:	f003 020f 	and.w	r2, r3, #15
 800292e:	4613      	mov	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4413      	add	r3, r2
 800293e:	3304      	adds	r3, #4
 8002940:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2200      	movs	r2, #0
 8002952:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	2200      	movs	r2, #0
 8002958:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800295a:	7afb      	ldrb	r3, [r7, #11]
 800295c:	f003 030f 	and.w	r3, r3, #15
 8002960:	b2da      	uxtb	r2, r3
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d102      	bne.n	8002974 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002974:	7afb      	ldrb	r3, [r7, #11]
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	2b00      	cmp	r3, #0
 800297c:	d109      	bne.n	8002992 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	b2db      	uxtb	r3, r3
 8002988:	461a      	mov	r2, r3
 800298a:	6979      	ldr	r1, [r7, #20]
 800298c:	f002 fd0a 	bl	80053a4 <USB_EP0StartXfer>
 8002990:	e008      	b.n	80029a4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	b2db      	uxtb	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	6979      	ldr	r1, [r7, #20]
 80029a0:	f002 fabc 	bl	8004f1c <USB_EPStartXfer>
  }

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	460b      	mov	r3, r1
 80029b8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80029ba:	78fb      	ldrb	r3, [r7, #3]
 80029bc:	f003 020f 	and.w	r2, r3, #15
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80029d0:	681b      	ldr	r3, [r3, #0]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b086      	sub	sp, #24
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	607a      	str	r2, [r7, #4]
 80029e8:	603b      	str	r3, [r7, #0]
 80029ea:	460b      	mov	r3, r1
 80029ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ee:	7afb      	ldrb	r3, [r7, #11]
 80029f0:	f003 020f 	and.w	r2, r3, #15
 80029f4:	4613      	mov	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	3338      	adds	r3, #56	; 0x38
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	4413      	add	r3, r2
 8002a02:	3304      	adds	r3, #4
 8002a04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2200      	movs	r2, #0
 8002a16:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a1e:	7afb      	ldrb	r3, [r7, #11]
 8002a20:	f003 030f 	and.w	r3, r3, #15
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d102      	bne.n	8002a38 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a38:	7afb      	ldrb	r3, [r7, #11]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d109      	bne.n	8002a56 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6818      	ldr	r0, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	6979      	ldr	r1, [r7, #20]
 8002a50:	f002 fca8 	bl	80053a4 <USB_EP0StartXfer>
 8002a54:	e008      	b.n	8002a68 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6818      	ldr	r0, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	6979      	ldr	r1, [r7, #20]
 8002a64:	f002 fa5a 	bl	8004f1c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b084      	sub	sp, #16
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	f003 020f 	and.w	r2, r3, #15
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d901      	bls.n	8002a90 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e050      	b.n	8002b32 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	da0f      	bge.n	8002ab8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	f003 020f 	and.w	r2, r3, #15
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	1a9b      	subs	r3, r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	3338      	adds	r3, #56	; 0x38
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	4413      	add	r3, r2
 8002aac:	3304      	adds	r3, #4
 8002aae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	705a      	strb	r2, [r3, #1]
 8002ab6:	e00d      	b.n	8002ad4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ab8:	78fa      	ldrb	r2, [r7, #3]
 8002aba:	4613      	mov	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	1a9b      	subs	r3, r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	4413      	add	r3, r2
 8002aca:	3304      	adds	r3, #4
 8002acc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ada:	78fb      	ldrb	r3, [r7, #3]
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_PCD_EP_SetStall+0x82>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e01e      	b.n	8002b32 <HAL_PCD_EP_SetStall+0xc0>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68f9      	ldr	r1, [r7, #12]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f002 fdff 	bl	8005706 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10a      	bne.n	8002b28 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	b2d9      	uxtb	r1, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b22:	461a      	mov	r2, r3
 8002b24:	f002 fff0 	bl	8005b08 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b084      	sub	sp, #16
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	460b      	mov	r3, r1
 8002b44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b46:	78fb      	ldrb	r3, [r7, #3]
 8002b48:	f003 020f 	and.w	r2, r3, #15
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d901      	bls.n	8002b58 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e042      	b.n	8002bde <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	da0f      	bge.n	8002b80 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b60:	78fb      	ldrb	r3, [r7, #3]
 8002b62:	f003 020f 	and.w	r2, r3, #15
 8002b66:	4613      	mov	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	1a9b      	subs	r3, r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	3338      	adds	r3, #56	; 0x38
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	4413      	add	r3, r2
 8002b74:	3304      	adds	r3, #4
 8002b76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	705a      	strb	r2, [r3, #1]
 8002b7e:	e00f      	b.n	8002ba0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	f003 020f 	and.w	r2, r3, #15
 8002b86:	4613      	mov	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	1a9b      	subs	r3, r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	4413      	add	r3, r2
 8002b96:	3304      	adds	r3, #4
 8002b98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ba6:	78fb      	ldrb	r3, [r7, #3]
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_PCD_EP_ClrStall+0x86>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e00e      	b.n	8002bde <HAL_PCD_EP_ClrStall+0xa4>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68f9      	ldr	r1, [r7, #12]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f002 fe07 	bl	80057e2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b08a      	sub	sp, #40	; 0x28
 8002bea:	af02      	add	r7, sp, #8
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	3338      	adds	r3, #56	; 0x38
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	4413      	add	r3, r2
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	699a      	ldr	r2, [r3, #24]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d901      	bls.n	8002c1e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e06c      	b.n	8002cf8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d902      	bls.n	8002c3a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3303      	adds	r3, #3
 8002c3e:	089b      	lsrs	r3, r3, #2
 8002c40:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c42:	e02b      	b.n	8002c9c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	69fa      	ldr	r2, [r7, #28]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d902      	bls.n	8002c60 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	3303      	adds	r3, #3
 8002c64:	089b      	lsrs	r3, r3, #2
 8002c66:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	68d9      	ldr	r1, [r3, #12]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	6978      	ldr	r0, [r7, #20]
 8002c80:	f002 fce3 	bl	800564a <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	441a      	add	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	699a      	ldr	r2, [r3, #24]
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	441a      	add	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d809      	bhi.n	8002cc6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	699a      	ldr	r2, [r3, #24]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d203      	bcs.n	8002cc6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1be      	bne.n	8002c44 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	695a      	ldr	r2, [r3, #20]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d811      	bhi.n	8002cf6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	f003 030f 	and.w	r3, r3, #15
 8002cd8:	2201      	movs	r2, #1
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	43db      	mvns	r3, r3
 8002cec:	6939      	ldr	r1, [r7, #16]
 8002cee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3720      	adds	r7, #32
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	333c      	adds	r3, #60	; 0x3c
 8002d18:	3304      	adds	r3, #4
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	f040 80a0 	bne.w	8002e78 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d015      	beq.n	8002d6e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4a72      	ldr	r2, [pc, #456]	; (8002f10 <PCD_EP_OutXfrComplete_int+0x210>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	f240 80dd 	bls.w	8002f06 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 80d7 	beq.w	8002f06 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	015a      	lsls	r2, r3, #5
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d64:	461a      	mov	r2, r3
 8002d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d6a:	6093      	str	r3, [r2, #8]
 8002d6c:	e0cb      	b.n	8002f06 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d009      	beq.n	8002d8c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	015a      	lsls	r2, r3, #5
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d84:	461a      	mov	r2, r3
 8002d86:	2320      	movs	r3, #32
 8002d88:	6093      	str	r3, [r2, #8]
 8002d8a:	e0bc      	b.n	8002f06 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f040 80b7 	bne.w	8002f06 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4a5d      	ldr	r2, [pc, #372]	; (8002f10 <PCD_EP_OutXfrComplete_int+0x210>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d90f      	bls.n	8002dc0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002db6:	461a      	mov	r2, r3
 8002db8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dbc:	6093      	str	r3, [r2, #8]
 8002dbe:	e0a2      	b.n	8002f06 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	1a9b      	subs	r3, r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002dd2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	0159      	lsls	r1, r3, #5
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	440b      	add	r3, r1
 8002ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002de6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	4613      	mov	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	1a9b      	subs	r3, r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4403      	add	r3, r0
 8002df6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002dfa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	4613      	mov	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e0e:	6819      	ldr	r1, [r3, #0]
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	4613      	mov	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	1a9b      	subs	r3, r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4403      	add	r3, r0
 8002e1e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4419      	add	r1, r3
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4403      	add	r3, r0
 8002e34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e38:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d114      	bne.n	8002e6a <PCD_EP_OutXfrComplete_int+0x16a>
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	4613      	mov	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	1a9b      	subs	r3, r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d108      	bne.n	8002e6a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6818      	ldr	r0, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e62:	461a      	mov	r2, r3
 8002e64:	2101      	movs	r1, #1
 8002e66:	f002 fe4f 	bl	8005b08 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	4619      	mov	r1, r3
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f007 fc37 	bl	800a6e4 <HAL_PCD_DataOutStageCallback>
 8002e76:	e046      	b.n	8002f06 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4a26      	ldr	r2, [pc, #152]	; (8002f14 <PCD_EP_OutXfrComplete_int+0x214>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d124      	bne.n	8002eca <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e96:	461a      	mov	r2, r3
 8002e98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e9c:	6093      	str	r3, [r2, #8]
 8002e9e:	e032      	b.n	8002f06 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f003 0320 	and.w	r3, r3, #32
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d008      	beq.n	8002ebc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	2320      	movs	r3, #32
 8002eba:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f007 fc0e 	bl	800a6e4 <HAL_PCD_DataOutStageCallback>
 8002ec8:	e01d      	b.n	8002f06 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d114      	bne.n	8002efa <PCD_EP_OutXfrComplete_int+0x1fa>
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d108      	bne.n	8002efa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6818      	ldr	r0, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	f002 fe07 	bl	8005b08 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	4619      	mov	r1, r3
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f007 fbef 	bl	800a6e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	4f54300a 	.word	0x4f54300a
 8002f14:	4f54310a 	.word	0x4f54310a

08002f18 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	333c      	adds	r3, #60	; 0x3c
 8002f30:	3304      	adds	r3, #4
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4a15      	ldr	r2, [pc, #84]	; (8002fa0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d90e      	bls.n	8002f6c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d009      	beq.n	8002f6c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f64:	461a      	mov	r2, r3
 8002f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f6a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f007 fba7 	bl	800a6c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d90c      	bls.n	8002f94 <PCD_EP_OutSetupPacket_int+0x7c>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d108      	bne.n	8002f94 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	2101      	movs	r1, #1
 8002f90:	f002 fdba 	bl	8005b08 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	4f54300a 	.word	0x4f54300a

08002fa4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	70fb      	strb	r3, [r7, #3]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d107      	bne.n	8002fd2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002fc2:	883b      	ldrh	r3, [r7, #0]
 8002fc4:	0419      	lsls	r1, r3, #16
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	629a      	str	r2, [r3, #40]	; 0x28
 8002fd0:	e028      	b.n	8003024 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd8:	0c1b      	lsrs	r3, r3, #16
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	4413      	add	r3, r2
 8002fde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	73fb      	strb	r3, [r7, #15]
 8002fe4:	e00d      	b.n	8003002 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
 8002fec:	3340      	adds	r3, #64	; 0x40
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	0c1b      	lsrs	r3, r3, #16
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
 8002ffe:	3301      	adds	r3, #1
 8003000:	73fb      	strb	r3, [r7, #15]
 8003002:	7bfa      	ldrb	r2, [r7, #15]
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	3b01      	subs	r3, #1
 8003008:	429a      	cmp	r2, r3
 800300a:	d3ec      	bcc.n	8002fe6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800300c:	883b      	ldrh	r3, [r7, #0]
 800300e:	0418      	lsls	r0, r3, #16
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6819      	ldr	r1, [r3, #0]
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	3b01      	subs	r3, #1
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	4302      	orrs	r2, r0
 800301c:	3340      	adds	r3, #64	; 0x40
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	460b      	mov	r3, r1
 800303c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	887a      	ldrh	r2, [r7, #2]
 8003044:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e264      	b.n	8003548 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d075      	beq.n	8003176 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800308a:	4ba3      	ldr	r3, [pc, #652]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	2b04      	cmp	r3, #4
 8003094:	d00c      	beq.n	80030b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003096:	4ba0      	ldr	r3, [pc, #640]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d112      	bne.n	80030c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030a2:	4b9d      	ldr	r3, [pc, #628]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030ae:	d10b      	bne.n	80030c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b0:	4b99      	ldr	r3, [pc, #612]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d05b      	beq.n	8003174 <HAL_RCC_OscConfig+0x108>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d157      	bne.n	8003174 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e23f      	b.n	8003548 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d0:	d106      	bne.n	80030e0 <HAL_RCC_OscConfig+0x74>
 80030d2:	4b91      	ldr	r3, [pc, #580]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a90      	ldr	r2, [pc, #576]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80030d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e01d      	b.n	800311c <HAL_RCC_OscConfig+0xb0>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e8:	d10c      	bne.n	8003104 <HAL_RCC_OscConfig+0x98>
 80030ea:	4b8b      	ldr	r3, [pc, #556]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a8a      	ldr	r2, [pc, #552]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80030f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	4b88      	ldr	r3, [pc, #544]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a87      	ldr	r2, [pc, #540]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80030fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	e00b      	b.n	800311c <HAL_RCC_OscConfig+0xb0>
 8003104:	4b84      	ldr	r3, [pc, #528]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a83      	ldr	r2, [pc, #524]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 800310a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	4b81      	ldr	r3, [pc, #516]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a80      	ldr	r2, [pc, #512]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 8003116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800311a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d013      	beq.n	800314c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003124:	f7fe fb34 	bl	8001790 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800312c:	f7fe fb30 	bl	8001790 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b64      	cmp	r3, #100	; 0x64
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e204      	b.n	8003548 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	4b76      	ldr	r3, [pc, #472]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0xc0>
 800314a:	e014      	b.n	8003176 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7fe fb20 	bl	8001790 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003154:	f7fe fb1c 	bl	8001790 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b64      	cmp	r3, #100	; 0x64
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e1f0      	b.n	8003548 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003166:	4b6c      	ldr	r3, [pc, #432]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0xe8>
 8003172:	e000      	b.n	8003176 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d063      	beq.n	800324a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003182:	4b65      	ldr	r3, [pc, #404]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00b      	beq.n	80031a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800318e:	4b62      	ldr	r3, [pc, #392]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003196:	2b08      	cmp	r3, #8
 8003198:	d11c      	bne.n	80031d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800319a:	4b5f      	ldr	r3, [pc, #380]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d116      	bne.n	80031d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a6:	4b5c      	ldr	r3, [pc, #368]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d005      	beq.n	80031be <HAL_RCC_OscConfig+0x152>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d001      	beq.n	80031be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e1c4      	b.n	8003548 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031be:	4b56      	ldr	r3, [pc, #344]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	4952      	ldr	r1, [pc, #328]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d2:	e03a      	b.n	800324a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d020      	beq.n	800321e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031dc:	4b4f      	ldr	r3, [pc, #316]	; (800331c <HAL_RCC_OscConfig+0x2b0>)
 80031de:	2201      	movs	r2, #1
 80031e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e2:	f7fe fad5 	bl	8001790 <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031ea:	f7fe fad1 	bl	8001790 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e1a5      	b.n	8003548 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fc:	4b46      	ldr	r3, [pc, #280]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0f0      	beq.n	80031ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003208:	4b43      	ldr	r3, [pc, #268]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4940      	ldr	r1, [pc, #256]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 8003218:	4313      	orrs	r3, r2
 800321a:	600b      	str	r3, [r1, #0]
 800321c:	e015      	b.n	800324a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800321e:	4b3f      	ldr	r3, [pc, #252]	; (800331c <HAL_RCC_OscConfig+0x2b0>)
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003224:	f7fe fab4 	bl	8001790 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800322c:	f7fe fab0 	bl	8001790 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e184      	b.n	8003548 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323e:	4b36      	ldr	r3, [pc, #216]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d030      	beq.n	80032b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d016      	beq.n	800328c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800325e:	4b30      	ldr	r3, [pc, #192]	; (8003320 <HAL_RCC_OscConfig+0x2b4>)
 8003260:	2201      	movs	r2, #1
 8003262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003264:	f7fe fa94 	bl	8001790 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800326c:	f7fe fa90 	bl	8001790 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e164      	b.n	8003548 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327e:	4b26      	ldr	r3, [pc, #152]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 8003280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0x200>
 800328a:	e015      	b.n	80032b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800328c:	4b24      	ldr	r3, [pc, #144]	; (8003320 <HAL_RCC_OscConfig+0x2b4>)
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003292:	f7fe fa7d 	bl	8001790 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800329a:	f7fe fa79 	bl	8001790 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e14d      	b.n	8003548 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ac:	4b1a      	ldr	r3, [pc, #104]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80032ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1f0      	bne.n	800329a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80a0 	beq.w	8003406 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032c6:	2300      	movs	r3, #0
 80032c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ca:	4b13      	ldr	r3, [pc, #76]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10f      	bne.n	80032f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	4a0e      	ldr	r2, [pc, #56]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80032e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e4:	6413      	str	r3, [r2, #64]	; 0x40
 80032e6:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ee:	60bb      	str	r3, [r7, #8]
 80032f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032f2:	2301      	movs	r3, #1
 80032f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f6:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HAL_RCC_OscConfig+0x2b8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d121      	bne.n	8003346 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003302:	4b08      	ldr	r3, [pc, #32]	; (8003324 <HAL_RCC_OscConfig+0x2b8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a07      	ldr	r2, [pc, #28]	; (8003324 <HAL_RCC_OscConfig+0x2b8>)
 8003308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800330c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800330e:	f7fe fa3f 	bl	8001790 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003314:	e011      	b.n	800333a <HAL_RCC_OscConfig+0x2ce>
 8003316:	bf00      	nop
 8003318:	40023800 	.word	0x40023800
 800331c:	42470000 	.word	0x42470000
 8003320:	42470e80 	.word	0x42470e80
 8003324:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003328:	f7fe fa32 	bl	8001790 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e106      	b.n	8003548 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333a:	4b85      	ldr	r3, [pc, #532]	; (8003550 <HAL_RCC_OscConfig+0x4e4>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f0      	beq.n	8003328 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d106      	bne.n	800335c <HAL_RCC_OscConfig+0x2f0>
 800334e:	4b81      	ldr	r3, [pc, #516]	; (8003554 <HAL_RCC_OscConfig+0x4e8>)
 8003350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003352:	4a80      	ldr	r2, [pc, #512]	; (8003554 <HAL_RCC_OscConfig+0x4e8>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	6713      	str	r3, [r2, #112]	; 0x70
 800335a:	e01c      	b.n	8003396 <HAL_RCC_OscConfig+0x32a>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b05      	cmp	r3, #5
 8003362:	d10c      	bne.n	800337e <HAL_RCC_OscConfig+0x312>
 8003364:	4b7b      	ldr	r3, [pc, #492]	; (8003554 <HAL_RCC_OscConfig+0x4e8>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	4a7a      	ldr	r2, [pc, #488]	; (8003554 <HAL_RCC_OscConfig+0x4e8>)
 800336a:	f043 0304 	orr.w	r3, r3, #4
 800336e:	6713      	str	r3, [r2, #112]	; 0x70
 8003370:	4b78      	ldr	r3, [pc, #480]	; (8003554 <HAL_RCC_OscConfig+0x4e8>)
 8003372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003374:	4a77      	ldr	r2, [pc, #476]	; (8003554 <HAL_RCC_OscConfig+0x4e8>)
 8003376:	f043 0301 	orr.w	r3, r3, #1
 800337a:	6713      	str	r3, [r2, #112]	; 0x70
 800337c:	e00b      	b.n	8003396 <HAL_RCC_OscConfig+0x32a>
 800337e:	4b75      	ldr	r3, [pc, #468]	; (8003554 <HAL_RCC_OscConfig+0x4e8>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	4a74      	ldr	r2, [pc, #464]	; (8003554 <HAL_RCC_OscConfig+0x4e8>)
 8003384:	f023 0301 	bic.w	r3, r3, #1
 8003388:	6713      	str	r3, [r2, #112]	; 0x70
 800338a:	4b72      	ldr	r3, [pc, #456]	; (8003554 <HAL_RCC_OscConfig+0x4e8>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338e:	4a71      	ldr	r2, [pc, #452]	; (8003554 <HAL_RCC_OscConfig+0x4e8>)
 8003390:	f023 0304 	bic.w	r3, r3, #4
 8003394:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d015      	beq.n	80033ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339e:	f7fe f9f7 	bl	8001790 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a4:	e00a      	b.n	80033bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a6:	f7fe f9f3 	bl	8001790 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e0c5      	b.n	8003548 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033bc:	4b65      	ldr	r3, [pc, #404]	; (8003554 <HAL_RCC_OscConfig+0x4e8>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0ee      	beq.n	80033a6 <HAL_RCC_OscConfig+0x33a>
 80033c8:	e014      	b.n	80033f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ca:	f7fe f9e1 	bl	8001790 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d0:	e00a      	b.n	80033e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d2:	f7fe f9dd 	bl	8001790 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e0af      	b.n	8003548 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e8:	4b5a      	ldr	r3, [pc, #360]	; (8003554 <HAL_RCC_OscConfig+0x4e8>)
 80033ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1ee      	bne.n	80033d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033f4:	7dfb      	ldrb	r3, [r7, #23]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d105      	bne.n	8003406 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033fa:	4b56      	ldr	r3, [pc, #344]	; (8003554 <HAL_RCC_OscConfig+0x4e8>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	4a55      	ldr	r2, [pc, #340]	; (8003554 <HAL_RCC_OscConfig+0x4e8>)
 8003400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003404:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 809b 	beq.w	8003546 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003410:	4b50      	ldr	r3, [pc, #320]	; (8003554 <HAL_RCC_OscConfig+0x4e8>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 030c 	and.w	r3, r3, #12
 8003418:	2b08      	cmp	r3, #8
 800341a:	d05c      	beq.n	80034d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	2b02      	cmp	r3, #2
 8003422:	d141      	bne.n	80034a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003424:	4b4c      	ldr	r3, [pc, #304]	; (8003558 <HAL_RCC_OscConfig+0x4ec>)
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342a:	f7fe f9b1 	bl	8001790 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003432:	f7fe f9ad 	bl	8001790 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e081      	b.n	8003548 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003444:	4b43      	ldr	r3, [pc, #268]	; (8003554 <HAL_RCC_OscConfig+0x4e8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1f0      	bne.n	8003432 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69da      	ldr	r2, [r3, #28]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	019b      	lsls	r3, r3, #6
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003466:	085b      	lsrs	r3, r3, #1
 8003468:	3b01      	subs	r3, #1
 800346a:	041b      	lsls	r3, r3, #16
 800346c:	431a      	orrs	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003472:	061b      	lsls	r3, r3, #24
 8003474:	4937      	ldr	r1, [pc, #220]	; (8003554 <HAL_RCC_OscConfig+0x4e8>)
 8003476:	4313      	orrs	r3, r2
 8003478:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800347a:	4b37      	ldr	r3, [pc, #220]	; (8003558 <HAL_RCC_OscConfig+0x4ec>)
 800347c:	2201      	movs	r2, #1
 800347e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003480:	f7fe f986 	bl	8001790 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003488:	f7fe f982 	bl	8001790 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e056      	b.n	8003548 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800349a:	4b2e      	ldr	r3, [pc, #184]	; (8003554 <HAL_RCC_OscConfig+0x4e8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCC_OscConfig+0x41c>
 80034a6:	e04e      	b.n	8003546 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a8:	4b2b      	ldr	r3, [pc, #172]	; (8003558 <HAL_RCC_OscConfig+0x4ec>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ae:	f7fe f96f 	bl	8001790 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b6:	f7fe f96b 	bl	8001790 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e03f      	b.n	8003548 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034c8:	4b22      	ldr	r3, [pc, #136]	; (8003554 <HAL_RCC_OscConfig+0x4e8>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1f0      	bne.n	80034b6 <HAL_RCC_OscConfig+0x44a>
 80034d4:	e037      	b.n	8003546 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e032      	b.n	8003548 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034e2:	4b1c      	ldr	r3, [pc, #112]	; (8003554 <HAL_RCC_OscConfig+0x4e8>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d028      	beq.n	8003542 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d121      	bne.n	8003542 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003508:	429a      	cmp	r2, r3
 800350a:	d11a      	bne.n	8003542 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003512:	4013      	ands	r3, r2
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003518:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800351a:	4293      	cmp	r3, r2
 800351c:	d111      	bne.n	8003542 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003528:	085b      	lsrs	r3, r3, #1
 800352a:	3b01      	subs	r3, #1
 800352c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800352e:	429a      	cmp	r2, r3
 8003530:	d107      	bne.n	8003542 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800353e:	429a      	cmp	r2, r3
 8003540:	d001      	beq.n	8003546 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e000      	b.n	8003548 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40007000 	.word	0x40007000
 8003554:	40023800 	.word	0x40023800
 8003558:	42470060 	.word	0x42470060

0800355c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e0cc      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003570:	4b68      	ldr	r3, [pc, #416]	; (8003714 <HAL_RCC_ClockConfig+0x1b8>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d90c      	bls.n	8003598 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357e:	4b65      	ldr	r3, [pc, #404]	; (8003714 <HAL_RCC_ClockConfig+0x1b8>)
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003586:	4b63      	ldr	r3, [pc, #396]	; (8003714 <HAL_RCC_ClockConfig+0x1b8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d001      	beq.n	8003598 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0b8      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d020      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d005      	beq.n	80035bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035b0:	4b59      	ldr	r3, [pc, #356]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	4a58      	ldr	r2, [pc, #352]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d005      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035c8:	4b53      	ldr	r3, [pc, #332]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	4a52      	ldr	r2, [pc, #328]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d4:	4b50      	ldr	r3, [pc, #320]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	494d      	ldr	r1, [pc, #308]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d044      	beq.n	800367c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d107      	bne.n	800360a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fa:	4b47      	ldr	r3, [pc, #284]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d119      	bne.n	800363a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e07f      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b02      	cmp	r3, #2
 8003610:	d003      	beq.n	800361a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003616:	2b03      	cmp	r3, #3
 8003618:	d107      	bne.n	800362a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800361a:	4b3f      	ldr	r3, [pc, #252]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d109      	bne.n	800363a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e06f      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362a:	4b3b      	ldr	r3, [pc, #236]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e067      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800363a:	4b37      	ldr	r3, [pc, #220]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f023 0203 	bic.w	r2, r3, #3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	4934      	ldr	r1, [pc, #208]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	4313      	orrs	r3, r2
 800364a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800364c:	f7fe f8a0 	bl	8001790 <HAL_GetTick>
 8003650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003652:	e00a      	b.n	800366a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003654:	f7fe f89c 	bl	8001790 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003662:	4293      	cmp	r3, r2
 8003664:	d901      	bls.n	800366a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e04f      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366a:	4b2b      	ldr	r3, [pc, #172]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 020c 	and.w	r2, r3, #12
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	429a      	cmp	r2, r3
 800367a:	d1eb      	bne.n	8003654 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800367c:	4b25      	ldr	r3, [pc, #148]	; (8003714 <HAL_RCC_ClockConfig+0x1b8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d20c      	bcs.n	80036a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368a:	4b22      	ldr	r3, [pc, #136]	; (8003714 <HAL_RCC_ClockConfig+0x1b8>)
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003692:	4b20      	ldr	r3, [pc, #128]	; (8003714 <HAL_RCC_ClockConfig+0x1b8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d001      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e032      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d008      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036b0:	4b19      	ldr	r3, [pc, #100]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4916      	ldr	r1, [pc, #88]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d009      	beq.n	80036e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ce:	4b12      	ldr	r3, [pc, #72]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	490e      	ldr	r1, [pc, #56]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036e2:	f000 f821 	bl	8003728 <HAL_RCC_GetSysClockFreq>
 80036e6:	4602      	mov	r2, r0
 80036e8:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	091b      	lsrs	r3, r3, #4
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	490a      	ldr	r1, [pc, #40]	; (800371c <HAL_RCC_ClockConfig+0x1c0>)
 80036f4:	5ccb      	ldrb	r3, [r1, r3]
 80036f6:	fa22 f303 	lsr.w	r3, r2, r3
 80036fa:	4a09      	ldr	r2, [pc, #36]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80036fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036fe:	4b09      	ldr	r3, [pc, #36]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f7fd ff0e 	bl	8001524 <HAL_InitTick>

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40023c00 	.word	0x40023c00
 8003718:	40023800 	.word	0x40023800
 800371c:	0800b7b0 	.word	0x0800b7b0
 8003720:	200000a4 	.word	0x200000a4
 8003724:	200000a8 	.word	0x200000a8

08003728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003728:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800372c:	b084      	sub	sp, #16
 800372e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	607b      	str	r3, [r7, #4]
 8003734:	2300      	movs	r3, #0
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	2300      	movs	r3, #0
 800373a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800373c:	2300      	movs	r3, #0
 800373e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003740:	4b67      	ldr	r3, [pc, #412]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f003 030c 	and.w	r3, r3, #12
 8003748:	2b08      	cmp	r3, #8
 800374a:	d00d      	beq.n	8003768 <HAL_RCC_GetSysClockFreq+0x40>
 800374c:	2b08      	cmp	r3, #8
 800374e:	f200 80bd 	bhi.w	80038cc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <HAL_RCC_GetSysClockFreq+0x34>
 8003756:	2b04      	cmp	r3, #4
 8003758:	d003      	beq.n	8003762 <HAL_RCC_GetSysClockFreq+0x3a>
 800375a:	e0b7      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800375c:	4b61      	ldr	r3, [pc, #388]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800375e:	60bb      	str	r3, [r7, #8]
       break;
 8003760:	e0b7      	b.n	80038d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003762:	4b61      	ldr	r3, [pc, #388]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003764:	60bb      	str	r3, [r7, #8]
      break;
 8003766:	e0b4      	b.n	80038d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003768:	4b5d      	ldr	r3, [pc, #372]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003770:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003772:	4b5b      	ldr	r3, [pc, #364]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d04d      	beq.n	800381a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800377e:	4b58      	ldr	r3, [pc, #352]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	099b      	lsrs	r3, r3, #6
 8003784:	461a      	mov	r2, r3
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800378e:	f04f 0100 	mov.w	r1, #0
 8003792:	ea02 0800 	and.w	r8, r2, r0
 8003796:	ea03 0901 	and.w	r9, r3, r1
 800379a:	4640      	mov	r0, r8
 800379c:	4649      	mov	r1, r9
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	014b      	lsls	r3, r1, #5
 80037a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80037ac:	0142      	lsls	r2, r0, #5
 80037ae:	4610      	mov	r0, r2
 80037b0:	4619      	mov	r1, r3
 80037b2:	ebb0 0008 	subs.w	r0, r0, r8
 80037b6:	eb61 0109 	sbc.w	r1, r1, r9
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	018b      	lsls	r3, r1, #6
 80037c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037c8:	0182      	lsls	r2, r0, #6
 80037ca:	1a12      	subs	r2, r2, r0
 80037cc:	eb63 0301 	sbc.w	r3, r3, r1
 80037d0:	f04f 0000 	mov.w	r0, #0
 80037d4:	f04f 0100 	mov.w	r1, #0
 80037d8:	00d9      	lsls	r1, r3, #3
 80037da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037de:	00d0      	lsls	r0, r2, #3
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	eb12 0208 	adds.w	r2, r2, r8
 80037e8:	eb43 0309 	adc.w	r3, r3, r9
 80037ec:	f04f 0000 	mov.w	r0, #0
 80037f0:	f04f 0100 	mov.w	r1, #0
 80037f4:	0259      	lsls	r1, r3, #9
 80037f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80037fa:	0250      	lsls	r0, r2, #9
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4610      	mov	r0, r2
 8003802:	4619      	mov	r1, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	461a      	mov	r2, r3
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	f7fc fd40 	bl	8000290 <__aeabi_uldivmod>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4613      	mov	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	e04a      	b.n	80038b0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800381a:	4b31      	ldr	r3, [pc, #196]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	099b      	lsrs	r3, r3, #6
 8003820:	461a      	mov	r2, r3
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	f240 10ff 	movw	r0, #511	; 0x1ff
 800382a:	f04f 0100 	mov.w	r1, #0
 800382e:	ea02 0400 	and.w	r4, r2, r0
 8003832:	ea03 0501 	and.w	r5, r3, r1
 8003836:	4620      	mov	r0, r4
 8003838:	4629      	mov	r1, r5
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	014b      	lsls	r3, r1, #5
 8003844:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003848:	0142      	lsls	r2, r0, #5
 800384a:	4610      	mov	r0, r2
 800384c:	4619      	mov	r1, r3
 800384e:	1b00      	subs	r0, r0, r4
 8003850:	eb61 0105 	sbc.w	r1, r1, r5
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	f04f 0300 	mov.w	r3, #0
 800385c:	018b      	lsls	r3, r1, #6
 800385e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003862:	0182      	lsls	r2, r0, #6
 8003864:	1a12      	subs	r2, r2, r0
 8003866:	eb63 0301 	sbc.w	r3, r3, r1
 800386a:	f04f 0000 	mov.w	r0, #0
 800386e:	f04f 0100 	mov.w	r1, #0
 8003872:	00d9      	lsls	r1, r3, #3
 8003874:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003878:	00d0      	lsls	r0, r2, #3
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	1912      	adds	r2, r2, r4
 8003880:	eb45 0303 	adc.w	r3, r5, r3
 8003884:	f04f 0000 	mov.w	r0, #0
 8003888:	f04f 0100 	mov.w	r1, #0
 800388c:	0299      	lsls	r1, r3, #10
 800388e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003892:	0290      	lsls	r0, r2, #10
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4610      	mov	r0, r2
 800389a:	4619      	mov	r1, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	461a      	mov	r2, r3
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	f7fc fcf4 	bl	8000290 <__aeabi_uldivmod>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4613      	mov	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	0c1b      	lsrs	r3, r3, #16
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	3301      	adds	r3, #1
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c8:	60bb      	str	r3, [r7, #8]
      break;
 80038ca:	e002      	b.n	80038d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038cc:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80038ce:	60bb      	str	r3, [r7, #8]
      break;
 80038d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038d2:	68bb      	ldr	r3, [r7, #8]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800
 80038e4:	00f42400 	.word	0x00f42400
 80038e8:	007a1200 	.word	0x007a1200

080038ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f0:	4b03      	ldr	r3, [pc, #12]	; (8003900 <HAL_RCC_GetHCLKFreq+0x14>)
 80038f2:	681b      	ldr	r3, [r3, #0]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	200000a4 	.word	0x200000a4

08003904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003908:	f7ff fff0 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 800390c:	4602      	mov	r2, r0
 800390e:	4b05      	ldr	r3, [pc, #20]	; (8003924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	0a9b      	lsrs	r3, r3, #10
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	4903      	ldr	r1, [pc, #12]	; (8003928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800391a:	5ccb      	ldrb	r3, [r1, r3]
 800391c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003920:	4618      	mov	r0, r3
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40023800 	.word	0x40023800
 8003928:	0800b7c0 	.word	0x0800b7c0

0800392c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003930:	f7ff ffdc 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 8003934:	4602      	mov	r2, r0
 8003936:	4b05      	ldr	r3, [pc, #20]	; (800394c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	0b5b      	lsrs	r3, r3, #13
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	4903      	ldr	r1, [pc, #12]	; (8003950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003942:	5ccb      	ldrb	r3, [r1, r3]
 8003944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003948:	4618      	mov	r0, r3
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40023800 	.word	0x40023800
 8003950:	0800b7c0 	.word	0x0800b7c0

08003954 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	220f      	movs	r2, #15
 8003962:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003964:	4b12      	ldr	r3, [pc, #72]	; (80039b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 0203 	and.w	r2, r3, #3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003970:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800397c:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <HAL_RCC_GetClockConfig+0x5c>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003988:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <HAL_RCC_GetClockConfig+0x5c>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	08db      	lsrs	r3, r3, #3
 800398e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003996:	4b07      	ldr	r3, [pc, #28]	; (80039b4 <HAL_RCC_GetClockConfig+0x60>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0207 	and.w	r2, r3, #7
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	601a      	str	r2, [r3, #0]
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40023800 	.word	0x40023800
 80039b4:	40023c00 	.word	0x40023c00

080039b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e041      	b.n	8003a4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d106      	bne.n	80039e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f839 	bl	8003a56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3304      	adds	r3, #4
 80039f4:	4619      	mov	r1, r3
 80039f6:	4610      	mov	r0, r2
 80039f8:	f000 f9ca 	bl	8003d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d001      	beq.n	8003a84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e044      	b.n	8003b0e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a1e      	ldr	r2, [pc, #120]	; (8003b1c <HAL_TIM_Base_Start_IT+0xb0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d018      	beq.n	8003ad8 <HAL_TIM_Base_Start_IT+0x6c>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aae:	d013      	beq.n	8003ad8 <HAL_TIM_Base_Start_IT+0x6c>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a1a      	ldr	r2, [pc, #104]	; (8003b20 <HAL_TIM_Base_Start_IT+0xb4>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00e      	beq.n	8003ad8 <HAL_TIM_Base_Start_IT+0x6c>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a19      	ldr	r2, [pc, #100]	; (8003b24 <HAL_TIM_Base_Start_IT+0xb8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d009      	beq.n	8003ad8 <HAL_TIM_Base_Start_IT+0x6c>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a17      	ldr	r2, [pc, #92]	; (8003b28 <HAL_TIM_Base_Start_IT+0xbc>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d004      	beq.n	8003ad8 <HAL_TIM_Base_Start_IT+0x6c>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a16      	ldr	r2, [pc, #88]	; (8003b2c <HAL_TIM_Base_Start_IT+0xc0>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d111      	bne.n	8003afc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2b06      	cmp	r3, #6
 8003ae8:	d010      	beq.n	8003b0c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0201 	orr.w	r2, r2, #1
 8003af8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003afa:	e007      	b.n	8003b0c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40010000 	.word	0x40010000
 8003b20:	40000400 	.word	0x40000400
 8003b24:	40000800 	.word	0x40000800
 8003b28:	40000c00 	.word	0x40000c00
 8003b2c:	40014000 	.word	0x40014000

08003b30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d122      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d11b      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f06f 0202 	mvn.w	r2, #2
 8003b5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f8ee 	bl	8003d54 <HAL_TIM_IC_CaptureCallback>
 8003b78:	e005      	b.n	8003b86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f8e0 	bl	8003d40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f8f1 	bl	8003d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d122      	bne.n	8003be0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	d11b      	bne.n	8003be0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f06f 0204 	mvn.w	r2, #4
 8003bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f8c4 	bl	8003d54 <HAL_TIM_IC_CaptureCallback>
 8003bcc:	e005      	b.n	8003bda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f8b6 	bl	8003d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f8c7 	bl	8003d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d122      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0308 	and.w	r3, r3, #8
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	d11b      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0208 	mvn.w	r2, #8
 8003c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2204      	movs	r2, #4
 8003c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f89a 	bl	8003d54 <HAL_TIM_IC_CaptureCallback>
 8003c20:	e005      	b.n	8003c2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f88c 	bl	8003d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f89d 	bl	8003d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0310 	and.w	r3, r3, #16
 8003c3e:	2b10      	cmp	r3, #16
 8003c40:	d122      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0310 	and.w	r3, r3, #16
 8003c4c:	2b10      	cmp	r3, #16
 8003c4e:	d11b      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0210 	mvn.w	r2, #16
 8003c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2208      	movs	r2, #8
 8003c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f870 	bl	8003d54 <HAL_TIM_IC_CaptureCallback>
 8003c74:	e005      	b.n	8003c82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f862 	bl	8003d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f873 	bl	8003d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d10e      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d107      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0201 	mvn.w	r2, #1
 8003cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7fd fa92 	bl	80011d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cbe:	2b80      	cmp	r3, #128	; 0x80
 8003cc0:	d10e      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ccc:	2b80      	cmp	r3, #128	; 0x80
 8003cce:	d107      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f8e2 	bl	8003ea4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cea:	2b40      	cmp	r3, #64	; 0x40
 8003cec:	d10e      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf8:	2b40      	cmp	r3, #64	; 0x40
 8003cfa:	d107      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f838 	bl	8003d7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0320 	and.w	r3, r3, #32
 8003d16:	2b20      	cmp	r3, #32
 8003d18:	d10e      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d107      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f06f 0220 	mvn.w	r2, #32
 8003d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f8ac 	bl	8003e90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d38:	bf00      	nop
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a34      	ldr	r2, [pc, #208]	; (8003e74 <TIM_Base_SetConfig+0xe4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d00f      	beq.n	8003dc8 <TIM_Base_SetConfig+0x38>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dae:	d00b      	beq.n	8003dc8 <TIM_Base_SetConfig+0x38>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a31      	ldr	r2, [pc, #196]	; (8003e78 <TIM_Base_SetConfig+0xe8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d007      	beq.n	8003dc8 <TIM_Base_SetConfig+0x38>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a30      	ldr	r2, [pc, #192]	; (8003e7c <TIM_Base_SetConfig+0xec>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d003      	beq.n	8003dc8 <TIM_Base_SetConfig+0x38>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a2f      	ldr	r2, [pc, #188]	; (8003e80 <TIM_Base_SetConfig+0xf0>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d108      	bne.n	8003dda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a25      	ldr	r2, [pc, #148]	; (8003e74 <TIM_Base_SetConfig+0xe4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d01b      	beq.n	8003e1a <TIM_Base_SetConfig+0x8a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de8:	d017      	beq.n	8003e1a <TIM_Base_SetConfig+0x8a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a22      	ldr	r2, [pc, #136]	; (8003e78 <TIM_Base_SetConfig+0xe8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <TIM_Base_SetConfig+0x8a>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a21      	ldr	r2, [pc, #132]	; (8003e7c <TIM_Base_SetConfig+0xec>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00f      	beq.n	8003e1a <TIM_Base_SetConfig+0x8a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a20      	ldr	r2, [pc, #128]	; (8003e80 <TIM_Base_SetConfig+0xf0>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00b      	beq.n	8003e1a <TIM_Base_SetConfig+0x8a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a1f      	ldr	r2, [pc, #124]	; (8003e84 <TIM_Base_SetConfig+0xf4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d007      	beq.n	8003e1a <TIM_Base_SetConfig+0x8a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a1e      	ldr	r2, [pc, #120]	; (8003e88 <TIM_Base_SetConfig+0xf8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d003      	beq.n	8003e1a <TIM_Base_SetConfig+0x8a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a1d      	ldr	r2, [pc, #116]	; (8003e8c <TIM_Base_SetConfig+0xfc>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d108      	bne.n	8003e2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a08      	ldr	r2, [pc, #32]	; (8003e74 <TIM_Base_SetConfig+0xe4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d103      	bne.n	8003e60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	691a      	ldr	r2, [r3, #16]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	615a      	str	r2, [r3, #20]
}
 8003e66:	bf00      	nop
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40010000 	.word	0x40010000
 8003e78:	40000400 	.word	0x40000400
 8003e7c:	40000800 	.word	0x40000800
 8003e80:	40000c00 	.word	0x40000c00
 8003e84:	40014000 	.word	0x40014000
 8003e88:	40014400 	.word	0x40014400
 8003e8c:	40014800 	.word	0x40014800

08003e90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e03f      	b.n	8003f4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7fd fab8 	bl	8001454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2224      	movs	r2, #36	; 0x24
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003efa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f9a7 	bl	8004250 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695a      	ldr	r2, [r3, #20]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b08a      	sub	sp, #40	; 0x28
 8003f56:	af02      	add	r7, sp, #8
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	603b      	str	r3, [r7, #0]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	d17c      	bne.n	800406c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <HAL_UART_Transmit+0x2c>
 8003f78:	88fb      	ldrh	r3, [r7, #6]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e075      	b.n	800406e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d101      	bne.n	8003f90 <HAL_UART_Transmit+0x3e>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e06e      	b.n	800406e <HAL_UART_Transmit+0x11c>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2221      	movs	r2, #33	; 0x21
 8003fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fa6:	f7fd fbf3 	bl	8001790 <HAL_GetTick>
 8003faa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	88fa      	ldrh	r2, [r7, #6]
 8003fb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	88fa      	ldrh	r2, [r7, #6]
 8003fb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc0:	d108      	bne.n	8003fd4 <HAL_UART_Transmit+0x82>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d104      	bne.n	8003fd4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	61bb      	str	r3, [r7, #24]
 8003fd2:	e003      	b.n	8003fdc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003fe4:	e02a      	b.n	800403c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2200      	movs	r2, #0
 8003fee:	2180      	movs	r1, #128	; 0x80
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 f8e2 	bl	80041ba <UART_WaitOnFlagUntilTimeout>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e036      	b.n	800406e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10b      	bne.n	800401e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004014:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	3302      	adds	r3, #2
 800401a:	61bb      	str	r3, [r7, #24]
 800401c:	e007      	b.n	800402e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	781a      	ldrb	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	3301      	adds	r3, #1
 800402c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004032:	b29b      	uxth	r3, r3
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004040:	b29b      	uxth	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1cf      	bne.n	8003fe6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2200      	movs	r2, #0
 800404e:	2140      	movs	r1, #64	; 0x40
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 f8b2 	bl	80041ba <UART_WaitOnFlagUntilTimeout>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e006      	b.n	800406e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2220      	movs	r2, #32
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	e000      	b.n	800406e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800406c:	2302      	movs	r3, #2
  }
}
 800406e:	4618      	mov	r0, r3
 8004070:	3720      	adds	r7, #32
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b08a      	sub	sp, #40	; 0x28
 800407a:	af02      	add	r7, sp, #8
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	603b      	str	r3, [r7, #0]
 8004082:	4613      	mov	r3, r2
 8004084:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b20      	cmp	r3, #32
 8004094:	f040 808c 	bne.w	80041b0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <HAL_UART_Receive+0x2e>
 800409e:	88fb      	ldrh	r3, [r7, #6]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e084      	b.n	80041b2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_UART_Receive+0x40>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e07d      	b.n	80041b2 <HAL_UART_Receive+0x13c>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2222      	movs	r2, #34	; 0x22
 80040c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040d2:	f7fd fb5d 	bl	8001790 <HAL_GetTick>
 80040d6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	88fa      	ldrh	r2, [r7, #6]
 80040dc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	88fa      	ldrh	r2, [r7, #6]
 80040e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ec:	d108      	bne.n	8004100 <HAL_UART_Receive+0x8a>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d104      	bne.n	8004100 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	61bb      	str	r3, [r7, #24]
 80040fe:	e003      	b.n	8004108 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004104:	2300      	movs	r3, #0
 8004106:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004110:	e043      	b.n	800419a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2200      	movs	r2, #0
 800411a:	2120      	movs	r1, #32
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 f84c 	bl	80041ba <UART_WaitOnFlagUntilTimeout>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e042      	b.n	80041b2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10c      	bne.n	800414c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	b29b      	uxth	r3, r3
 800413a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800413e:	b29a      	uxth	r2, r3
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	3302      	adds	r3, #2
 8004148:	61bb      	str	r3, [r7, #24]
 800414a:	e01f      	b.n	800418c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004154:	d007      	beq.n	8004166 <HAL_UART_Receive+0xf0>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10a      	bne.n	8004174 <HAL_UART_Receive+0xfe>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	b2da      	uxtb	r2, r3
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	701a      	strb	r2, [r3, #0]
 8004172:	e008      	b.n	8004186 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004180:	b2da      	uxtb	r2, r3
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	3301      	adds	r3, #1
 800418a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004190:	b29b      	uxth	r3, r3
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1b6      	bne.n	8004112 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	e000      	b.n	80041b2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80041b0:	2302      	movs	r3, #2
  }
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3720      	adds	r7, #32
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	60f8      	str	r0, [r7, #12]
 80041c2:	60b9      	str	r1, [r7, #8]
 80041c4:	603b      	str	r3, [r7, #0]
 80041c6:	4613      	mov	r3, r2
 80041c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ca:	e02c      	b.n	8004226 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d2:	d028      	beq.n	8004226 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d007      	beq.n	80041ea <UART_WaitOnFlagUntilTimeout+0x30>
 80041da:	f7fd fad9 	bl	8001790 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d21d      	bcs.n	8004226 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041f8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695a      	ldr	r2, [r3, #20]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0201 	bic.w	r2, r2, #1
 8004208:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2220      	movs	r2, #32
 8004216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e00f      	b.n	8004246 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4013      	ands	r3, r2
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	429a      	cmp	r2, r3
 8004234:	bf0c      	ite	eq
 8004236:	2301      	moveq	r3, #1
 8004238:	2300      	movne	r3, #0
 800423a:	b2db      	uxtb	r3, r3
 800423c:	461a      	mov	r2, r3
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	429a      	cmp	r2, r3
 8004242:	d0c3      	beq.n	80041cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004254:	b09f      	sub	sp, #124	; 0x7c
 8004256:	af00      	add	r7, sp, #0
 8004258:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800425a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004266:	68d9      	ldr	r1, [r3, #12]
 8004268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	ea40 0301 	orr.w	r3, r0, r1
 8004270:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	431a      	orrs	r2, r3
 800427c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	431a      	orrs	r2, r3
 8004282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	4313      	orrs	r3, r2
 8004288:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800428a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004294:	f021 010c 	bic.w	r1, r1, #12
 8004298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800429e:	430b      	orrs	r3, r1
 80042a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ae:	6999      	ldr	r1, [r3, #24]
 80042b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	ea40 0301 	orr.w	r3, r0, r1
 80042b8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	4bc5      	ldr	r3, [pc, #788]	; (80045d4 <UART_SetConfig+0x384>)
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d004      	beq.n	80042ce <UART_SetConfig+0x7e>
 80042c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	4bc3      	ldr	r3, [pc, #780]	; (80045d8 <UART_SetConfig+0x388>)
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d103      	bne.n	80042d6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042ce:	f7ff fb2d 	bl	800392c <HAL_RCC_GetPCLK2Freq>
 80042d2:	6778      	str	r0, [r7, #116]	; 0x74
 80042d4:	e002      	b.n	80042dc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042d6:	f7ff fb15 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 80042da:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042e4:	f040 80b6 	bne.w	8004454 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042ea:	461c      	mov	r4, r3
 80042ec:	f04f 0500 	mov.w	r5, #0
 80042f0:	4622      	mov	r2, r4
 80042f2:	462b      	mov	r3, r5
 80042f4:	1891      	adds	r1, r2, r2
 80042f6:	6439      	str	r1, [r7, #64]	; 0x40
 80042f8:	415b      	adcs	r3, r3
 80042fa:	647b      	str	r3, [r7, #68]	; 0x44
 80042fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004300:	1912      	adds	r2, r2, r4
 8004302:	eb45 0303 	adc.w	r3, r5, r3
 8004306:	f04f 0000 	mov.w	r0, #0
 800430a:	f04f 0100 	mov.w	r1, #0
 800430e:	00d9      	lsls	r1, r3, #3
 8004310:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004314:	00d0      	lsls	r0, r2, #3
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	1911      	adds	r1, r2, r4
 800431c:	6639      	str	r1, [r7, #96]	; 0x60
 800431e:	416b      	adcs	r3, r5
 8004320:	667b      	str	r3, [r7, #100]	; 0x64
 8004322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	461a      	mov	r2, r3
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	1891      	adds	r1, r2, r2
 800432e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004330:	415b      	adcs	r3, r3
 8004332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004334:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004338:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800433c:	f7fb ffa8 	bl	8000290 <__aeabi_uldivmod>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4ba5      	ldr	r3, [pc, #660]	; (80045dc <UART_SetConfig+0x38c>)
 8004346:	fba3 2302 	umull	r2, r3, r3, r2
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	011e      	lsls	r6, r3, #4
 800434e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004350:	461c      	mov	r4, r3
 8004352:	f04f 0500 	mov.w	r5, #0
 8004356:	4622      	mov	r2, r4
 8004358:	462b      	mov	r3, r5
 800435a:	1891      	adds	r1, r2, r2
 800435c:	6339      	str	r1, [r7, #48]	; 0x30
 800435e:	415b      	adcs	r3, r3
 8004360:	637b      	str	r3, [r7, #52]	; 0x34
 8004362:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004366:	1912      	adds	r2, r2, r4
 8004368:	eb45 0303 	adc.w	r3, r5, r3
 800436c:	f04f 0000 	mov.w	r0, #0
 8004370:	f04f 0100 	mov.w	r1, #0
 8004374:	00d9      	lsls	r1, r3, #3
 8004376:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800437a:	00d0      	lsls	r0, r2, #3
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	1911      	adds	r1, r2, r4
 8004382:	65b9      	str	r1, [r7, #88]	; 0x58
 8004384:	416b      	adcs	r3, r5
 8004386:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	461a      	mov	r2, r3
 800438e:	f04f 0300 	mov.w	r3, #0
 8004392:	1891      	adds	r1, r2, r2
 8004394:	62b9      	str	r1, [r7, #40]	; 0x28
 8004396:	415b      	adcs	r3, r3
 8004398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800439a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800439e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80043a2:	f7fb ff75 	bl	8000290 <__aeabi_uldivmod>
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	4b8c      	ldr	r3, [pc, #560]	; (80045dc <UART_SetConfig+0x38c>)
 80043ac:	fba3 1302 	umull	r1, r3, r3, r2
 80043b0:	095b      	lsrs	r3, r3, #5
 80043b2:	2164      	movs	r1, #100	; 0x64
 80043b4:	fb01 f303 	mul.w	r3, r1, r3
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	3332      	adds	r3, #50	; 0x32
 80043be:	4a87      	ldr	r2, [pc, #540]	; (80045dc <UART_SetConfig+0x38c>)
 80043c0:	fba2 2303 	umull	r2, r3, r2, r3
 80043c4:	095b      	lsrs	r3, r3, #5
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043cc:	441e      	add	r6, r3
 80043ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043d0:	4618      	mov	r0, r3
 80043d2:	f04f 0100 	mov.w	r1, #0
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	1894      	adds	r4, r2, r2
 80043dc:	623c      	str	r4, [r7, #32]
 80043de:	415b      	adcs	r3, r3
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
 80043e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043e6:	1812      	adds	r2, r2, r0
 80043e8:	eb41 0303 	adc.w	r3, r1, r3
 80043ec:	f04f 0400 	mov.w	r4, #0
 80043f0:	f04f 0500 	mov.w	r5, #0
 80043f4:	00dd      	lsls	r5, r3, #3
 80043f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043fa:	00d4      	lsls	r4, r2, #3
 80043fc:	4622      	mov	r2, r4
 80043fe:	462b      	mov	r3, r5
 8004400:	1814      	adds	r4, r2, r0
 8004402:	653c      	str	r4, [r7, #80]	; 0x50
 8004404:	414b      	adcs	r3, r1
 8004406:	657b      	str	r3, [r7, #84]	; 0x54
 8004408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	461a      	mov	r2, r3
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	1891      	adds	r1, r2, r2
 8004414:	61b9      	str	r1, [r7, #24]
 8004416:	415b      	adcs	r3, r3
 8004418:	61fb      	str	r3, [r7, #28]
 800441a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800441e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004422:	f7fb ff35 	bl	8000290 <__aeabi_uldivmod>
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	4b6c      	ldr	r3, [pc, #432]	; (80045dc <UART_SetConfig+0x38c>)
 800442c:	fba3 1302 	umull	r1, r3, r3, r2
 8004430:	095b      	lsrs	r3, r3, #5
 8004432:	2164      	movs	r1, #100	; 0x64
 8004434:	fb01 f303 	mul.w	r3, r1, r3
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	3332      	adds	r3, #50	; 0x32
 800443e:	4a67      	ldr	r2, [pc, #412]	; (80045dc <UART_SetConfig+0x38c>)
 8004440:	fba2 2303 	umull	r2, r3, r2, r3
 8004444:	095b      	lsrs	r3, r3, #5
 8004446:	f003 0207 	and.w	r2, r3, #7
 800444a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4432      	add	r2, r6
 8004450:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004452:	e0b9      	b.n	80045c8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004454:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004456:	461c      	mov	r4, r3
 8004458:	f04f 0500 	mov.w	r5, #0
 800445c:	4622      	mov	r2, r4
 800445e:	462b      	mov	r3, r5
 8004460:	1891      	adds	r1, r2, r2
 8004462:	6139      	str	r1, [r7, #16]
 8004464:	415b      	adcs	r3, r3
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800446c:	1912      	adds	r2, r2, r4
 800446e:	eb45 0303 	adc.w	r3, r5, r3
 8004472:	f04f 0000 	mov.w	r0, #0
 8004476:	f04f 0100 	mov.w	r1, #0
 800447a:	00d9      	lsls	r1, r3, #3
 800447c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004480:	00d0      	lsls	r0, r2, #3
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	eb12 0804 	adds.w	r8, r2, r4
 800448a:	eb43 0905 	adc.w	r9, r3, r5
 800448e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	4618      	mov	r0, r3
 8004494:	f04f 0100 	mov.w	r1, #0
 8004498:	f04f 0200 	mov.w	r2, #0
 800449c:	f04f 0300 	mov.w	r3, #0
 80044a0:	008b      	lsls	r3, r1, #2
 80044a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044a6:	0082      	lsls	r2, r0, #2
 80044a8:	4640      	mov	r0, r8
 80044aa:	4649      	mov	r1, r9
 80044ac:	f7fb fef0 	bl	8000290 <__aeabi_uldivmod>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4b49      	ldr	r3, [pc, #292]	; (80045dc <UART_SetConfig+0x38c>)
 80044b6:	fba3 2302 	umull	r2, r3, r3, r2
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	011e      	lsls	r6, r3, #4
 80044be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044c0:	4618      	mov	r0, r3
 80044c2:	f04f 0100 	mov.w	r1, #0
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	1894      	adds	r4, r2, r2
 80044cc:	60bc      	str	r4, [r7, #8]
 80044ce:	415b      	adcs	r3, r3
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044d6:	1812      	adds	r2, r2, r0
 80044d8:	eb41 0303 	adc.w	r3, r1, r3
 80044dc:	f04f 0400 	mov.w	r4, #0
 80044e0:	f04f 0500 	mov.w	r5, #0
 80044e4:	00dd      	lsls	r5, r3, #3
 80044e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044ea:	00d4      	lsls	r4, r2, #3
 80044ec:	4622      	mov	r2, r4
 80044ee:	462b      	mov	r3, r5
 80044f0:	1814      	adds	r4, r2, r0
 80044f2:	64bc      	str	r4, [r7, #72]	; 0x48
 80044f4:	414b      	adcs	r3, r1
 80044f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f04f 0100 	mov.w	r1, #0
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	008b      	lsls	r3, r1, #2
 800450c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004510:	0082      	lsls	r2, r0, #2
 8004512:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004516:	f7fb febb 	bl	8000290 <__aeabi_uldivmod>
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	4b2f      	ldr	r3, [pc, #188]	; (80045dc <UART_SetConfig+0x38c>)
 8004520:	fba3 1302 	umull	r1, r3, r3, r2
 8004524:	095b      	lsrs	r3, r3, #5
 8004526:	2164      	movs	r1, #100	; 0x64
 8004528:	fb01 f303 	mul.w	r3, r1, r3
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	011b      	lsls	r3, r3, #4
 8004530:	3332      	adds	r3, #50	; 0x32
 8004532:	4a2a      	ldr	r2, [pc, #168]	; (80045dc <UART_SetConfig+0x38c>)
 8004534:	fba2 2303 	umull	r2, r3, r2, r3
 8004538:	095b      	lsrs	r3, r3, #5
 800453a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800453e:	441e      	add	r6, r3
 8004540:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004542:	4618      	mov	r0, r3
 8004544:	f04f 0100 	mov.w	r1, #0
 8004548:	4602      	mov	r2, r0
 800454a:	460b      	mov	r3, r1
 800454c:	1894      	adds	r4, r2, r2
 800454e:	603c      	str	r4, [r7, #0]
 8004550:	415b      	adcs	r3, r3
 8004552:	607b      	str	r3, [r7, #4]
 8004554:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004558:	1812      	adds	r2, r2, r0
 800455a:	eb41 0303 	adc.w	r3, r1, r3
 800455e:	f04f 0400 	mov.w	r4, #0
 8004562:	f04f 0500 	mov.w	r5, #0
 8004566:	00dd      	lsls	r5, r3, #3
 8004568:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800456c:	00d4      	lsls	r4, r2, #3
 800456e:	4622      	mov	r2, r4
 8004570:	462b      	mov	r3, r5
 8004572:	eb12 0a00 	adds.w	sl, r2, r0
 8004576:	eb43 0b01 	adc.w	fp, r3, r1
 800457a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	4618      	mov	r0, r3
 8004580:	f04f 0100 	mov.w	r1, #0
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	008b      	lsls	r3, r1, #2
 800458e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004592:	0082      	lsls	r2, r0, #2
 8004594:	4650      	mov	r0, sl
 8004596:	4659      	mov	r1, fp
 8004598:	f7fb fe7a 	bl	8000290 <__aeabi_uldivmod>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	4b0e      	ldr	r3, [pc, #56]	; (80045dc <UART_SetConfig+0x38c>)
 80045a2:	fba3 1302 	umull	r1, r3, r3, r2
 80045a6:	095b      	lsrs	r3, r3, #5
 80045a8:	2164      	movs	r1, #100	; 0x64
 80045aa:	fb01 f303 	mul.w	r3, r1, r3
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	3332      	adds	r3, #50	; 0x32
 80045b4:	4a09      	ldr	r2, [pc, #36]	; (80045dc <UART_SetConfig+0x38c>)
 80045b6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ba:	095b      	lsrs	r3, r3, #5
 80045bc:	f003 020f 	and.w	r2, r3, #15
 80045c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4432      	add	r2, r6
 80045c6:	609a      	str	r2, [r3, #8]
}
 80045c8:	bf00      	nop
 80045ca:	377c      	adds	r7, #124	; 0x7c
 80045cc:	46bd      	mov	sp, r7
 80045ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045d2:	bf00      	nop
 80045d4:	40011000 	.word	0x40011000
 80045d8:	40011400 	.word	0x40011400
 80045dc:	51eb851f 	.word	0x51eb851f

080045e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045e0:	b084      	sub	sp, #16
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	f107 001c 	add.w	r0, r7, #28
 80045ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d122      	bne.n	800463e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800460c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004622:	2b01      	cmp	r3, #1
 8004624:	d105      	bne.n	8004632 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f001 fac6 	bl	8005bc4 <USB_CoreReset>
 8004638:	4603      	mov	r3, r0
 800463a:	73fb      	strb	r3, [r7, #15]
 800463c:	e01a      	b.n	8004674 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f001 faba 	bl	8005bc4 <USB_CoreReset>
 8004650:	4603      	mov	r3, r0
 8004652:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004656:	2b00      	cmp	r3, #0
 8004658:	d106      	bne.n	8004668 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	639a      	str	r2, [r3, #56]	; 0x38
 8004666:	e005      	b.n	8004674 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004676:	2b01      	cmp	r3, #1
 8004678:	d10b      	bne.n	8004692 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f043 0206 	orr.w	r2, r3, #6
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f043 0220 	orr.w	r2, r3, #32
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004692:	7bfb      	ldrb	r3, [r7, #15]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800469e:	b004      	add	sp, #16
 80046a0:	4770      	bx	lr
	...

080046a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	4613      	mov	r3, r2
 80046b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80046b2:	79fb      	ldrb	r3, [r7, #7]
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d165      	bne.n	8004784 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	4a41      	ldr	r2, [pc, #260]	; (80047c0 <USB_SetTurnaroundTime+0x11c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d906      	bls.n	80046ce <USB_SetTurnaroundTime+0x2a>
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	4a40      	ldr	r2, [pc, #256]	; (80047c4 <USB_SetTurnaroundTime+0x120>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d202      	bcs.n	80046ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80046c8:	230f      	movs	r3, #15
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	e062      	b.n	8004794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	4a3c      	ldr	r2, [pc, #240]	; (80047c4 <USB_SetTurnaroundTime+0x120>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d306      	bcc.n	80046e4 <USB_SetTurnaroundTime+0x40>
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	4a3b      	ldr	r2, [pc, #236]	; (80047c8 <USB_SetTurnaroundTime+0x124>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d202      	bcs.n	80046e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80046de:	230e      	movs	r3, #14
 80046e0:	617b      	str	r3, [r7, #20]
 80046e2:	e057      	b.n	8004794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	4a38      	ldr	r2, [pc, #224]	; (80047c8 <USB_SetTurnaroundTime+0x124>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d306      	bcc.n	80046fa <USB_SetTurnaroundTime+0x56>
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	4a37      	ldr	r2, [pc, #220]	; (80047cc <USB_SetTurnaroundTime+0x128>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d202      	bcs.n	80046fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80046f4:	230d      	movs	r3, #13
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	e04c      	b.n	8004794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	4a33      	ldr	r2, [pc, #204]	; (80047cc <USB_SetTurnaroundTime+0x128>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d306      	bcc.n	8004710 <USB_SetTurnaroundTime+0x6c>
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	4a32      	ldr	r2, [pc, #200]	; (80047d0 <USB_SetTurnaroundTime+0x12c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d802      	bhi.n	8004710 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800470a:	230c      	movs	r3, #12
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	e041      	b.n	8004794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	4a2f      	ldr	r2, [pc, #188]	; (80047d0 <USB_SetTurnaroundTime+0x12c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d906      	bls.n	8004726 <USB_SetTurnaroundTime+0x82>
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	4a2e      	ldr	r2, [pc, #184]	; (80047d4 <USB_SetTurnaroundTime+0x130>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d802      	bhi.n	8004726 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004720:	230b      	movs	r3, #11
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	e036      	b.n	8004794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	4a2a      	ldr	r2, [pc, #168]	; (80047d4 <USB_SetTurnaroundTime+0x130>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d906      	bls.n	800473c <USB_SetTurnaroundTime+0x98>
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	4a29      	ldr	r2, [pc, #164]	; (80047d8 <USB_SetTurnaroundTime+0x134>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d802      	bhi.n	800473c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004736:	230a      	movs	r3, #10
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	e02b      	b.n	8004794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4a26      	ldr	r2, [pc, #152]	; (80047d8 <USB_SetTurnaroundTime+0x134>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d906      	bls.n	8004752 <USB_SetTurnaroundTime+0xae>
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	4a25      	ldr	r2, [pc, #148]	; (80047dc <USB_SetTurnaroundTime+0x138>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d202      	bcs.n	8004752 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800474c:	2309      	movs	r3, #9
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	e020      	b.n	8004794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	4a21      	ldr	r2, [pc, #132]	; (80047dc <USB_SetTurnaroundTime+0x138>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d306      	bcc.n	8004768 <USB_SetTurnaroundTime+0xc4>
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	4a20      	ldr	r2, [pc, #128]	; (80047e0 <USB_SetTurnaroundTime+0x13c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d802      	bhi.n	8004768 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004762:	2308      	movs	r3, #8
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	e015      	b.n	8004794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4a1d      	ldr	r2, [pc, #116]	; (80047e0 <USB_SetTurnaroundTime+0x13c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d906      	bls.n	800477e <USB_SetTurnaroundTime+0xda>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	4a1c      	ldr	r2, [pc, #112]	; (80047e4 <USB_SetTurnaroundTime+0x140>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d202      	bcs.n	800477e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004778:	2307      	movs	r3, #7
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	e00a      	b.n	8004794 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800477e:	2306      	movs	r3, #6
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	e007      	b.n	8004794 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004784:	79fb      	ldrb	r3, [r7, #7]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d102      	bne.n	8004790 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800478a:	2309      	movs	r3, #9
 800478c:	617b      	str	r3, [r7, #20]
 800478e:	e001      	b.n	8004794 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004790:	2309      	movs	r3, #9
 8004792:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	029b      	lsls	r3, r3, #10
 80047a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80047ac:	431a      	orrs	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	371c      	adds	r7, #28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	00d8acbf 	.word	0x00d8acbf
 80047c4:	00e4e1c0 	.word	0x00e4e1c0
 80047c8:	00f42400 	.word	0x00f42400
 80047cc:	01067380 	.word	0x01067380
 80047d0:	011a499f 	.word	0x011a499f
 80047d4:	01312cff 	.word	0x01312cff
 80047d8:	014ca43f 	.word	0x014ca43f
 80047dc:	016e3600 	.word	0x016e3600
 80047e0:	01a6ab1f 	.word	0x01a6ab1f
 80047e4:	01e84800 	.word	0x01e84800

080047e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f043 0201 	orr.w	r2, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f023 0201 	bic.w	r2, r3, #1
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	460b      	mov	r3, r1
 8004836:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004844:	78fb      	ldrb	r3, [r7, #3]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d106      	bne.n	8004858 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	60da      	str	r2, [r3, #12]
 8004856:	e00b      	b.n	8004870 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004858:	78fb      	ldrb	r3, [r7, #3]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	60da      	str	r2, [r3, #12]
 800486a:	e001      	b.n	8004870 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e003      	b.n	8004878 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004870:	2032      	movs	r0, #50	; 0x32
 8004872:	f7fc ff99 	bl	80017a8 <HAL_Delay>

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004880:	b084      	sub	sp, #16
 8004882:	b580      	push	{r7, lr}
 8004884:	b086      	sub	sp, #24
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800488e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800489a:	2300      	movs	r3, #0
 800489c:	613b      	str	r3, [r7, #16]
 800489e:	e009      	b.n	80048b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	3340      	adds	r3, #64	; 0x40
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	2200      	movs	r2, #0
 80048ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	3301      	adds	r3, #1
 80048b2:	613b      	str	r3, [r7, #16]
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	2b0e      	cmp	r3, #14
 80048b8:	d9f2      	bls.n	80048a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80048ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d11c      	bne.n	80048fa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ce:	f043 0302 	orr.w	r3, r3, #2
 80048d2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	639a      	str	r2, [r3, #56]	; 0x38
 80048f8:	e00b      	b.n	8004912 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004918:	461a      	mov	r2, r3
 800491a:	2300      	movs	r3, #0
 800491c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004924:	4619      	mov	r1, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800492c:	461a      	mov	r2, r3
 800492e:	680b      	ldr	r3, [r1, #0]
 8004930:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004934:	2b01      	cmp	r3, #1
 8004936:	d10c      	bne.n	8004952 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493a:	2b00      	cmp	r3, #0
 800493c:	d104      	bne.n	8004948 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800493e:	2100      	movs	r1, #0
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f949 	bl	8004bd8 <USB_SetDevSpeed>
 8004946:	e008      	b.n	800495a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004948:	2101      	movs	r1, #1
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f944 	bl	8004bd8 <USB_SetDevSpeed>
 8004950:	e003      	b.n	800495a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004952:	2103      	movs	r1, #3
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f93f 	bl	8004bd8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800495a:	2110      	movs	r1, #16
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f8f3 	bl	8004b48 <USB_FlushTxFifo>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f911 	bl	8004b94 <USB_FlushRxFifo>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004982:	461a      	mov	r2, r3
 8004984:	2300      	movs	r3, #0
 8004986:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498e:	461a      	mov	r2, r3
 8004990:	2300      	movs	r3, #0
 8004992:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499a:	461a      	mov	r2, r3
 800499c:	2300      	movs	r3, #0
 800499e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049a0:	2300      	movs	r3, #0
 80049a2:	613b      	str	r3, [r7, #16]
 80049a4:	e043      	b.n	8004a2e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049bc:	d118      	bne.n	80049f0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10a      	bne.n	80049da <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d0:	461a      	mov	r2, r3
 80049d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	e013      	b.n	8004a02 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e6:	461a      	mov	r2, r3
 80049e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049ec:	6013      	str	r3, [r2, #0]
 80049ee:	e008      	b.n	8004a02 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fc:	461a      	mov	r2, r3
 80049fe:	2300      	movs	r3, #0
 8004a00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	015a      	lsls	r2, r3, #5
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4413      	add	r3, r2
 8004a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0e:	461a      	mov	r2, r3
 8004a10:	2300      	movs	r3, #0
 8004a12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a20:	461a      	mov	r2, r3
 8004a22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d3b7      	bcc.n	80049a6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a36:	2300      	movs	r3, #0
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	e043      	b.n	8004ac4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a52:	d118      	bne.n	8004a86 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10a      	bne.n	8004a70 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a66:	461a      	mov	r2, r3
 8004a68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	e013      	b.n	8004a98 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	e008      	b.n	8004a98 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a92:	461a      	mov	r2, r3
 8004a94:	2300      	movs	r3, #0
 8004a96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004abc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	613b      	str	r3, [r7, #16]
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d3b7      	bcc.n	8004a3c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ada:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ade:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004aec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d105      	bne.n	8004b00 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	f043 0210 	orr.w	r2, r3, #16
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	699a      	ldr	r2, [r3, #24]
 8004b04:	4b0f      	ldr	r3, [pc, #60]	; (8004b44 <USB_DevInit+0x2c4>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d005      	beq.n	8004b1e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	f043 0208 	orr.w	r2, r3, #8
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d107      	bne.n	8004b34 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b2c:	f043 0304 	orr.w	r3, r3, #4
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b40:	b004      	add	sp, #16
 8004b42:	4770      	bx	lr
 8004b44:	803c3800 	.word	0x803c3800

08004b48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	019b      	lsls	r3, r3, #6
 8004b5a:	f043 0220 	orr.w	r2, r3, #32
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	3301      	adds	r3, #1
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4a09      	ldr	r2, [pc, #36]	; (8004b90 <USB_FlushTxFifo+0x48>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d901      	bls.n	8004b74 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e006      	b.n	8004b82 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b20      	cmp	r3, #32
 8004b7e:	d0f0      	beq.n	8004b62 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	00030d40 	.word	0x00030d40

08004b94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2210      	movs	r2, #16
 8004ba4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4a09      	ldr	r2, [pc, #36]	; (8004bd4 <USB_FlushRxFifo+0x40>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d901      	bls.n	8004bb8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e006      	b.n	8004bc6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	f003 0310 	and.w	r3, r3, #16
 8004bc0:	2b10      	cmp	r3, #16
 8004bc2:	d0f0      	beq.n	8004ba6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	00030d40 	.word	0x00030d40

08004bd8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	460b      	mov	r3, r1
 8004be2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	78fb      	ldrb	r3, [r7, #3]
 8004bf2:	68f9      	ldr	r1, [r7, #12]
 8004bf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b087      	sub	sp, #28
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 0306 	and.w	r3, r3, #6
 8004c22:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d102      	bne.n	8004c30 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	75fb      	strb	r3, [r7, #23]
 8004c2e:	e00a      	b.n	8004c46 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d002      	beq.n	8004c3c <USB_GetDevSpeed+0x32>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b06      	cmp	r3, #6
 8004c3a:	d102      	bne.n	8004c42 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	75fb      	strb	r3, [r7, #23]
 8004c40:	e001      	b.n	8004c46 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004c42:	230f      	movs	r3, #15
 8004c44:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	371c      	adds	r7, #28
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	785b      	ldrb	r3, [r3, #1]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d13a      	bne.n	8004ce6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c76:	69da      	ldr	r2, [r3, #28]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	f003 030f 	and.w	r3, r3, #15
 8004c80:	2101      	movs	r1, #1
 8004c82:	fa01 f303 	lsl.w	r3, r1, r3
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	68f9      	ldr	r1, [r7, #12]
 8004c8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d155      	bne.n	8004d54 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	78db      	ldrb	r3, [r3, #3]
 8004cc2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004cc4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	059b      	lsls	r3, r3, #22
 8004cca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	0151      	lsls	r1, r2, #5
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	440a      	add	r2, r1
 8004cd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce2:	6013      	str	r3, [r2, #0]
 8004ce4:	e036      	b.n	8004d54 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cec:	69da      	ldr	r2, [r3, #28]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cfc:	041b      	lsls	r3, r3, #16
 8004cfe:	68f9      	ldr	r1, [r7, #12]
 8004d00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d04:	4313      	orrs	r3, r2
 8004d06:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d11a      	bne.n	8004d54 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	78db      	ldrb	r3, [r3, #3]
 8004d38:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d3a:	430b      	orrs	r3, r1
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	0151      	lsls	r1, r2, #5
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	440a      	add	r2, r1
 8004d46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d52:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
	...

08004d64 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	785b      	ldrb	r3, [r3, #1]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d161      	bne.n	8004e44 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d96:	d11f      	bne.n	8004dd8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	0151      	lsls	r1, r2, #5
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	440a      	add	r2, r1
 8004dae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004db2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004db6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	0151      	lsls	r1, r2, #5
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	440a      	add	r2, r1
 8004dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	f003 030f 	and.w	r3, r3, #15
 8004de8:	2101      	movs	r1, #1
 8004dea:	fa01 f303 	lsl.w	r3, r1, r3
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	43db      	mvns	r3, r3
 8004df2:	68f9      	ldr	r1, [r7, #12]
 8004df4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004df8:	4013      	ands	r3, r2
 8004dfa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e02:	69da      	ldr	r2, [r3, #28]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	43db      	mvns	r3, r3
 8004e16:	68f9      	ldr	r1, [r7, #12]
 8004e18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	0159      	lsls	r1, r3, #5
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	440b      	add	r3, r1
 8004e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	4b35      	ldr	r3, [pc, #212]	; (8004f14 <USB_DeactivateEndpoint+0x1b0>)
 8004e3e:	4013      	ands	r3, r2
 8004e40:	600b      	str	r3, [r1, #0]
 8004e42:	e060      	b.n	8004f06 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e5a:	d11f      	bne.n	8004e9c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	0151      	lsls	r1, r2, #5
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	440a      	add	r2, r1
 8004e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e7a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	0151      	lsls	r1, r2, #5
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	440a      	add	r2, r1
 8004e92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	f003 030f 	and.w	r3, r3, #15
 8004eac:	2101      	movs	r1, #1
 8004eae:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb2:	041b      	lsls	r3, r3, #16
 8004eb4:	43db      	mvns	r3, r3
 8004eb6:	68f9      	ldr	r1, [r7, #12]
 8004eb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec6:	69da      	ldr	r2, [r3, #28]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	f003 030f 	and.w	r3, r3, #15
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed6:	041b      	lsls	r3, r3, #16
 8004ed8:	43db      	mvns	r3, r3
 8004eda:	68f9      	ldr	r1, [r7, #12]
 8004edc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	0159      	lsls	r1, r3, #5
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	440b      	add	r3, r1
 8004efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efe:	4619      	mov	r1, r3
 8004f00:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <USB_DeactivateEndpoint+0x1b4>)
 8004f02:	4013      	ands	r3, r2
 8004f04:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3714      	adds	r7, #20
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	ec337800 	.word	0xec337800
 8004f18:	eff37800 	.word	0xeff37800

08004f1c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08a      	sub	sp, #40	; 0x28
 8004f20:	af02      	add	r7, sp, #8
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	4613      	mov	r3, r2
 8004f28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	785b      	ldrb	r3, [r3, #1]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	f040 815c 	bne.w	80051f6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d132      	bne.n	8004fac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	0151      	lsls	r1, r2, #5
 8004f58:	69fa      	ldr	r2, [r7, #28]
 8004f5a:	440a      	add	r2, r1
 8004f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	0151      	lsls	r1, r2, #5
 8004f7c:	69fa      	ldr	r2, [r7, #28]
 8004f7e:	440a      	add	r2, r1
 8004f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	0151      	lsls	r1, r2, #5
 8004f9c:	69fa      	ldr	r2, [r7, #28]
 8004f9e:	440a      	add	r2, r1
 8004fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fa4:	0cdb      	lsrs	r3, r3, #19
 8004fa6:	04db      	lsls	r3, r3, #19
 8004fa8:	6113      	str	r3, [r2, #16]
 8004faa:	e074      	b.n	8005096 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	0151      	lsls	r1, r2, #5
 8004fbe:	69fa      	ldr	r2, [r7, #28]
 8004fc0:	440a      	add	r2, r1
 8004fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc6:	0cdb      	lsrs	r3, r3, #19
 8004fc8:	04db      	lsls	r3, r3, #19
 8004fca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	0151      	lsls	r1, r2, #5
 8004fde:	69fa      	ldr	r2, [r7, #28]
 8004fe0:	440a      	add	r2, r1
 8004fe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fe6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffc:	691a      	ldr	r2, [r3, #16]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	6959      	ldr	r1, [r3, #20]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	440b      	add	r3, r1
 8005008:	1e59      	subs	r1, r3, #1
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005012:	04d9      	lsls	r1, r3, #19
 8005014:	4b9d      	ldr	r3, [pc, #628]	; (800528c <USB_EPStartXfer+0x370>)
 8005016:	400b      	ands	r3, r1
 8005018:	69b9      	ldr	r1, [r7, #24]
 800501a:	0148      	lsls	r0, r1, #5
 800501c:	69f9      	ldr	r1, [r7, #28]
 800501e:	4401      	add	r1, r0
 8005020:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005024:	4313      	orrs	r3, r2
 8005026:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005034:	691a      	ldr	r2, [r3, #16]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800503e:	69b9      	ldr	r1, [r7, #24]
 8005040:	0148      	lsls	r0, r1, #5
 8005042:	69f9      	ldr	r1, [r7, #28]
 8005044:	4401      	add	r1, r0
 8005046:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800504a:	4313      	orrs	r3, r2
 800504c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	78db      	ldrb	r3, [r3, #3]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d11f      	bne.n	8005096 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	4413      	add	r3, r2
 800505e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	0151      	lsls	r1, r2, #5
 8005068:	69fa      	ldr	r2, [r7, #28]
 800506a:	440a      	add	r2, r1
 800506c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005070:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005074:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	4413      	add	r3, r2
 800507e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	0151      	lsls	r1, r2, #5
 8005088:	69fa      	ldr	r2, [r7, #28]
 800508a:	440a      	add	r2, r1
 800508c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005090:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005094:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005096:	79fb      	ldrb	r3, [r7, #7]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d14b      	bne.n	8005134 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d009      	beq.n	80050b8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b0:	461a      	mov	r2, r3
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	78db      	ldrb	r3, [r3, #3]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d128      	bne.n	8005112 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d110      	bne.n	80050f2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	0151      	lsls	r1, r2, #5
 80050e2:	69fa      	ldr	r2, [r7, #28]
 80050e4:	440a      	add	r2, r1
 80050e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050ee:	6013      	str	r3, [r2, #0]
 80050f0:	e00f      	b.n	8005112 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	0151      	lsls	r1, r2, #5
 8005104:	69fa      	ldr	r2, [r7, #28]
 8005106:	440a      	add	r2, r1
 8005108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800510c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005110:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	0151      	lsls	r1, r2, #5
 8005124:	69fa      	ldr	r2, [r7, #28]
 8005126:	440a      	add	r2, r1
 8005128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800512c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	e12f      	b.n	8005394 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	0151      	lsls	r1, r2, #5
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	440a      	add	r2, r1
 800514a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800514e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005152:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	78db      	ldrb	r3, [r3, #3]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d015      	beq.n	8005188 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 8117 	beq.w	8005394 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	f003 030f 	and.w	r3, r3, #15
 8005176:	2101      	movs	r1, #1
 8005178:	fa01 f303 	lsl.w	r3, r1, r3
 800517c:	69f9      	ldr	r1, [r7, #28]
 800517e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005182:	4313      	orrs	r3, r2
 8005184:	634b      	str	r3, [r1, #52]	; 0x34
 8005186:	e105      	b.n	8005394 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005194:	2b00      	cmp	r3, #0
 8005196:	d110      	bne.n	80051ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	0151      	lsls	r1, r2, #5
 80051aa:	69fa      	ldr	r2, [r7, #28]
 80051ac:	440a      	add	r2, r1
 80051ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051b6:	6013      	str	r3, [r2, #0]
 80051b8:	e00f      	b.n	80051da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	0151      	lsls	r1, r2, #5
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	440a      	add	r2, r1
 80051d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	68d9      	ldr	r1, [r3, #12]
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	781a      	ldrb	r2, [r3, #0]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	b298      	uxth	r0, r3
 80051e8:	79fb      	ldrb	r3, [r7, #7]
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	4603      	mov	r3, r0
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 fa2b 	bl	800564a <USB_WritePacket>
 80051f4:	e0ce      	b.n	8005394 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	0151      	lsls	r1, r2, #5
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	440a      	add	r2, r1
 800520c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005210:	0cdb      	lsrs	r3, r3, #19
 8005212:	04db      	lsls	r3, r3, #19
 8005214:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	0151      	lsls	r1, r2, #5
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	440a      	add	r2, r1
 800522c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005230:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005234:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005238:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d126      	bne.n	8005290 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524e:	691a      	ldr	r2, [r3, #16]
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005258:	69b9      	ldr	r1, [r7, #24]
 800525a:	0148      	lsls	r0, r1, #5
 800525c:	69f9      	ldr	r1, [r7, #28]
 800525e:	4401      	add	r1, r0
 8005260:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005264:	4313      	orrs	r3, r2
 8005266:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	0151      	lsls	r1, r2, #5
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	440a      	add	r2, r1
 800527e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005282:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005286:	6113      	str	r3, [r2, #16]
 8005288:	e036      	b.n	80052f8 <USB_EPStartXfer+0x3dc>
 800528a:	bf00      	nop
 800528c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	695a      	ldr	r2, [r3, #20]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	4413      	add	r3, r2
 800529a:	1e5a      	subs	r2, r3, #1
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	8afb      	ldrh	r3, [r7, #22]
 80052b6:	04d9      	lsls	r1, r3, #19
 80052b8:	4b39      	ldr	r3, [pc, #228]	; (80053a0 <USB_EPStartXfer+0x484>)
 80052ba:	400b      	ands	r3, r1
 80052bc:	69b9      	ldr	r1, [r7, #24]
 80052be:	0148      	lsls	r0, r1, #5
 80052c0:	69f9      	ldr	r1, [r7, #28]
 80052c2:	4401      	add	r1, r0
 80052c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80052c8:	4313      	orrs	r3, r2
 80052ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d8:	691a      	ldr	r2, [r3, #16]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	8af9      	ldrh	r1, [r7, #22]
 80052e0:	fb01 f303 	mul.w	r3, r1, r3
 80052e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052e8:	69b9      	ldr	r1, [r7, #24]
 80052ea:	0148      	lsls	r0, r1, #5
 80052ec:	69f9      	ldr	r1, [r7, #28]
 80052ee:	4401      	add	r1, r0
 80052f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80052f4:	4313      	orrs	r3, r2
 80052f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80052f8:	79fb      	ldrb	r3, [r7, #7]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d10d      	bne.n	800531a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	68d9      	ldr	r1, [r3, #12]
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	4413      	add	r3, r2
 8005312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005316:	460a      	mov	r2, r1
 8005318:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	78db      	ldrb	r3, [r3, #3]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d128      	bne.n	8005374 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800532e:	2b00      	cmp	r3, #0
 8005330:	d110      	bne.n	8005354 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	4413      	add	r3, r2
 800533a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	0151      	lsls	r1, r2, #5
 8005344:	69fa      	ldr	r2, [r7, #28]
 8005346:	440a      	add	r2, r1
 8005348:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800534c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	e00f      	b.n	8005374 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	0151      	lsls	r1, r2, #5
 8005366:	69fa      	ldr	r2, [r7, #28]
 8005368:	440a      	add	r2, r1
 800536a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800536e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005372:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	0151      	lsls	r1, r2, #5
 8005386:	69fa      	ldr	r2, [r7, #28]
 8005388:	440a      	add	r2, r1
 800538a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800538e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005392:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3720      	adds	r7, #32
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	1ff80000 	.word	0x1ff80000

080053a4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b087      	sub	sp, #28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	4613      	mov	r3, r2
 80053b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	785b      	ldrb	r3, [r3, #1]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	f040 80cd 	bne.w	8005560 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d132      	bne.n	8005434 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	0151      	lsls	r1, r2, #5
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	440a      	add	r2, r1
 80053e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	0151      	lsls	r1, r2, #5
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	440a      	add	r2, r1
 8005408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800540c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005410:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	0151      	lsls	r1, r2, #5
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	440a      	add	r2, r1
 8005428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800542c:	0cdb      	lsrs	r3, r3, #19
 800542e:	04db      	lsls	r3, r3, #19
 8005430:	6113      	str	r3, [r2, #16]
 8005432:	e04e      	b.n	80054d2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	0151      	lsls	r1, r2, #5
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	440a      	add	r2, r1
 800544a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800544e:	0cdb      	lsrs	r3, r3, #19
 8005450:	04db      	lsls	r3, r3, #19
 8005452:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	0151      	lsls	r1, r2, #5
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	440a      	add	r2, r1
 800546a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800546e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005472:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005476:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	695a      	ldr	r2, [r3, #20]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	429a      	cmp	r2, r3
 8005482:	d903      	bls.n	800548c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	4413      	add	r3, r2
 8005494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	0151      	lsls	r1, r2, #5
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	440a      	add	r2, r1
 80054a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b8:	691a      	ldr	r2, [r3, #16]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054c2:	6939      	ldr	r1, [r7, #16]
 80054c4:	0148      	lsls	r0, r1, #5
 80054c6:	6979      	ldr	r1, [r7, #20]
 80054c8:	4401      	add	r1, r0
 80054ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80054ce:	4313      	orrs	r3, r2
 80054d0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80054d2:	79fb      	ldrb	r3, [r7, #7]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d11e      	bne.n	8005516 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d009      	beq.n	80054f4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ec:	461a      	mov	r2, r3
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	0151      	lsls	r1, r2, #5
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	440a      	add	r2, r1
 800550a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800550e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005512:	6013      	str	r3, [r2, #0]
 8005514:	e092      	b.n	800563c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	4413      	add	r3, r2
 800551e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	0151      	lsls	r1, r2, #5
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	440a      	add	r2, r1
 800552c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005530:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005534:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d07e      	beq.n	800563c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	f003 030f 	and.w	r3, r3, #15
 800554e:	2101      	movs	r1, #1
 8005550:	fa01 f303 	lsl.w	r3, r1, r3
 8005554:	6979      	ldr	r1, [r7, #20]
 8005556:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800555a:	4313      	orrs	r3, r2
 800555c:	634b      	str	r3, [r1, #52]	; 0x34
 800555e:	e06d      	b.n	800563c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	4413      	add	r3, r2
 8005568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	0151      	lsls	r1, r2, #5
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	440a      	add	r2, r1
 8005576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800557a:	0cdb      	lsrs	r3, r3, #19
 800557c:	04db      	lsls	r3, r3, #19
 800557e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	0151      	lsls	r1, r2, #5
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	440a      	add	r2, r1
 8005596:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800559a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800559e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055a2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	0151      	lsls	r1, r2, #5
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	440a      	add	r2, r1
 80055ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e0:	691a      	ldr	r2, [r3, #16]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ea:	6939      	ldr	r1, [r7, #16]
 80055ec:	0148      	lsls	r0, r1, #5
 80055ee:	6979      	ldr	r1, [r7, #20]
 80055f0:	4401      	add	r1, r0
 80055f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055f6:	4313      	orrs	r3, r2
 80055f8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80055fa:	79fb      	ldrb	r3, [r7, #7]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d10d      	bne.n	800561c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d009      	beq.n	800561c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	68d9      	ldr	r1, [r3, #12]
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005618:	460a      	mov	r2, r1
 800561a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	4413      	add	r3, r2
 8005624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	0151      	lsls	r1, r2, #5
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	440a      	add	r2, r1
 8005632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005636:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800563a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800564a:	b480      	push	{r7}
 800564c:	b089      	sub	sp, #36	; 0x24
 800564e:	af00      	add	r7, sp, #0
 8005650:	60f8      	str	r0, [r7, #12]
 8005652:	60b9      	str	r1, [r7, #8]
 8005654:	4611      	mov	r1, r2
 8005656:	461a      	mov	r2, r3
 8005658:	460b      	mov	r3, r1
 800565a:	71fb      	strb	r3, [r7, #7]
 800565c:	4613      	mov	r3, r2
 800565e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005668:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800566c:	2b00      	cmp	r3, #0
 800566e:	d11a      	bne.n	80056a6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005670:	88bb      	ldrh	r3, [r7, #4]
 8005672:	3303      	adds	r3, #3
 8005674:	089b      	lsrs	r3, r3, #2
 8005676:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005678:	2300      	movs	r3, #0
 800567a:	61bb      	str	r3, [r7, #24]
 800567c:	e00f      	b.n	800569e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800567e:	79fb      	ldrb	r3, [r7, #7]
 8005680:	031a      	lsls	r2, r3, #12
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	4413      	add	r3, r2
 8005686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800568a:	461a      	mov	r2, r3
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	3304      	adds	r3, #4
 8005696:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	3301      	adds	r3, #1
 800569c:	61bb      	str	r3, [r7, #24]
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d3eb      	bcc.n	800567e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3724      	adds	r7, #36	; 0x24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b089      	sub	sp, #36	; 0x24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	4613      	mov	r3, r2
 80056c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80056ca:	88fb      	ldrh	r3, [r7, #6]
 80056cc:	3303      	adds	r3, #3
 80056ce:	089b      	lsrs	r3, r3, #2
 80056d0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80056d2:	2300      	movs	r3, #0
 80056d4:	61bb      	str	r3, [r7, #24]
 80056d6:	e00b      	b.n	80056f0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	3304      	adds	r3, #4
 80056e8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	3301      	adds	r3, #1
 80056ee:	61bb      	str	r3, [r7, #24]
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d3ef      	bcc.n	80056d8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80056f8:	69fb      	ldr	r3, [r7, #28]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3724      	adds	r7, #36	; 0x24
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005706:	b480      	push	{r7}
 8005708:	b085      	sub	sp, #20
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	785b      	ldrb	r3, [r3, #1]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d12c      	bne.n	800577c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4413      	add	r3, r2
 800572a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	db12      	blt.n	800575a <USB_EPSetStall+0x54>
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00f      	beq.n	800575a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	0151      	lsls	r1, r2, #5
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	440a      	add	r2, r1
 8005750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005754:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005758:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4413      	add	r3, r2
 8005762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	0151      	lsls	r1, r2, #5
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	440a      	add	r2, r1
 8005770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005774:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005778:	6013      	str	r3, [r2, #0]
 800577a:	e02b      	b.n	80057d4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	db12      	blt.n	80057b4 <USB_EPSetStall+0xae>
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00f      	beq.n	80057b4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	0151      	lsls	r1, r2, #5
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	440a      	add	r2, r1
 80057aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057b2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	0151      	lsls	r1, r2, #5
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	440a      	add	r2, r1
 80057ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b085      	sub	sp, #20
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	785b      	ldrb	r3, [r3, #1]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d128      	bne.n	8005850 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	0151      	lsls	r1, r2, #5
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	440a      	add	r2, r1
 8005814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005818:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800581c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	78db      	ldrb	r3, [r3, #3]
 8005822:	2b03      	cmp	r3, #3
 8005824:	d003      	beq.n	800582e <USB_EPClearStall+0x4c>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	78db      	ldrb	r3, [r3, #3]
 800582a:	2b02      	cmp	r3, #2
 800582c:	d138      	bne.n	80058a0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	0151      	lsls	r1, r2, #5
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	440a      	add	r2, r1
 8005844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	e027      	b.n	80058a0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	0151      	lsls	r1, r2, #5
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	440a      	add	r2, r1
 8005866:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800586a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800586e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	78db      	ldrb	r3, [r3, #3]
 8005874:	2b03      	cmp	r3, #3
 8005876:	d003      	beq.n	8005880 <USB_EPClearStall+0x9e>
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	78db      	ldrb	r3, [r3, #3]
 800587c:	2b02      	cmp	r3, #2
 800587e:	d10f      	bne.n	80058a0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	0151      	lsls	r1, r2, #5
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	440a      	add	r2, r1
 8005896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800589a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800589e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b085      	sub	sp, #20
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	460b      	mov	r3, r1
 80058b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058cc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80058d0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	78fb      	ldrb	r3, [r7, #3]
 80058dc:	011b      	lsls	r3, r3, #4
 80058de:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80058e2:	68f9      	ldr	r1, [r7, #12]
 80058e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058e8:	4313      	orrs	r3, r2
 80058ea:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b085      	sub	sp, #20
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005914:	f023 0303 	bic.w	r3, r3, #3
 8005918:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005928:	f023 0302 	bic.w	r3, r3, #2
 800592c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005956:	f023 0303 	bic.w	r3, r3, #3
 800595a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800596a:	f043 0302 	orr.w	r3, r3, #2
 800596e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800597e:	b480      	push	{r7}
 8005980:	b085      	sub	sp, #20
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4013      	ands	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005996:	68fb      	ldr	r3, [r7, #12]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	4013      	ands	r3, r2
 80059c6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	0c1b      	lsrs	r3, r3, #16
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	4013      	ands	r3, r2
 80059fa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	b29b      	uxth	r3, r3
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005a1c:	78fb      	ldrb	r3, [r7, #3]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	4013      	ands	r3, r2
 8005a38:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a3a:	68bb      	ldr	r3, [r7, #8]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	460b      	mov	r3, r1
 8005a52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a6a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005a6c:	78fb      	ldrb	r3, [r7, #3]
 8005a6e:	f003 030f 	and.w	r3, r3, #15
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	fa22 f303 	lsr.w	r3, r2, r3
 8005a78:	01db      	lsls	r3, r3, #7
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005a82:	78fb      	ldrb	r3, [r7, #3]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	4013      	ands	r3, r2
 8005a94:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a96:	68bb      	ldr	r3, [r7, #8]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	371c      	adds	r7, #28
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	f003 0301 	and.w	r3, r3, #1
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ada:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005ade:	f023 0307 	bic.w	r3, r3, #7
 8005ae2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
	...

08005b08 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	460b      	mov	r3, r1
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	333c      	adds	r3, #60	; 0x3c
 8005b1e:	3304      	adds	r3, #4
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	4a26      	ldr	r2, [pc, #152]	; (8005bc0 <USB_EP0_OutStart+0xb8>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d90a      	bls.n	8005b42 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b3c:	d101      	bne.n	8005b42 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e037      	b.n	8005bb2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b48:	461a      	mov	r2, r3
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b70:	f043 0318 	orr.w	r3, r3, #24
 8005b74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b84:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005b88:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005b8a:	7afb      	ldrb	r3, [r7, #11]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d10f      	bne.n	8005bb0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b96:	461a      	mov	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005baa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005bae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	371c      	adds	r7, #28
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	4f54300a 	.word	0x4f54300a

08005bc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4a13      	ldr	r2, [pc, #76]	; (8005c28 <USB_CoreReset+0x64>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d901      	bls.n	8005be2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e01b      	b.n	8005c1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	daf2      	bge.n	8005bd0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005bea:	2300      	movs	r3, #0
 8005bec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f043 0201 	orr.w	r2, r3, #1
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4a09      	ldr	r2, [pc, #36]	; (8005c28 <USB_CoreReset+0x64>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d901      	bls.n	8005c0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e006      	b.n	8005c1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d0f0      	beq.n	8005bfa <USB_CoreReset+0x36>

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	00030d40 	.word	0x00030d40

08005c2c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	460b      	mov	r3, r1
 8005c36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005c38:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005c3c:	f004 ffb2 	bl	800aba4 <USBD_static_malloc>
 8005c40:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d105      	bne.n	8005c54 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005c50:	2302      	movs	r3, #2
 8005c52:	e066      	b.n	8005d22 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	7c1b      	ldrb	r3, [r3, #16]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d119      	bne.n	8005c98 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c68:	2202      	movs	r2, #2
 8005c6a:	2181      	movs	r1, #129	; 0x81
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f004 fe76 	bl	800a95e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005c78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	2101      	movs	r1, #1
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f004 fe6c 	bl	800a95e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2210      	movs	r2, #16
 8005c92:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005c96:	e016      	b.n	8005cc6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005c98:	2340      	movs	r3, #64	; 0x40
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	2181      	movs	r1, #129	; 0x81
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f004 fe5d 	bl	800a95e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005caa:	2340      	movs	r3, #64	; 0x40
 8005cac:	2202      	movs	r2, #2
 8005cae:	2101      	movs	r1, #1
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f004 fe54 	bl	800a95e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2210      	movs	r2, #16
 8005cc2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005cc6:	2308      	movs	r3, #8
 8005cc8:	2203      	movs	r2, #3
 8005cca:	2182      	movs	r1, #130	; 0x82
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f004 fe46 	bl	800a95e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	7c1b      	ldrb	r3, [r3, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d109      	bne.n	8005d10 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d06:	2101      	movs	r1, #1
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f004 ff17 	bl	800ab3c <USBD_LL_PrepareReceive>
 8005d0e:	e007      	b.n	8005d20 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d16:	2340      	movs	r3, #64	; 0x40
 8005d18:	2101      	movs	r1, #1
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f004 ff0e 	bl	800ab3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b082      	sub	sp, #8
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
 8005d32:	460b      	mov	r3, r1
 8005d34:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005d36:	2181      	movs	r1, #129	; 0x81
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f004 fe36 	bl	800a9aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005d44:	2101      	movs	r1, #1
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f004 fe2f 	bl	800a9aa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005d54:	2182      	movs	r1, #130	; 0x82
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f004 fe27 	bl	800a9aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00e      	beq.n	8005d94 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d86:	4618      	mov	r0, r3
 8005d88:	f004 ff1a 	bl	800abc0 <USBD_static_free>
    pdev->pClassData = NULL;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
	...

08005da0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005db0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e0af      	b.n	8005f28 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d03f      	beq.n	8005e54 <USBD_CDC_Setup+0xb4>
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	f040 809f 	bne.w	8005f18 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	88db      	ldrh	r3, [r3, #6]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d02e      	beq.n	8005e40 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	b25b      	sxtb	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	da16      	bge.n	8005e1a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005df8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	88d2      	ldrh	r2, [r2, #6]
 8005dfe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	88db      	ldrh	r3, [r3, #6]
 8005e04:	2b07      	cmp	r3, #7
 8005e06:	bf28      	it	cs
 8005e08:	2307      	movcs	r3, #7
 8005e0a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	89fa      	ldrh	r2, [r7, #14]
 8005e10:	4619      	mov	r1, r3
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f001 fb19 	bl	800744a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005e18:	e085      	b.n	8005f26 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	785a      	ldrb	r2, [r3, #1]
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	88db      	ldrh	r3, [r3, #6]
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005e30:	6939      	ldr	r1, [r7, #16]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	88db      	ldrh	r3, [r3, #6]
 8005e36:	461a      	mov	r2, r3
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f001 fb32 	bl	80074a2 <USBD_CtlPrepareRx>
      break;
 8005e3e:	e072      	b.n	8005f26 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	7850      	ldrb	r0, [r2, #1]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	6839      	ldr	r1, [r7, #0]
 8005e50:	4798      	blx	r3
      break;
 8005e52:	e068      	b.n	8005f26 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	785b      	ldrb	r3, [r3, #1]
 8005e58:	2b0b      	cmp	r3, #11
 8005e5a:	d852      	bhi.n	8005f02 <USBD_CDC_Setup+0x162>
 8005e5c:	a201      	add	r2, pc, #4	; (adr r2, 8005e64 <USBD_CDC_Setup+0xc4>)
 8005e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e62:	bf00      	nop
 8005e64:	08005e95 	.word	0x08005e95
 8005e68:	08005f11 	.word	0x08005f11
 8005e6c:	08005f03 	.word	0x08005f03
 8005e70:	08005f03 	.word	0x08005f03
 8005e74:	08005f03 	.word	0x08005f03
 8005e78:	08005f03 	.word	0x08005f03
 8005e7c:	08005f03 	.word	0x08005f03
 8005e80:	08005f03 	.word	0x08005f03
 8005e84:	08005f03 	.word	0x08005f03
 8005e88:	08005f03 	.word	0x08005f03
 8005e8c:	08005ebf 	.word	0x08005ebf
 8005e90:	08005ee9 	.word	0x08005ee9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b03      	cmp	r3, #3
 8005e9e:	d107      	bne.n	8005eb0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005ea0:	f107 030a 	add.w	r3, r7, #10
 8005ea4:	2202      	movs	r2, #2
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f001 face 	bl	800744a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005eae:	e032      	b.n	8005f16 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005eb0:	6839      	ldr	r1, [r7, #0]
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f001 fa58 	bl	8007368 <USBD_CtlError>
            ret = USBD_FAIL;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	75fb      	strb	r3, [r7, #23]
          break;
 8005ebc:	e02b      	b.n	8005f16 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b03      	cmp	r3, #3
 8005ec8:	d107      	bne.n	8005eda <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005eca:	f107 030d 	add.w	r3, r7, #13
 8005ece:	2201      	movs	r2, #1
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f001 fab9 	bl	800744a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ed8:	e01d      	b.n	8005f16 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005eda:	6839      	ldr	r1, [r7, #0]
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f001 fa43 	bl	8007368 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ee6:	e016      	b.n	8005f16 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b03      	cmp	r3, #3
 8005ef2:	d00f      	beq.n	8005f14 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005ef4:	6839      	ldr	r1, [r7, #0]
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f001 fa36 	bl	8007368 <USBD_CtlError>
            ret = USBD_FAIL;
 8005efc:	2303      	movs	r3, #3
 8005efe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005f00:	e008      	b.n	8005f14 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005f02:	6839      	ldr	r1, [r7, #0]
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f001 fa2f 	bl	8007368 <USBD_CtlError>
          ret = USBD_FAIL;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	75fb      	strb	r3, [r7, #23]
          break;
 8005f0e:	e002      	b.n	8005f16 <USBD_CDC_Setup+0x176>
          break;
 8005f10:	bf00      	nop
 8005f12:	e008      	b.n	8005f26 <USBD_CDC_Setup+0x186>
          break;
 8005f14:	bf00      	nop
      }
      break;
 8005f16:	e006      	b.n	8005f26 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005f18:	6839      	ldr	r1, [r7, #0]
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f001 fa24 	bl	8007368 <USBD_CtlError>
      ret = USBD_FAIL;
 8005f20:	2303      	movs	r3, #3
 8005f22:	75fb      	strb	r3, [r7, #23]
      break;
 8005f24:	bf00      	nop
  }

  return (uint8_t)ret;
 8005f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3718      	adds	r7, #24
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	460b      	mov	r3, r1
 8005f3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005f42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e04f      	b.n	8005ff2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f58:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005f5a:	78fa      	ldrb	r2, [r7, #3]
 8005f5c:	6879      	ldr	r1, [r7, #4]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	440b      	add	r3, r1
 8005f68:	3318      	adds	r3, #24
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d029      	beq.n	8005fc4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005f70:	78fa      	ldrb	r2, [r7, #3]
 8005f72:	6879      	ldr	r1, [r7, #4]
 8005f74:	4613      	mov	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	440b      	add	r3, r1
 8005f7e:	3318      	adds	r3, #24
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	78f9      	ldrb	r1, [r7, #3]
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	460b      	mov	r3, r1
 8005f88:	00db      	lsls	r3, r3, #3
 8005f8a:	1a5b      	subs	r3, r3, r1
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4403      	add	r3, r0
 8005f90:	3344      	adds	r3, #68	; 0x44
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	fbb2 f1f3 	udiv	r1, r2, r3
 8005f98:	fb03 f301 	mul.w	r3, r3, r1
 8005f9c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d110      	bne.n	8005fc4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005fa2:	78fa      	ldrb	r2, [r7, #3]
 8005fa4:	6879      	ldr	r1, [r7, #4]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	440b      	add	r3, r1
 8005fb0:	3318      	adds	r3, #24
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005fb6:	78f9      	ldrb	r1, [r7, #3]
 8005fb8:	2300      	movs	r3, #0
 8005fba:	2200      	movs	r2, #0
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f004 fd9c 	bl	800aafa <USBD_LL_Transmit>
 8005fc2:	e015      	b.n	8005ff0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00b      	beq.n	8005ff0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005fec:	78fa      	ldrb	r2, [r7, #3]
 8005fee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
 8006002:	460b      	mov	r3, r1
 8006004:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800600c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006018:	2303      	movs	r3, #3
 800601a:	e015      	b.n	8006048 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800601c:	78fb      	ldrb	r3, [r7, #3]
 800601e:	4619      	mov	r1, r3
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f004 fdac 	bl	800ab7e <USBD_LL_GetRxDataSize>
 8006026:	4602      	mov	r2, r0
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006042:	4611      	mov	r1, r2
 8006044:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800605e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006066:	2303      	movs	r3, #3
 8006068:	e01b      	b.n	80060a2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d015      	beq.n	80060a0 <USBD_CDC_EP0_RxReady+0x50>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800607a:	2bff      	cmp	r3, #255	; 0xff
 800607c:	d010      	beq.n	80060a0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800608c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006094:	b292      	uxth	r2, r2
 8006096:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	22ff      	movs	r2, #255	; 0xff
 800609c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2243      	movs	r2, #67	; 0x43
 80060b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80060ba:	4b03      	ldr	r3, [pc, #12]	; (80060c8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80060bc:	4618      	mov	r0, r3
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr
 80060c8:	20000138 	.word	0x20000138

080060cc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2243      	movs	r2, #67	; 0x43
 80060d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80060da:	4b03      	ldr	r3, [pc, #12]	; (80060e8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80060dc:	4618      	mov	r0, r3
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	200000f4 	.word	0x200000f4

080060ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2243      	movs	r2, #67	; 0x43
 80060f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80060fa:	4b03      	ldr	r3, [pc, #12]	; (8006108 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	2000017c 	.word	0x2000017c

0800610c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	220a      	movs	r2, #10
 8006118:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800611a:	4b03      	ldr	r3, [pc, #12]	; (8006128 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800611c:	4618      	mov	r0, r3
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	200000b0 	.word	0x200000b0

0800612c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800613c:	2303      	movs	r3, #3
 800613e:	e004      	b.n	800614a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006156:	b480      	push	{r7}
 8006158:	b087      	sub	sp, #28
 800615a:	af00      	add	r7, sp, #0
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006168:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006170:	2303      	movs	r3, #3
 8006172:	e008      	b.n	8006186 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	371c      	adds	r7, #28
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006192:	b480      	push	{r7}
 8006194:	b085      	sub	sp, #20
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061a2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e004      	b.n	80061b8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061d2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80061d4:	2301      	movs	r3, #1
 80061d6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e01a      	b.n	800621c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d114      	bne.n	800621a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800620e:	2181      	movs	r1, #129	; 0x81
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f004 fc72 	bl	800aafa <USBD_LL_Transmit>

    ret = USBD_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800621a:	7bfb      	ldrb	r3, [r7, #15]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006232:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800623e:	2303      	movs	r3, #3
 8006240:	e016      	b.n	8006270 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	7c1b      	ldrb	r3, [r3, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d109      	bne.n	800625e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006250:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006254:	2101      	movs	r1, #1
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f004 fc70 	bl	800ab3c <USBD_LL_PrepareReceive>
 800625c:	e007      	b.n	800626e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006264:	2340      	movs	r3, #64	; 0x40
 8006266:	2101      	movs	r1, #1
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f004 fc67 	bl	800ab3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	4613      	mov	r3, r2
 8006284:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800628c:	2303      	movs	r3, #3
 800628e:	e01f      	b.n	80062d0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	79fa      	ldrb	r2, [r7, #7]
 80062c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f004 fae3 	bl	800a890 <USBD_LL_Init>
 80062ca:	4603      	mov	r3, r0
 80062cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80062ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3718      	adds	r7, #24
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062e2:	2300      	movs	r3, #0
 80062e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e016      	b.n	800631e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00b      	beq.n	800631c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800630a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630c:	f107 020e 	add.w	r2, r7, #14
 8006310:	4610      	mov	r0, r2
 8006312:	4798      	blx	r3
 8006314:	4602      	mov	r2, r0
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b082      	sub	sp, #8
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f004 fafa 	bl	800a928 <USBD_LL_Start>
 8006334:	4603      	mov	r3, r0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800633e:	b480      	push	{r7}
 8006340:	b083      	sub	sp, #12
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	460b      	mov	r3, r1
 800635e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006360:	2303      	movs	r3, #3
 8006362:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800636a:	2b00      	cmp	r3, #0
 800636c:	d009      	beq.n	8006382 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	78fa      	ldrb	r2, [r7, #3]
 8006378:	4611      	mov	r1, r2
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	4798      	blx	r3
 800637e:	4603      	mov	r3, r0
 8006380:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006382:	7bfb      	ldrb	r3, [r7, #15]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	460b      	mov	r3, r1
 8006396:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d007      	beq.n	80063b2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	78fa      	ldrb	r2, [r7, #3]
 80063ac:	4611      	mov	r1, r2
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	4798      	blx	r3
  }

  return USBD_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3708      	adds	r7, #8
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063cc:	6839      	ldr	r1, [r7, #0]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 ff90 	bl	80072f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80063e2:	461a      	mov	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063f0:	f003 031f 	and.w	r3, r3, #31
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d01a      	beq.n	800642e <USBD_LL_SetupStage+0x72>
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d822      	bhi.n	8006442 <USBD_LL_SetupStage+0x86>
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <USBD_LL_SetupStage+0x4a>
 8006400:	2b01      	cmp	r3, #1
 8006402:	d00a      	beq.n	800641a <USBD_LL_SetupStage+0x5e>
 8006404:	e01d      	b.n	8006442 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800640c:	4619      	mov	r1, r3
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fa62 	bl	80068d8 <USBD_StdDevReq>
 8006414:	4603      	mov	r3, r0
 8006416:	73fb      	strb	r3, [r7, #15]
      break;
 8006418:	e020      	b.n	800645c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006420:	4619      	mov	r1, r3
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 fac6 	bl	80069b4 <USBD_StdItfReq>
 8006428:	4603      	mov	r3, r0
 800642a:	73fb      	strb	r3, [r7, #15]
      break;
 800642c:	e016      	b.n	800645c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006434:	4619      	mov	r1, r3
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fb05 	bl	8006a46 <USBD_StdEPReq>
 800643c:	4603      	mov	r3, r0
 800643e:	73fb      	strb	r3, [r7, #15]
      break;
 8006440:	e00c      	b.n	800645c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006448:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800644c:	b2db      	uxtb	r3, r3
 800644e:	4619      	mov	r1, r3
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f004 fac9 	bl	800a9e8 <USBD_LL_StallEP>
 8006456:	4603      	mov	r3, r0
 8006458:	73fb      	strb	r3, [r7, #15]
      break;
 800645a:	bf00      	nop
  }

  return ret;
 800645c:	7bfb      	ldrb	r3, [r7, #15]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b086      	sub	sp, #24
 800646a:	af00      	add	r7, sp, #0
 800646c:	60f8      	str	r0, [r7, #12]
 800646e:	460b      	mov	r3, r1
 8006470:	607a      	str	r2, [r7, #4]
 8006472:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006474:	7afb      	ldrb	r3, [r7, #11]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d138      	bne.n	80064ec <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006480:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006488:	2b03      	cmp	r3, #3
 800648a:	d14a      	bne.n	8006522 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	689a      	ldr	r2, [r3, #8]
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	429a      	cmp	r2, r3
 8006496:	d913      	bls.n	80064c0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	1ad2      	subs	r2, r2, r3
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	4293      	cmp	r3, r2
 80064b0:	bf28      	it	cs
 80064b2:	4613      	movcs	r3, r2
 80064b4:	461a      	mov	r2, r3
 80064b6:	6879      	ldr	r1, [r7, #4]
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f001 f80f 	bl	80074dc <USBD_CtlContinueRx>
 80064be:	e030      	b.n	8006522 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b03      	cmp	r3, #3
 80064ca:	d10b      	bne.n	80064e4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d005      	beq.n	80064e4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f001 f80a 	bl	80074fe <USBD_CtlSendStatus>
 80064ea:	e01a      	b.n	8006522 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b03      	cmp	r3, #3
 80064f6:	d114      	bne.n	8006522 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00e      	beq.n	8006522 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	7afa      	ldrb	r2, [r7, #11]
 800650e:	4611      	mov	r1, r2
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	4798      	blx	r3
 8006514:	4603      	mov	r3, r0
 8006516:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006518:	7dfb      	ldrb	r3, [r7, #23]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800651e:	7dfb      	ldrb	r3, [r7, #23]
 8006520:	e000      	b.n	8006524 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3718      	adds	r7, #24
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	460b      	mov	r3, r1
 8006536:	607a      	str	r2, [r7, #4]
 8006538:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800653a:	7afb      	ldrb	r3, [r7, #11]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d16b      	bne.n	8006618 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	3314      	adds	r3, #20
 8006544:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800654c:	2b02      	cmp	r3, #2
 800654e:	d156      	bne.n	80065fe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	429a      	cmp	r2, r3
 800655a:	d914      	bls.n	8006586 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	689a      	ldr	r2, [r3, #8]
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	1ad2      	subs	r2, r2, r3
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	461a      	mov	r2, r3
 8006570:	6879      	ldr	r1, [r7, #4]
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f000 ff84 	bl	8007480 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006578:	2300      	movs	r3, #0
 800657a:	2200      	movs	r2, #0
 800657c:	2100      	movs	r1, #0
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f004 fadc 	bl	800ab3c <USBD_LL_PrepareReceive>
 8006584:	e03b      	b.n	80065fe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	68da      	ldr	r2, [r3, #12]
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	429a      	cmp	r2, r3
 8006590:	d11c      	bne.n	80065cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800659a:	429a      	cmp	r2, r3
 800659c:	d316      	bcc.n	80065cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d20f      	bcs.n	80065cc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80065ac:	2200      	movs	r2, #0
 80065ae:	2100      	movs	r1, #0
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 ff65 	bl	8007480 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065be:	2300      	movs	r3, #0
 80065c0:	2200      	movs	r2, #0
 80065c2:	2100      	movs	r1, #0
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f004 fab9 	bl	800ab3c <USBD_LL_PrepareReceive>
 80065ca:	e018      	b.n	80065fe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b03      	cmp	r3, #3
 80065d6:	d10b      	bne.n	80065f0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d005      	beq.n	80065f0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80065f0:	2180      	movs	r1, #128	; 0x80
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f004 f9f8 	bl	800a9e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 ff93 	bl	8007524 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006604:	2b01      	cmp	r3, #1
 8006606:	d122      	bne.n	800664e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f7ff fe98 	bl	800633e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006616:	e01a      	b.n	800664e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b03      	cmp	r3, #3
 8006622:	d114      	bne.n	800664e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00e      	beq.n	800664e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	7afa      	ldrb	r2, [r7, #11]
 800663a:	4611      	mov	r1, r2
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	4798      	blx	r3
 8006640:	4603      	mov	r3, r0
 8006642:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006644:	7dfb      	ldrb	r3, [r7, #23]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800664a:	7dfb      	ldrb	r3, [r7, #23]
 800664c:	e000      	b.n	8006650 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3718      	adds	r7, #24
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006688:	2303      	movs	r3, #3
 800668a:	e02f      	b.n	80066ec <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00f      	beq.n	80066b6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d009      	beq.n	80066b6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	6852      	ldr	r2, [r2, #4]
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	4611      	mov	r1, r2
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066b6:	2340      	movs	r3, #64	; 0x40
 80066b8:	2200      	movs	r2, #0
 80066ba:	2100      	movs	r1, #0
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f004 f94e 	bl	800a95e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2240      	movs	r2, #64	; 0x40
 80066ce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066d2:	2340      	movs	r3, #64	; 0x40
 80066d4:	2200      	movs	r2, #0
 80066d6:	2180      	movs	r1, #128	; 0x80
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f004 f940 	bl	800a95e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2240      	movs	r2, #64	; 0x40
 80066e8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	460b      	mov	r3, r1
 80066fe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	78fa      	ldrb	r2, [r7, #3]
 8006704:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006722:	b2da      	uxtb	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2204      	movs	r2, #4
 800672e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b04      	cmp	r3, #4
 8006752:	d106      	bne.n	8006762 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800675a:	b2da      	uxtb	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006782:	2303      	movs	r3, #3
 8006784:	e012      	b.n	80067ac <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b03      	cmp	r3, #3
 8006790:	d10b      	bne.n	80067aa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d005      	beq.n	80067aa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	460b      	mov	r3, r1
 80067be:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e014      	b.n	80067f8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	d10d      	bne.n	80067f6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d007      	beq.n	80067f6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	78fa      	ldrb	r2, [r7, #3]
 80067f0:	4611      	mov	r1, r2
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	460b      	mov	r3, r1
 800680a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006816:	2303      	movs	r3, #3
 8006818:	e014      	b.n	8006844 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b03      	cmp	r3, #3
 8006824:	d10d      	bne.n	8006842 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800682c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682e:	2b00      	cmp	r3, #0
 8006830:	d007      	beq.n	8006842 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683a:	78fa      	ldrb	r2, [r7, #3]
 800683c:	4611      	mov	r1, r2
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b082      	sub	sp, #8
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006878:	2b00      	cmp	r3, #0
 800687a:	d009      	beq.n	8006890 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	6852      	ldr	r2, [r2, #4]
 8006888:	b2d2      	uxtb	r2, r2
 800688a:	4611      	mov	r1, r2
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	4798      	blx	r3
  }

  return USBD_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800689a:	b480      	push	{r7}
 800689c:	b087      	sub	sp, #28
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	3301      	adds	r3, #1
 80068b0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80068b8:	8a3b      	ldrh	r3, [r7, #16]
 80068ba:	021b      	lsls	r3, r3, #8
 80068bc:	b21a      	sxth	r2, r3
 80068be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	b21b      	sxth	r3, r3
 80068c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80068c8:	89fb      	ldrh	r3, [r7, #14]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	371c      	adds	r7, #28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
	...

080068d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068ee:	2b40      	cmp	r3, #64	; 0x40
 80068f0:	d005      	beq.n	80068fe <USBD_StdDevReq+0x26>
 80068f2:	2b40      	cmp	r3, #64	; 0x40
 80068f4:	d853      	bhi.n	800699e <USBD_StdDevReq+0xc6>
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00b      	beq.n	8006912 <USBD_StdDevReq+0x3a>
 80068fa:	2b20      	cmp	r3, #32
 80068fc:	d14f      	bne.n	800699e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	6839      	ldr	r1, [r7, #0]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	4798      	blx	r3
 800690c:	4603      	mov	r3, r0
 800690e:	73fb      	strb	r3, [r7, #15]
      break;
 8006910:	e04a      	b.n	80069a8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	785b      	ldrb	r3, [r3, #1]
 8006916:	2b09      	cmp	r3, #9
 8006918:	d83b      	bhi.n	8006992 <USBD_StdDevReq+0xba>
 800691a:	a201      	add	r2, pc, #4	; (adr r2, 8006920 <USBD_StdDevReq+0x48>)
 800691c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006920:	08006975 	.word	0x08006975
 8006924:	08006989 	.word	0x08006989
 8006928:	08006993 	.word	0x08006993
 800692c:	0800697f 	.word	0x0800697f
 8006930:	08006993 	.word	0x08006993
 8006934:	08006953 	.word	0x08006953
 8006938:	08006949 	.word	0x08006949
 800693c:	08006993 	.word	0x08006993
 8006940:	0800696b 	.word	0x0800696b
 8006944:	0800695d 	.word	0x0800695d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f9de 	bl	8006d0c <USBD_GetDescriptor>
          break;
 8006950:	e024      	b.n	800699c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fb43 	bl	8006fe0 <USBD_SetAddress>
          break;
 800695a:	e01f      	b.n	800699c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fb82 	bl	8007068 <USBD_SetConfig>
 8006964:	4603      	mov	r3, r0
 8006966:	73fb      	strb	r3, [r7, #15]
          break;
 8006968:	e018      	b.n	800699c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800696a:	6839      	ldr	r1, [r7, #0]
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 fc21 	bl	80071b4 <USBD_GetConfig>
          break;
 8006972:	e013      	b.n	800699c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006974:	6839      	ldr	r1, [r7, #0]
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fc52 	bl	8007220 <USBD_GetStatus>
          break;
 800697c:	e00e      	b.n	800699c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800697e:	6839      	ldr	r1, [r7, #0]
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 fc81 	bl	8007288 <USBD_SetFeature>
          break;
 8006986:	e009      	b.n	800699c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006988:	6839      	ldr	r1, [r7, #0]
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fc90 	bl	80072b0 <USBD_ClrFeature>
          break;
 8006990:	e004      	b.n	800699c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006992:	6839      	ldr	r1, [r7, #0]
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fce7 	bl	8007368 <USBD_CtlError>
          break;
 800699a:	bf00      	nop
      }
      break;
 800699c:	e004      	b.n	80069a8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800699e:	6839      	ldr	r1, [r7, #0]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fce1 	bl	8007368 <USBD_CtlError>
      break;
 80069a6:	bf00      	nop
  }

  return ret;
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop

080069b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069ca:	2b40      	cmp	r3, #64	; 0x40
 80069cc:	d005      	beq.n	80069da <USBD_StdItfReq+0x26>
 80069ce:	2b40      	cmp	r3, #64	; 0x40
 80069d0:	d82f      	bhi.n	8006a32 <USBD_StdItfReq+0x7e>
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <USBD_StdItfReq+0x26>
 80069d6:	2b20      	cmp	r3, #32
 80069d8:	d12b      	bne.n	8006a32 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	3b01      	subs	r3, #1
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d81d      	bhi.n	8006a24 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	889b      	ldrh	r3, [r3, #4]
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d813      	bhi.n	8006a1a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	4798      	blx	r3
 8006a00:	4603      	mov	r3, r0
 8006a02:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	88db      	ldrh	r3, [r3, #6]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d110      	bne.n	8006a2e <USBD_StdItfReq+0x7a>
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10d      	bne.n	8006a2e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fd73 	bl	80074fe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a18:	e009      	b.n	8006a2e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006a1a:	6839      	ldr	r1, [r7, #0]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fca3 	bl	8007368 <USBD_CtlError>
          break;
 8006a22:	e004      	b.n	8006a2e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fc9e 	bl	8007368 <USBD_CtlError>
          break;
 8006a2c:	e000      	b.n	8006a30 <USBD_StdItfReq+0x7c>
          break;
 8006a2e:	bf00      	nop
      }
      break;
 8006a30:	e004      	b.n	8006a3c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fc97 	bl	8007368 <USBD_CtlError>
      break;
 8006a3a:	bf00      	nop
  }

  return ret;
 8006a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b084      	sub	sp, #16
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a50:	2300      	movs	r3, #0
 8006a52:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	889b      	ldrh	r3, [r3, #4]
 8006a58:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a62:	2b40      	cmp	r3, #64	; 0x40
 8006a64:	d007      	beq.n	8006a76 <USBD_StdEPReq+0x30>
 8006a66:	2b40      	cmp	r3, #64	; 0x40
 8006a68:	f200 8145 	bhi.w	8006cf6 <USBD_StdEPReq+0x2b0>
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00c      	beq.n	8006a8a <USBD_StdEPReq+0x44>
 8006a70:	2b20      	cmp	r3, #32
 8006a72:	f040 8140 	bne.w	8006cf6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	6839      	ldr	r1, [r7, #0]
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	4798      	blx	r3
 8006a84:	4603      	mov	r3, r0
 8006a86:	73fb      	strb	r3, [r7, #15]
      break;
 8006a88:	e13a      	b.n	8006d00 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	785b      	ldrb	r3, [r3, #1]
 8006a8e:	2b03      	cmp	r3, #3
 8006a90:	d007      	beq.n	8006aa2 <USBD_StdEPReq+0x5c>
 8006a92:	2b03      	cmp	r3, #3
 8006a94:	f300 8129 	bgt.w	8006cea <USBD_StdEPReq+0x2a4>
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d07f      	beq.n	8006b9c <USBD_StdEPReq+0x156>
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d03c      	beq.n	8006b1a <USBD_StdEPReq+0xd4>
 8006aa0:	e123      	b.n	8006cea <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d002      	beq.n	8006ab4 <USBD_StdEPReq+0x6e>
 8006aae:	2b03      	cmp	r3, #3
 8006ab0:	d016      	beq.n	8006ae0 <USBD_StdEPReq+0x9a>
 8006ab2:	e02c      	b.n	8006b0e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ab4:	7bbb      	ldrb	r3, [r7, #14]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00d      	beq.n	8006ad6 <USBD_StdEPReq+0x90>
 8006aba:	7bbb      	ldrb	r3, [r7, #14]
 8006abc:	2b80      	cmp	r3, #128	; 0x80
 8006abe:	d00a      	beq.n	8006ad6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ac0:	7bbb      	ldrb	r3, [r7, #14]
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f003 ff8f 	bl	800a9e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006aca:	2180      	movs	r1, #128	; 0x80
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f003 ff8b 	bl	800a9e8 <USBD_LL_StallEP>
 8006ad2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ad4:	e020      	b.n	8006b18 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 fc45 	bl	8007368 <USBD_CtlError>
              break;
 8006ade:	e01b      	b.n	8006b18 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	885b      	ldrh	r3, [r3, #2]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10e      	bne.n	8006b06 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ae8:	7bbb      	ldrb	r3, [r7, #14]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00b      	beq.n	8006b06 <USBD_StdEPReq+0xc0>
 8006aee:	7bbb      	ldrb	r3, [r7, #14]
 8006af0:	2b80      	cmp	r3, #128	; 0x80
 8006af2:	d008      	beq.n	8006b06 <USBD_StdEPReq+0xc0>
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	88db      	ldrh	r3, [r3, #6]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d104      	bne.n	8006b06 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006afc:	7bbb      	ldrb	r3, [r7, #14]
 8006afe:	4619      	mov	r1, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f003 ff71 	bl	800a9e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fcf9 	bl	80074fe <USBD_CtlSendStatus>

              break;
 8006b0c:	e004      	b.n	8006b18 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006b0e:	6839      	ldr	r1, [r7, #0]
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fc29 	bl	8007368 <USBD_CtlError>
              break;
 8006b16:	bf00      	nop
          }
          break;
 8006b18:	e0ec      	b.n	8006cf4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d002      	beq.n	8006b2c <USBD_StdEPReq+0xe6>
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	d016      	beq.n	8006b58 <USBD_StdEPReq+0x112>
 8006b2a:	e030      	b.n	8006b8e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b2c:	7bbb      	ldrb	r3, [r7, #14]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00d      	beq.n	8006b4e <USBD_StdEPReq+0x108>
 8006b32:	7bbb      	ldrb	r3, [r7, #14]
 8006b34:	2b80      	cmp	r3, #128	; 0x80
 8006b36:	d00a      	beq.n	8006b4e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f003 ff53 	bl	800a9e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b42:	2180      	movs	r1, #128	; 0x80
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f003 ff4f 	bl	800a9e8 <USBD_LL_StallEP>
 8006b4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b4c:	e025      	b.n	8006b9a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006b4e:	6839      	ldr	r1, [r7, #0]
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fc09 	bl	8007368 <USBD_CtlError>
              break;
 8006b56:	e020      	b.n	8006b9a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	885b      	ldrh	r3, [r3, #2]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d11b      	bne.n	8006b98 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b60:	7bbb      	ldrb	r3, [r7, #14]
 8006b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d004      	beq.n	8006b74 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b6a:	7bbb      	ldrb	r3, [r7, #14]
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f003 ff59 	bl	800aa26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fcc2 	bl	80074fe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	4798      	blx	r3
 8006b88:	4603      	mov	r3, r0
 8006b8a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006b8c:	e004      	b.n	8006b98 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fbe9 	bl	8007368 <USBD_CtlError>
              break;
 8006b96:	e000      	b.n	8006b9a <USBD_StdEPReq+0x154>
              break;
 8006b98:	bf00      	nop
          }
          break;
 8006b9a:	e0ab      	b.n	8006cf4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d002      	beq.n	8006bae <USBD_StdEPReq+0x168>
 8006ba8:	2b03      	cmp	r3, #3
 8006baa:	d032      	beq.n	8006c12 <USBD_StdEPReq+0x1cc>
 8006bac:	e097      	b.n	8006cde <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bae:	7bbb      	ldrb	r3, [r7, #14]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d007      	beq.n	8006bc4 <USBD_StdEPReq+0x17e>
 8006bb4:	7bbb      	ldrb	r3, [r7, #14]
 8006bb6:	2b80      	cmp	r3, #128	; 0x80
 8006bb8:	d004      	beq.n	8006bc4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006bba:	6839      	ldr	r1, [r7, #0]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fbd3 	bl	8007368 <USBD_CtlError>
                break;
 8006bc2:	e091      	b.n	8006ce8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	da0b      	bge.n	8006be4 <USBD_StdEPReq+0x19e>
 8006bcc:	7bbb      	ldrb	r3, [r7, #14]
 8006bce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	3310      	adds	r3, #16
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	4413      	add	r3, r2
 8006be0:	3304      	adds	r3, #4
 8006be2:	e00b      	b.n	8006bfc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006be4:	7bbb      	ldrb	r3, [r7, #14]
 8006be6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bea:	4613      	mov	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	3304      	adds	r3, #4
 8006bfc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	2200      	movs	r2, #0
 8006c02:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	2202      	movs	r2, #2
 8006c08:	4619      	mov	r1, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fc1d 	bl	800744a <USBD_CtlSendData>
              break;
 8006c10:	e06a      	b.n	8006ce8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	da11      	bge.n	8006c3e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c1a:	7bbb      	ldrb	r3, [r7, #14]
 8006c1c:	f003 020f 	and.w	r2, r3, #15
 8006c20:	6879      	ldr	r1, [r7, #4]
 8006c22:	4613      	mov	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4413      	add	r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	440b      	add	r3, r1
 8006c2c:	3324      	adds	r3, #36	; 0x24
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d117      	bne.n	8006c64 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006c34:	6839      	ldr	r1, [r7, #0]
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fb96 	bl	8007368 <USBD_CtlError>
                  break;
 8006c3c:	e054      	b.n	8006ce8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c3e:	7bbb      	ldrb	r3, [r7, #14]
 8006c40:	f003 020f 	and.w	r2, r3, #15
 8006c44:	6879      	ldr	r1, [r7, #4]
 8006c46:	4613      	mov	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	440b      	add	r3, r1
 8006c50:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d104      	bne.n	8006c64 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006c5a:	6839      	ldr	r1, [r7, #0]
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fb83 	bl	8007368 <USBD_CtlError>
                  break;
 8006c62:	e041      	b.n	8006ce8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	da0b      	bge.n	8006c84 <USBD_StdEPReq+0x23e>
 8006c6c:	7bbb      	ldrb	r3, [r7, #14]
 8006c6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c72:	4613      	mov	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	3310      	adds	r3, #16
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	4413      	add	r3, r2
 8006c80:	3304      	adds	r3, #4
 8006c82:	e00b      	b.n	8006c9c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c84:	7bbb      	ldrb	r3, [r7, #14]
 8006c86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4413      	add	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	4413      	add	r3, r2
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d002      	beq.n	8006caa <USBD_StdEPReq+0x264>
 8006ca4:	7bbb      	ldrb	r3, [r7, #14]
 8006ca6:	2b80      	cmp	r3, #128	; 0x80
 8006ca8:	d103      	bne.n	8006cb2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	2200      	movs	r2, #0
 8006cae:	601a      	str	r2, [r3, #0]
 8006cb0:	e00e      	b.n	8006cd0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006cb2:	7bbb      	ldrb	r3, [r7, #14]
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f003 fed4 	bl	800aa64 <USBD_LL_IsStallEP>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	e002      	b.n	8006cd0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fbb7 	bl	800744a <USBD_CtlSendData>
              break;
 8006cdc:	e004      	b.n	8006ce8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006cde:	6839      	ldr	r1, [r7, #0]
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fb41 	bl	8007368 <USBD_CtlError>
              break;
 8006ce6:	bf00      	nop
          }
          break;
 8006ce8:	e004      	b.n	8006cf4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006cea:	6839      	ldr	r1, [r7, #0]
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 fb3b 	bl	8007368 <USBD_CtlError>
          break;
 8006cf2:	bf00      	nop
      }
      break;
 8006cf4:	e004      	b.n	8006d00 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006cf6:	6839      	ldr	r1, [r7, #0]
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 fb35 	bl	8007368 <USBD_CtlError>
      break;
 8006cfe:	bf00      	nop
  }

  return ret;
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
	...

08006d0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d16:	2300      	movs	r3, #0
 8006d18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	885b      	ldrh	r3, [r3, #2]
 8006d26:	0a1b      	lsrs	r3, r3, #8
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	2b06      	cmp	r3, #6
 8006d2e:	f200 8128 	bhi.w	8006f82 <USBD_GetDescriptor+0x276>
 8006d32:	a201      	add	r2, pc, #4	; (adr r2, 8006d38 <USBD_GetDescriptor+0x2c>)
 8006d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d38:	08006d55 	.word	0x08006d55
 8006d3c:	08006d6d 	.word	0x08006d6d
 8006d40:	08006dad 	.word	0x08006dad
 8006d44:	08006f83 	.word	0x08006f83
 8006d48:	08006f83 	.word	0x08006f83
 8006d4c:	08006f23 	.word	0x08006f23
 8006d50:	08006f4f 	.word	0x08006f4f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	7c12      	ldrb	r2, [r2, #16]
 8006d60:	f107 0108 	add.w	r1, r7, #8
 8006d64:	4610      	mov	r0, r2
 8006d66:	4798      	blx	r3
 8006d68:	60f8      	str	r0, [r7, #12]
      break;
 8006d6a:	e112      	b.n	8006f92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	7c1b      	ldrb	r3, [r3, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10d      	bne.n	8006d90 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7c:	f107 0208 	add.w	r2, r7, #8
 8006d80:	4610      	mov	r0, r2
 8006d82:	4798      	blx	r3
 8006d84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006d8e:	e100      	b.n	8006f92 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d98:	f107 0208 	add.w	r2, r7, #8
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	4798      	blx	r3
 8006da0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	3301      	adds	r3, #1
 8006da6:	2202      	movs	r2, #2
 8006da8:	701a      	strb	r2, [r3, #0]
      break;
 8006daa:	e0f2      	b.n	8006f92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	885b      	ldrh	r3, [r3, #2]
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b05      	cmp	r3, #5
 8006db4:	f200 80ac 	bhi.w	8006f10 <USBD_GetDescriptor+0x204>
 8006db8:	a201      	add	r2, pc, #4	; (adr r2, 8006dc0 <USBD_GetDescriptor+0xb4>)
 8006dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbe:	bf00      	nop
 8006dc0:	08006dd9 	.word	0x08006dd9
 8006dc4:	08006e0d 	.word	0x08006e0d
 8006dc8:	08006e41 	.word	0x08006e41
 8006dcc:	08006e75 	.word	0x08006e75
 8006dd0:	08006ea9 	.word	0x08006ea9
 8006dd4:	08006edd 	.word	0x08006edd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00b      	beq.n	8006dfc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	7c12      	ldrb	r2, [r2, #16]
 8006df0:	f107 0108 	add.w	r1, r7, #8
 8006df4:	4610      	mov	r0, r2
 8006df6:	4798      	blx	r3
 8006df8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dfa:	e091      	b.n	8006f20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dfc:	6839      	ldr	r1, [r7, #0]
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fab2 	bl	8007368 <USBD_CtlError>
            err++;
 8006e04:	7afb      	ldrb	r3, [r7, #11]
 8006e06:	3301      	adds	r3, #1
 8006e08:	72fb      	strb	r3, [r7, #11]
          break;
 8006e0a:	e089      	b.n	8006f20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00b      	beq.n	8006e30 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	7c12      	ldrb	r2, [r2, #16]
 8006e24:	f107 0108 	add.w	r1, r7, #8
 8006e28:	4610      	mov	r0, r2
 8006e2a:	4798      	blx	r3
 8006e2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e2e:	e077      	b.n	8006f20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fa98 	bl	8007368 <USBD_CtlError>
            err++;
 8006e38:	7afb      	ldrb	r3, [r7, #11]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e3e:	e06f      	b.n	8006f20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00b      	beq.n	8006e64 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	7c12      	ldrb	r2, [r2, #16]
 8006e58:	f107 0108 	add.w	r1, r7, #8
 8006e5c:	4610      	mov	r0, r2
 8006e5e:	4798      	blx	r3
 8006e60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e62:	e05d      	b.n	8006f20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fa7e 	bl	8007368 <USBD_CtlError>
            err++;
 8006e6c:	7afb      	ldrb	r3, [r7, #11]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	72fb      	strb	r3, [r7, #11]
          break;
 8006e72:	e055      	b.n	8006f20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00b      	beq.n	8006e98 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	7c12      	ldrb	r2, [r2, #16]
 8006e8c:	f107 0108 	add.w	r1, r7, #8
 8006e90:	4610      	mov	r0, r2
 8006e92:	4798      	blx	r3
 8006e94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e96:	e043      	b.n	8006f20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e98:	6839      	ldr	r1, [r7, #0]
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fa64 	bl	8007368 <USBD_CtlError>
            err++;
 8006ea0:	7afb      	ldrb	r3, [r7, #11]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ea6:	e03b      	b.n	8006f20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00b      	beq.n	8006ecc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eba:	695b      	ldr	r3, [r3, #20]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	7c12      	ldrb	r2, [r2, #16]
 8006ec0:	f107 0108 	add.w	r1, r7, #8
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	4798      	blx	r3
 8006ec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eca:	e029      	b.n	8006f20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fa4a 	bl	8007368 <USBD_CtlError>
            err++;
 8006ed4:	7afb      	ldrb	r3, [r7, #11]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	72fb      	strb	r3, [r7, #11]
          break;
 8006eda:	e021      	b.n	8006f20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00b      	beq.n	8006f00 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	7c12      	ldrb	r2, [r2, #16]
 8006ef4:	f107 0108 	add.w	r1, r7, #8
 8006ef8:	4610      	mov	r0, r2
 8006efa:	4798      	blx	r3
 8006efc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006efe:	e00f      	b.n	8006f20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f00:	6839      	ldr	r1, [r7, #0]
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fa30 	bl	8007368 <USBD_CtlError>
            err++;
 8006f08:	7afb      	ldrb	r3, [r7, #11]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f0e:	e007      	b.n	8006f20 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fa28 	bl	8007368 <USBD_CtlError>
          err++;
 8006f18:	7afb      	ldrb	r3, [r7, #11]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006f1e:	bf00      	nop
      }
      break;
 8006f20:	e037      	b.n	8006f92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	7c1b      	ldrb	r3, [r3, #16]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d109      	bne.n	8006f3e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f32:	f107 0208 	add.w	r2, r7, #8
 8006f36:	4610      	mov	r0, r2
 8006f38:	4798      	blx	r3
 8006f3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f3c:	e029      	b.n	8006f92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fa11 	bl	8007368 <USBD_CtlError>
        err++;
 8006f46:	7afb      	ldrb	r3, [r7, #11]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	72fb      	strb	r3, [r7, #11]
      break;
 8006f4c:	e021      	b.n	8006f92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	7c1b      	ldrb	r3, [r3, #16]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10d      	bne.n	8006f72 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5e:	f107 0208 	add.w	r2, r7, #8
 8006f62:	4610      	mov	r0, r2
 8006f64:	4798      	blx	r3
 8006f66:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	2207      	movs	r2, #7
 8006f6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f70:	e00f      	b.n	8006f92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f9f7 	bl	8007368 <USBD_CtlError>
        err++;
 8006f7a:	7afb      	ldrb	r3, [r7, #11]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	72fb      	strb	r3, [r7, #11]
      break;
 8006f80:	e007      	b.n	8006f92 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006f82:	6839      	ldr	r1, [r7, #0]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f9ef 	bl	8007368 <USBD_CtlError>
      err++;
 8006f8a:	7afb      	ldrb	r3, [r7, #11]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	72fb      	strb	r3, [r7, #11]
      break;
 8006f90:	bf00      	nop
  }

  if (err != 0U)
 8006f92:	7afb      	ldrb	r3, [r7, #11]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d11e      	bne.n	8006fd6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	88db      	ldrh	r3, [r3, #6]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d016      	beq.n	8006fce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006fa0:	893b      	ldrh	r3, [r7, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00e      	beq.n	8006fc4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	88da      	ldrh	r2, [r3, #6]
 8006faa:	893b      	ldrh	r3, [r7, #8]
 8006fac:	4293      	cmp	r3, r2
 8006fae:	bf28      	it	cs
 8006fb0:	4613      	movcs	r3, r2
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006fb6:	893b      	ldrh	r3, [r7, #8]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	68f9      	ldr	r1, [r7, #12]
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 fa44 	bl	800744a <USBD_CtlSendData>
 8006fc2:	e009      	b.n	8006fd8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006fc4:	6839      	ldr	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f9ce 	bl	8007368 <USBD_CtlError>
 8006fcc:	e004      	b.n	8006fd8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fa95 	bl	80074fe <USBD_CtlSendStatus>
 8006fd4:	e000      	b.n	8006fd8 <USBD_GetDescriptor+0x2cc>
    return;
 8006fd6:	bf00      	nop
  }
}
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop

08006fe0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	889b      	ldrh	r3, [r3, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d131      	bne.n	8007056 <USBD_SetAddress+0x76>
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	88db      	ldrh	r3, [r3, #6]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d12d      	bne.n	8007056 <USBD_SetAddress+0x76>
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	885b      	ldrh	r3, [r3, #2]
 8006ffe:	2b7f      	cmp	r3, #127	; 0x7f
 8007000:	d829      	bhi.n	8007056 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	885b      	ldrh	r3, [r3, #2]
 8007006:	b2db      	uxtb	r3, r3
 8007008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800700c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b03      	cmp	r3, #3
 8007018:	d104      	bne.n	8007024 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800701a:	6839      	ldr	r1, [r7, #0]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 f9a3 	bl	8007368 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007022:	e01d      	b.n	8007060 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	7bfa      	ldrb	r2, [r7, #15]
 8007028:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800702c:	7bfb      	ldrb	r3, [r7, #15]
 800702e:	4619      	mov	r1, r3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f003 fd43 	bl	800aabc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fa61 	bl	80074fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800703c:	7bfb      	ldrb	r3, [r7, #15]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d004      	beq.n	800704c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2202      	movs	r2, #2
 8007046:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800704a:	e009      	b.n	8007060 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007054:	e004      	b.n	8007060 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f985 	bl	8007368 <USBD_CtlError>
  }
}
 800705e:	bf00      	nop
 8007060:	bf00      	nop
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	885b      	ldrh	r3, [r3, #2]
 800707a:	b2da      	uxtb	r2, r3
 800707c:	4b4c      	ldr	r3, [pc, #304]	; (80071b0 <USBD_SetConfig+0x148>)
 800707e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007080:	4b4b      	ldr	r3, [pc, #300]	; (80071b0 <USBD_SetConfig+0x148>)
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d905      	bls.n	8007094 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007088:	6839      	ldr	r1, [r7, #0]
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f96c 	bl	8007368 <USBD_CtlError>
    return USBD_FAIL;
 8007090:	2303      	movs	r3, #3
 8007092:	e088      	b.n	80071a6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b02      	cmp	r3, #2
 800709e:	d002      	beq.n	80070a6 <USBD_SetConfig+0x3e>
 80070a0:	2b03      	cmp	r3, #3
 80070a2:	d025      	beq.n	80070f0 <USBD_SetConfig+0x88>
 80070a4:	e071      	b.n	800718a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80070a6:	4b42      	ldr	r3, [pc, #264]	; (80071b0 <USBD_SetConfig+0x148>)
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d01c      	beq.n	80070e8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80070ae:	4b40      	ldr	r3, [pc, #256]	; (80071b0 <USBD_SetConfig+0x148>)
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	461a      	mov	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070b8:	4b3d      	ldr	r3, [pc, #244]	; (80071b0 <USBD_SetConfig+0x148>)
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	4619      	mov	r1, r3
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7ff f948 	bl	8006354 <USBD_SetClassConfig>
 80070c4:	4603      	mov	r3, r0
 80070c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d004      	beq.n	80070d8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80070ce:	6839      	ldr	r1, [r7, #0]
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 f949 	bl	8007368 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80070d6:	e065      	b.n	80071a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fa10 	bl	80074fe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2203      	movs	r2, #3
 80070e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80070e6:	e05d      	b.n	80071a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fa08 	bl	80074fe <USBD_CtlSendStatus>
      break;
 80070ee:	e059      	b.n	80071a4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80070f0:	4b2f      	ldr	r3, [pc, #188]	; (80071b0 <USBD_SetConfig+0x148>)
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d112      	bne.n	800711e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2202      	movs	r2, #2
 80070fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007100:	4b2b      	ldr	r3, [pc, #172]	; (80071b0 <USBD_SetConfig+0x148>)
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	461a      	mov	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800710a:	4b29      	ldr	r3, [pc, #164]	; (80071b0 <USBD_SetConfig+0x148>)
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	4619      	mov	r1, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7ff f93b 	bl	800638c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f9f1 	bl	80074fe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800711c:	e042      	b.n	80071a4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800711e:	4b24      	ldr	r3, [pc, #144]	; (80071b0 <USBD_SetConfig+0x148>)
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	461a      	mov	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	429a      	cmp	r2, r3
 800712a:	d02a      	beq.n	8007182 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	b2db      	uxtb	r3, r3
 8007132:	4619      	mov	r1, r3
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7ff f929 	bl	800638c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800713a:	4b1d      	ldr	r3, [pc, #116]	; (80071b0 <USBD_SetConfig+0x148>)
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	461a      	mov	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007144:	4b1a      	ldr	r3, [pc, #104]	; (80071b0 <USBD_SetConfig+0x148>)
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	4619      	mov	r1, r3
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7ff f902 	bl	8006354 <USBD_SetClassConfig>
 8007150:	4603      	mov	r3, r0
 8007152:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007154:	7bfb      	ldrb	r3, [r7, #15]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00f      	beq.n	800717a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f903 	bl	8007368 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	b2db      	uxtb	r3, r3
 8007168:	4619      	mov	r1, r3
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f7ff f90e 	bl	800638c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2202      	movs	r2, #2
 8007174:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007178:	e014      	b.n	80071a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f9bf 	bl	80074fe <USBD_CtlSendStatus>
      break;
 8007180:	e010      	b.n	80071a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f9bb 	bl	80074fe <USBD_CtlSendStatus>
      break;
 8007188:	e00c      	b.n	80071a4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800718a:	6839      	ldr	r1, [r7, #0]
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f8eb 	bl	8007368 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007192:	4b07      	ldr	r3, [pc, #28]	; (80071b0 <USBD_SetConfig+0x148>)
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	4619      	mov	r1, r3
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7ff f8f7 	bl	800638c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800719e:	2303      	movs	r3, #3
 80071a0:	73fb      	strb	r3, [r7, #15]
      break;
 80071a2:	bf00      	nop
  }

  return ret;
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	200002b0 	.word	0x200002b0

080071b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	88db      	ldrh	r3, [r3, #6]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d004      	beq.n	80071d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80071c6:	6839      	ldr	r1, [r7, #0]
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f8cd 	bl	8007368 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80071ce:	e023      	b.n	8007218 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b02      	cmp	r3, #2
 80071da:	dc02      	bgt.n	80071e2 <USBD_GetConfig+0x2e>
 80071dc:	2b00      	cmp	r3, #0
 80071de:	dc03      	bgt.n	80071e8 <USBD_GetConfig+0x34>
 80071e0:	e015      	b.n	800720e <USBD_GetConfig+0x5a>
 80071e2:	2b03      	cmp	r3, #3
 80071e4:	d00b      	beq.n	80071fe <USBD_GetConfig+0x4a>
 80071e6:	e012      	b.n	800720e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	3308      	adds	r3, #8
 80071f2:	2201      	movs	r2, #1
 80071f4:	4619      	mov	r1, r3
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f927 	bl	800744a <USBD_CtlSendData>
        break;
 80071fc:	e00c      	b.n	8007218 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	3304      	adds	r3, #4
 8007202:	2201      	movs	r2, #1
 8007204:	4619      	mov	r1, r3
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f91f 	bl	800744a <USBD_CtlSendData>
        break;
 800720c:	e004      	b.n	8007218 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f8a9 	bl	8007368 <USBD_CtlError>
        break;
 8007216:	bf00      	nop
}
 8007218:	bf00      	nop
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007230:	b2db      	uxtb	r3, r3
 8007232:	3b01      	subs	r3, #1
 8007234:	2b02      	cmp	r3, #2
 8007236:	d81e      	bhi.n	8007276 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	88db      	ldrh	r3, [r3, #6]
 800723c:	2b02      	cmp	r3, #2
 800723e:	d004      	beq.n	800724a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f890 	bl	8007368 <USBD_CtlError>
        break;
 8007248:	e01a      	b.n	8007280 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007256:	2b00      	cmp	r3, #0
 8007258:	d005      	beq.n	8007266 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	f043 0202 	orr.w	r2, r3, #2
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	330c      	adds	r3, #12
 800726a:	2202      	movs	r2, #2
 800726c:	4619      	mov	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f8eb 	bl	800744a <USBD_CtlSendData>
      break;
 8007274:	e004      	b.n	8007280 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f875 	bl	8007368 <USBD_CtlError>
      break;
 800727e:	bf00      	nop
  }
}
 8007280:	bf00      	nop
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	885b      	ldrh	r3, [r3, #2]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d106      	bne.n	80072a8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f92b 	bl	80074fe <USBD_CtlSendStatus>
  }
}
 80072a8:	bf00      	nop
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	3b01      	subs	r3, #1
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d80b      	bhi.n	80072e0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	885b      	ldrh	r3, [r3, #2]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d10c      	bne.n	80072ea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f910 	bl	80074fe <USBD_CtlSendStatus>
      }
      break;
 80072de:	e004      	b.n	80072ea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f840 	bl	8007368 <USBD_CtlError>
      break;
 80072e8:	e000      	b.n	80072ec <USBD_ClrFeature+0x3c>
      break;
 80072ea:	bf00      	nop
  }
}
 80072ec:	bf00      	nop
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	781a      	ldrb	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	3301      	adds	r3, #1
 800730e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	781a      	ldrb	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	3301      	adds	r3, #1
 800731c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f7ff fabb 	bl	800689a <SWAPBYTE>
 8007324:	4603      	mov	r3, r0
 8007326:	461a      	mov	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	3301      	adds	r3, #1
 8007330:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	3301      	adds	r3, #1
 8007336:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f7ff faae 	bl	800689a <SWAPBYTE>
 800733e:	4603      	mov	r3, r0
 8007340:	461a      	mov	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	3301      	adds	r3, #1
 800734a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	3301      	adds	r3, #1
 8007350:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f7ff faa1 	bl	800689a <SWAPBYTE>
 8007358:	4603      	mov	r3, r0
 800735a:	461a      	mov	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	80da      	strh	r2, [r3, #6]
}
 8007360:	bf00      	nop
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007372:	2180      	movs	r1, #128	; 0x80
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f003 fb37 	bl	800a9e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800737a:	2100      	movs	r1, #0
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f003 fb33 	bl	800a9e8 <USBD_LL_StallEP>
}
 8007382:	bf00      	nop
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b086      	sub	sp, #24
 800738e:	af00      	add	r7, sp, #0
 8007390:	60f8      	str	r0, [r7, #12]
 8007392:	60b9      	str	r1, [r7, #8]
 8007394:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007396:	2300      	movs	r3, #0
 8007398:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d036      	beq.n	800740e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80073a4:	6938      	ldr	r0, [r7, #16]
 80073a6:	f000 f836 	bl	8007416 <USBD_GetLen>
 80073aa:	4603      	mov	r3, r0
 80073ac:	3301      	adds	r3, #1
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	005b      	lsls	r3, r3, #1
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	4413      	add	r3, r2
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	7812      	ldrb	r2, [r2, #0]
 80073c2:	701a      	strb	r2, [r3, #0]
  idx++;
 80073c4:	7dfb      	ldrb	r3, [r7, #23]
 80073c6:	3301      	adds	r3, #1
 80073c8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80073ca:	7dfb      	ldrb	r3, [r7, #23]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	4413      	add	r3, r2
 80073d0:	2203      	movs	r2, #3
 80073d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80073d4:	7dfb      	ldrb	r3, [r7, #23]
 80073d6:	3301      	adds	r3, #1
 80073d8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80073da:	e013      	b.n	8007404 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80073dc:	7dfb      	ldrb	r3, [r7, #23]
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	4413      	add	r3, r2
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	7812      	ldrb	r2, [r2, #0]
 80073e6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	3301      	adds	r3, #1
 80073ec:	613b      	str	r3, [r7, #16]
    idx++;
 80073ee:	7dfb      	ldrb	r3, [r7, #23]
 80073f0:	3301      	adds	r3, #1
 80073f2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80073f4:	7dfb      	ldrb	r3, [r7, #23]
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	4413      	add	r3, r2
 80073fa:	2200      	movs	r2, #0
 80073fc:	701a      	strb	r2, [r3, #0]
    idx++;
 80073fe:	7dfb      	ldrb	r3, [r7, #23]
 8007400:	3301      	adds	r3, #1
 8007402:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1e7      	bne.n	80073dc <USBD_GetString+0x52>
 800740c:	e000      	b.n	8007410 <USBD_GetString+0x86>
    return;
 800740e:	bf00      	nop
  }
}
 8007410:	3718      	adds	r7, #24
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007416:	b480      	push	{r7}
 8007418:	b085      	sub	sp, #20
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800741e:	2300      	movs	r3, #0
 8007420:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007426:	e005      	b.n	8007434 <USBD_GetLen+0x1e>
  {
    len++;
 8007428:	7bfb      	ldrb	r3, [r7, #15]
 800742a:	3301      	adds	r3, #1
 800742c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	3301      	adds	r3, #1
 8007432:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1f5      	bne.n	8007428 <USBD_GetLen+0x12>
  }

  return len;
 800743c:	7bfb      	ldrb	r3, [r7, #15]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b084      	sub	sp, #16
 800744e:	af00      	add	r7, sp, #0
 8007450:	60f8      	str	r0, [r7, #12]
 8007452:	60b9      	str	r1, [r7, #8]
 8007454:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2202      	movs	r2, #2
 800745a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	2100      	movs	r1, #0
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f003 fb42 	bl	800aafa <USBD_LL_Transmit>

  return USBD_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	2100      	movs	r1, #0
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f003 fb31 	bl	800aafa <USBD_LL_Transmit>

  return USBD_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b084      	sub	sp, #16
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	60b9      	str	r1, [r7, #8]
 80074ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2203      	movs	r2, #3
 80074b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	2100      	movs	r1, #0
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f003 fb35 	bl	800ab3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	2100      	movs	r1, #0
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f003 fb24 	bl	800ab3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b082      	sub	sp, #8
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2204      	movs	r2, #4
 800750a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800750e:	2300      	movs	r3, #0
 8007510:	2200      	movs	r2, #0
 8007512:	2100      	movs	r1, #0
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f003 faf0 	bl	800aafa <USBD_LL_Transmit>

  return USBD_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2205      	movs	r2, #5
 8007530:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007534:	2300      	movs	r3, #0
 8007536:	2200      	movs	r2, #0
 8007538:	2100      	movs	r1, #0
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f003 fafe 	bl	800ab3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3708      	adds	r7, #8
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
	...

0800754c <__NVIC_SetPriority>:
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	4603      	mov	r3, r0
 8007554:	6039      	str	r1, [r7, #0]
 8007556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800755c:	2b00      	cmp	r3, #0
 800755e:	db0a      	blt.n	8007576 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	b2da      	uxtb	r2, r3
 8007564:	490c      	ldr	r1, [pc, #48]	; (8007598 <__NVIC_SetPriority+0x4c>)
 8007566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800756a:	0112      	lsls	r2, r2, #4
 800756c:	b2d2      	uxtb	r2, r2
 800756e:	440b      	add	r3, r1
 8007570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007574:	e00a      	b.n	800758c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	b2da      	uxtb	r2, r3
 800757a:	4908      	ldr	r1, [pc, #32]	; (800759c <__NVIC_SetPriority+0x50>)
 800757c:	79fb      	ldrb	r3, [r7, #7]
 800757e:	f003 030f 	and.w	r3, r3, #15
 8007582:	3b04      	subs	r3, #4
 8007584:	0112      	lsls	r2, r2, #4
 8007586:	b2d2      	uxtb	r2, r2
 8007588:	440b      	add	r3, r1
 800758a:	761a      	strb	r2, [r3, #24]
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr
 8007598:	e000e100 	.word	0xe000e100
 800759c:	e000ed00 	.word	0xe000ed00

080075a0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80075a0:	b580      	push	{r7, lr}
 80075a2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80075a4:	4b05      	ldr	r3, [pc, #20]	; (80075bc <SysTick_Handler+0x1c>)
 80075a6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80075a8:	f001 fdaa 	bl	8009100 <xTaskGetSchedulerState>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d001      	beq.n	80075b6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80075b2:	f002 fb91 	bl	8009cd8 <xPortSysTickHandler>
  }
}
 80075b6:	bf00      	nop
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	e000e010 	.word	0xe000e010

080075c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80075c0:	b580      	push	{r7, lr}
 80075c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80075c4:	2100      	movs	r1, #0
 80075c6:	f06f 0004 	mvn.w	r0, #4
 80075ca:	f7ff ffbf 	bl	800754c <__NVIC_SetPriority>
#endif
}
 80075ce:	bf00      	nop
 80075d0:	bd80      	pop	{r7, pc}
	...

080075d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075da:	f3ef 8305 	mrs	r3, IPSR
 80075de:	603b      	str	r3, [r7, #0]
  return(result);
 80075e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80075e6:	f06f 0305 	mvn.w	r3, #5
 80075ea:	607b      	str	r3, [r7, #4]
 80075ec:	e00c      	b.n	8007608 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80075ee:	4b0a      	ldr	r3, [pc, #40]	; (8007618 <osKernelInitialize+0x44>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d105      	bne.n	8007602 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80075f6:	4b08      	ldr	r3, [pc, #32]	; (8007618 <osKernelInitialize+0x44>)
 80075f8:	2201      	movs	r2, #1
 80075fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80075fc:	2300      	movs	r3, #0
 80075fe:	607b      	str	r3, [r7, #4]
 8007600:	e002      	b.n	8007608 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007602:	f04f 33ff 	mov.w	r3, #4294967295
 8007606:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007608:	687b      	ldr	r3, [r7, #4]
}
 800760a:	4618      	mov	r0, r3
 800760c:	370c      	adds	r7, #12
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	200002b4 	.word	0x200002b4

0800761c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007622:	f3ef 8305 	mrs	r3, IPSR
 8007626:	603b      	str	r3, [r7, #0]
  return(result);
 8007628:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800762a:	2b00      	cmp	r3, #0
 800762c:	d003      	beq.n	8007636 <osKernelStart+0x1a>
    stat = osErrorISR;
 800762e:	f06f 0305 	mvn.w	r3, #5
 8007632:	607b      	str	r3, [r7, #4]
 8007634:	e010      	b.n	8007658 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007636:	4b0b      	ldr	r3, [pc, #44]	; (8007664 <osKernelStart+0x48>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d109      	bne.n	8007652 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800763e:	f7ff ffbf 	bl	80075c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007642:	4b08      	ldr	r3, [pc, #32]	; (8007664 <osKernelStart+0x48>)
 8007644:	2202      	movs	r2, #2
 8007646:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007648:	f001 f912 	bl	8008870 <vTaskStartScheduler>
      stat = osOK;
 800764c:	2300      	movs	r3, #0
 800764e:	607b      	str	r3, [r7, #4]
 8007650:	e002      	b.n	8007658 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007652:	f04f 33ff 	mov.w	r3, #4294967295
 8007656:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007658:	687b      	ldr	r3, [r7, #4]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	200002b4 	.word	0x200002b4

08007668 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007668:	b580      	push	{r7, lr}
 800766a:	b08e      	sub	sp, #56	; 0x38
 800766c:	af04      	add	r7, sp, #16
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007674:	2300      	movs	r3, #0
 8007676:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007678:	f3ef 8305 	mrs	r3, IPSR
 800767c:	617b      	str	r3, [r7, #20]
  return(result);
 800767e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007680:	2b00      	cmp	r3, #0
 8007682:	d17e      	bne.n	8007782 <osThreadNew+0x11a>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d07b      	beq.n	8007782 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800768a:	2380      	movs	r3, #128	; 0x80
 800768c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800768e:	2318      	movs	r3, #24
 8007690:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007692:	2300      	movs	r3, #0
 8007694:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007696:	f04f 33ff 	mov.w	r3, #4294967295
 800769a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d045      	beq.n	800772e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d002      	beq.n	80076b0 <osThreadNew+0x48>
        name = attr->name;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d008      	beq.n	80076d6 <osThreadNew+0x6e>
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	2b38      	cmp	r3, #56	; 0x38
 80076c8:	d805      	bhi.n	80076d6 <osThreadNew+0x6e>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <osThreadNew+0x72>
        return (NULL);
 80076d6:	2300      	movs	r3, #0
 80076d8:	e054      	b.n	8007784 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	089b      	lsrs	r3, r3, #2
 80076e8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00e      	beq.n	8007710 <osThreadNew+0xa8>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	2b5b      	cmp	r3, #91	; 0x5b
 80076f8:	d90a      	bls.n	8007710 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d006      	beq.n	8007710 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d002      	beq.n	8007710 <osThreadNew+0xa8>
        mem = 1;
 800770a:	2301      	movs	r3, #1
 800770c:	61bb      	str	r3, [r7, #24]
 800770e:	e010      	b.n	8007732 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10c      	bne.n	8007732 <osThreadNew+0xca>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d108      	bne.n	8007732 <osThreadNew+0xca>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d104      	bne.n	8007732 <osThreadNew+0xca>
          mem = 0;
 8007728:	2300      	movs	r3, #0
 800772a:	61bb      	str	r3, [r7, #24]
 800772c:	e001      	b.n	8007732 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800772e:	2300      	movs	r3, #0
 8007730:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	2b01      	cmp	r3, #1
 8007736:	d110      	bne.n	800775a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007740:	9202      	str	r2, [sp, #8]
 8007742:	9301      	str	r3, [sp, #4]
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	6a3a      	ldr	r2, [r7, #32]
 800774c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f000 feb8 	bl	80084c4 <xTaskCreateStatic>
 8007754:	4603      	mov	r3, r0
 8007756:	613b      	str	r3, [r7, #16]
 8007758:	e013      	b.n	8007782 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d110      	bne.n	8007782 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	b29a      	uxth	r2, r3
 8007764:	f107 0310 	add.w	r3, r7, #16
 8007768:	9301      	str	r3, [sp, #4]
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	f000 ff03 	bl	800857e <xTaskCreate>
 8007778:	4603      	mov	r3, r0
 800777a:	2b01      	cmp	r3, #1
 800777c:	d001      	beq.n	8007782 <osThreadNew+0x11a>
            hTask = NULL;
 800777e:	2300      	movs	r3, #0
 8007780:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007782:	693b      	ldr	r3, [r7, #16]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3728      	adds	r7, #40	; 0x28
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007794:	f3ef 8305 	mrs	r3, IPSR
 8007798:	60bb      	str	r3, [r7, #8]
  return(result);
 800779a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800779c:	2b00      	cmp	r3, #0
 800779e:	d003      	beq.n	80077a8 <osDelay+0x1c>
    stat = osErrorISR;
 80077a0:	f06f 0305 	mvn.w	r3, #5
 80077a4:	60fb      	str	r3, [r7, #12]
 80077a6:	e007      	b.n	80077b8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80077a8:	2300      	movs	r3, #0
 80077aa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d002      	beq.n	80077b8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f001 f828 	bl	8008808 <vTaskDelay>
    }
  }

  return (stat);
 80077b8:	68fb      	ldr	r3, [r7, #12]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b08a      	sub	sp, #40	; 0x28
 80077c6:	af02      	add	r7, sp, #8
 80077c8:	60f8      	str	r0, [r7, #12]
 80077ca:	60b9      	str	r1, [r7, #8]
 80077cc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80077ce:	2300      	movs	r3, #0
 80077d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077d2:	f3ef 8305 	mrs	r3, IPSR
 80077d6:	613b      	str	r3, [r7, #16]
  return(result);
 80077d8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d15f      	bne.n	800789e <osMessageQueueNew+0xdc>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d05c      	beq.n	800789e <osMessageQueueNew+0xdc>
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d059      	beq.n	800789e <osMessageQueueNew+0xdc>
    mem = -1;
 80077ea:	f04f 33ff 	mov.w	r3, #4294967295
 80077ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d029      	beq.n	800784a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d012      	beq.n	8007824 <osMessageQueueNew+0x62>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	2b4f      	cmp	r3, #79	; 0x4f
 8007804:	d90e      	bls.n	8007824 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00a      	beq.n	8007824 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	695a      	ldr	r2, [r3, #20]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	68b9      	ldr	r1, [r7, #8]
 8007816:	fb01 f303 	mul.w	r3, r1, r3
 800781a:	429a      	cmp	r2, r3
 800781c:	d302      	bcc.n	8007824 <osMessageQueueNew+0x62>
        mem = 1;
 800781e:	2301      	movs	r3, #1
 8007820:	61bb      	str	r3, [r7, #24]
 8007822:	e014      	b.n	800784e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d110      	bne.n	800784e <osMessageQueueNew+0x8c>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10c      	bne.n	800784e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007838:	2b00      	cmp	r3, #0
 800783a:	d108      	bne.n	800784e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	695b      	ldr	r3, [r3, #20]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d104      	bne.n	800784e <osMessageQueueNew+0x8c>
          mem = 0;
 8007844:	2300      	movs	r3, #0
 8007846:	61bb      	str	r3, [r7, #24]
 8007848:	e001      	b.n	800784e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800784a:	2300      	movs	r3, #0
 800784c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d10b      	bne.n	800786c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	691a      	ldr	r2, [r3, #16]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	2100      	movs	r1, #0
 800785e:	9100      	str	r1, [sp, #0]
 8007860:	68b9      	ldr	r1, [r7, #8]
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f000 f970 	bl	8007b48 <xQueueGenericCreateStatic>
 8007868:	61f8      	str	r0, [r7, #28]
 800786a:	e008      	b.n	800787e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d105      	bne.n	800787e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007872:	2200      	movs	r2, #0
 8007874:	68b9      	ldr	r1, [r7, #8]
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f000 f9de 	bl	8007c38 <xQueueGenericCreate>
 800787c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00c      	beq.n	800789e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <osMessageQueueNew+0xd0>
        name = attr->name;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	617b      	str	r3, [r7, #20]
 8007890:	e001      	b.n	8007896 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007892:	2300      	movs	r3, #0
 8007894:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007896:	6979      	ldr	r1, [r7, #20]
 8007898:	69f8      	ldr	r0, [r7, #28]
 800789a:	f000 fdb5 	bl	8008408 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800789e:	69fb      	ldr	r3, [r7, #28]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3720      	adds	r7, #32
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	4a07      	ldr	r2, [pc, #28]	; (80078d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80078b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	4a06      	ldr	r2, [pc, #24]	; (80078d8 <vApplicationGetIdleTaskMemory+0x30>)
 80078be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2280      	movs	r2, #128	; 0x80
 80078c4:	601a      	str	r2, [r3, #0]
}
 80078c6:	bf00      	nop
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	200002b8 	.word	0x200002b8
 80078d8:	20000314 	.word	0x20000314

080078dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4a07      	ldr	r2, [pc, #28]	; (8007908 <vApplicationGetTimerTaskMemory+0x2c>)
 80078ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	4a06      	ldr	r2, [pc, #24]	; (800790c <vApplicationGetTimerTaskMemory+0x30>)
 80078f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078fa:	601a      	str	r2, [r3, #0]
}
 80078fc:	bf00      	nop
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	20000514 	.word	0x20000514
 800790c:	20000570 	.word	0x20000570

08007910 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f103 0208 	add.w	r2, r3, #8
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f04f 32ff 	mov.w	r2, #4294967295
 8007928:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f103 0208 	add.w	r2, r3, #8
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f103 0208 	add.w	r2, r3, #8
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800795e:	bf00      	nop
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800796a:	b480      	push	{r7}
 800796c:	b085      	sub	sp, #20
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	689a      	ldr	r2, [r3, #8]
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	683a      	ldr	r2, [r7, #0]
 8007994:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	1c5a      	adds	r2, r3, #1
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	601a      	str	r2, [r3, #0]
}
 80079a6:	bf00      	nop
 80079a8:	3714      	adds	r7, #20
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr

080079b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079b2:	b480      	push	{r7}
 80079b4:	b085      	sub	sp, #20
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
 80079ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c8:	d103      	bne.n	80079d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	60fb      	str	r3, [r7, #12]
 80079d0:	e00c      	b.n	80079ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	3308      	adds	r3, #8
 80079d6:	60fb      	str	r3, [r7, #12]
 80079d8:	e002      	b.n	80079e0 <vListInsert+0x2e>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	60fb      	str	r3, [r7, #12]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d2f6      	bcs.n	80079da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	683a      	ldr	r2, [r7, #0]
 80079fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	683a      	ldr	r2, [r7, #0]
 8007a06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	1c5a      	adds	r2, r3, #1
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	601a      	str	r2, [r3, #0]
}
 8007a18:	bf00      	nop
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	6892      	ldr	r2, [r2, #8]
 8007a3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	6852      	ldr	r2, [r2, #4]
 8007a44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d103      	bne.n	8007a58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	689a      	ldr	r2, [r3, #8]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	1e5a      	subs	r2, r3, #1
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10a      	bne.n	8007aa2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a9e:	bf00      	nop
 8007aa0:	e7fe      	b.n	8007aa0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007aa2:	f002 f887 	bl	8009bb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aae:	68f9      	ldr	r1, [r7, #12]
 8007ab0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ab2:	fb01 f303 	mul.w	r3, r1, r3
 8007ab6:	441a      	add	r2, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	68f9      	ldr	r1, [r7, #12]
 8007ad6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ad8:	fb01 f303 	mul.w	r3, r1, r3
 8007adc:	441a      	add	r2, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	22ff      	movs	r2, #255	; 0xff
 8007ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	22ff      	movs	r2, #255	; 0xff
 8007aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d114      	bne.n	8007b22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d01a      	beq.n	8007b36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3310      	adds	r3, #16
 8007b04:	4618      	mov	r0, r3
 8007b06:	f001 f93d 	bl	8008d84 <xTaskRemoveFromEventList>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d012      	beq.n	8007b36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007b10:	4b0c      	ldr	r3, [pc, #48]	; (8007b44 <xQueueGenericReset+0xcc>)
 8007b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	e009      	b.n	8007b36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	3310      	adds	r3, #16
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7ff fef2 	bl	8007910 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	3324      	adds	r3, #36	; 0x24
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7ff feed 	bl	8007910 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b36:	f002 f86d 	bl	8009c14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b3a:	2301      	movs	r3, #1
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	e000ed04 	.word	0xe000ed04

08007b48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b08e      	sub	sp, #56	; 0x38
 8007b4c:	af02      	add	r7, sp, #8
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
 8007b54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10a      	bne.n	8007b72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b6e:	bf00      	nop
 8007b70:	e7fe      	b.n	8007b70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10a      	bne.n	8007b8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7c:	f383 8811 	msr	BASEPRI, r3
 8007b80:	f3bf 8f6f 	isb	sy
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b8a:	bf00      	nop
 8007b8c:	e7fe      	b.n	8007b8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d002      	beq.n	8007b9a <xQueueGenericCreateStatic+0x52>
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <xQueueGenericCreateStatic+0x56>
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e000      	b.n	8007ba0 <xQueueGenericCreateStatic+0x58>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10a      	bne.n	8007bba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	623b      	str	r3, [r7, #32]
}
 8007bb6:	bf00      	nop
 8007bb8:	e7fe      	b.n	8007bb8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d102      	bne.n	8007bc6 <xQueueGenericCreateStatic+0x7e>
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d101      	bne.n	8007bca <xQueueGenericCreateStatic+0x82>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e000      	b.n	8007bcc <xQueueGenericCreateStatic+0x84>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10a      	bne.n	8007be6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd4:	f383 8811 	msr	BASEPRI, r3
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	61fb      	str	r3, [r7, #28]
}
 8007be2:	bf00      	nop
 8007be4:	e7fe      	b.n	8007be4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007be6:	2350      	movs	r3, #80	; 0x50
 8007be8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2b50      	cmp	r3, #80	; 0x50
 8007bee:	d00a      	beq.n	8007c06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf4:	f383 8811 	msr	BASEPRI, r3
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	61bb      	str	r3, [r7, #24]
}
 8007c02:	bf00      	nop
 8007c04:	e7fe      	b.n	8007c04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007c06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00d      	beq.n	8007c2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c14:	2201      	movs	r2, #1
 8007c16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	4613      	mov	r3, r2
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	68b9      	ldr	r1, [r7, #8]
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 f83f 	bl	8007cac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3730      	adds	r7, #48	; 0x30
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b08a      	sub	sp, #40	; 0x28
 8007c3c:	af02      	add	r7, sp, #8
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	4613      	mov	r3, r2
 8007c44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10a      	bne.n	8007c62 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	613b      	str	r3, [r7, #16]
}
 8007c5e:	bf00      	nop
 8007c60:	e7fe      	b.n	8007c60 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	68ba      	ldr	r2, [r7, #8]
 8007c66:	fb02 f303 	mul.w	r3, r2, r3
 8007c6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	3350      	adds	r3, #80	; 0x50
 8007c70:	4618      	mov	r0, r3
 8007c72:	f002 f8c1 	bl	8009df8 <pvPortMalloc>
 8007c76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d011      	beq.n	8007ca2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	3350      	adds	r3, #80	; 0x50
 8007c86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c90:	79fa      	ldrb	r2, [r7, #7]
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	4613      	mov	r3, r2
 8007c98:	697a      	ldr	r2, [r7, #20]
 8007c9a:	68b9      	ldr	r1, [r7, #8]
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f000 f805 	bl	8007cac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ca2:	69bb      	ldr	r3, [r7, #24]
	}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3720      	adds	r7, #32
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
 8007cb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d103      	bne.n	8007cc8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	601a      	str	r2, [r3, #0]
 8007cc6:	e002      	b.n	8007cce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007cda:	2101      	movs	r1, #1
 8007cdc:	69b8      	ldr	r0, [r7, #24]
 8007cde:	f7ff fecb 	bl	8007a78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	78fa      	ldrb	r2, [r7, #3]
 8007ce6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007cea:	bf00      	nop
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
	...

08007cf4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b08e      	sub	sp, #56	; 0x38
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]
 8007d00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007d02:	2300      	movs	r3, #0
 8007d04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10a      	bne.n	8007d26 <xQueueGenericSend+0x32>
	__asm volatile
 8007d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d14:	f383 8811 	msr	BASEPRI, r3
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d22:	bf00      	nop
 8007d24:	e7fe      	b.n	8007d24 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d103      	bne.n	8007d34 <xQueueGenericSend+0x40>
 8007d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d101      	bne.n	8007d38 <xQueueGenericSend+0x44>
 8007d34:	2301      	movs	r3, #1
 8007d36:	e000      	b.n	8007d3a <xQueueGenericSend+0x46>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10a      	bne.n	8007d54 <xQueueGenericSend+0x60>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d50:	bf00      	nop
 8007d52:	e7fe      	b.n	8007d52 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d103      	bne.n	8007d62 <xQueueGenericSend+0x6e>
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d101      	bne.n	8007d66 <xQueueGenericSend+0x72>
 8007d62:	2301      	movs	r3, #1
 8007d64:	e000      	b.n	8007d68 <xQueueGenericSend+0x74>
 8007d66:	2300      	movs	r3, #0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d10a      	bne.n	8007d82 <xQueueGenericSend+0x8e>
	__asm volatile
 8007d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d70:	f383 8811 	msr	BASEPRI, r3
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	623b      	str	r3, [r7, #32]
}
 8007d7e:	bf00      	nop
 8007d80:	e7fe      	b.n	8007d80 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d82:	f001 f9bd 	bl	8009100 <xTaskGetSchedulerState>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d102      	bne.n	8007d92 <xQueueGenericSend+0x9e>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d101      	bne.n	8007d96 <xQueueGenericSend+0xa2>
 8007d92:	2301      	movs	r3, #1
 8007d94:	e000      	b.n	8007d98 <xQueueGenericSend+0xa4>
 8007d96:	2300      	movs	r3, #0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10a      	bne.n	8007db2 <xQueueGenericSend+0xbe>
	__asm volatile
 8007d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da0:	f383 8811 	msr	BASEPRI, r3
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	61fb      	str	r3, [r7, #28]
}
 8007dae:	bf00      	nop
 8007db0:	e7fe      	b.n	8007db0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007db2:	f001 feff 	bl	8009bb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d302      	bcc.n	8007dc8 <xQueueGenericSend+0xd4>
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d129      	bne.n	8007e1c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007dc8:	683a      	ldr	r2, [r7, #0]
 8007dca:	68b9      	ldr	r1, [r7, #8]
 8007dcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dce:	f000 fa0b 	bl	80081e8 <prvCopyDataToQueue>
 8007dd2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d010      	beq.n	8007dfe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dde:	3324      	adds	r3, #36	; 0x24
 8007de0:	4618      	mov	r0, r3
 8007de2:	f000 ffcf 	bl	8008d84 <xTaskRemoveFromEventList>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d013      	beq.n	8007e14 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007dec:	4b3f      	ldr	r3, [pc, #252]	; (8007eec <xQueueGenericSend+0x1f8>)
 8007dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	f3bf 8f4f 	dsb	sy
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	e00a      	b.n	8007e14 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d007      	beq.n	8007e14 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007e04:	4b39      	ldr	r3, [pc, #228]	; (8007eec <xQueueGenericSend+0x1f8>)
 8007e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e0a:	601a      	str	r2, [r3, #0]
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e14:	f001 fefe 	bl	8009c14 <vPortExitCritical>
				return pdPASS;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e063      	b.n	8007ee4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d103      	bne.n	8007e2a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e22:	f001 fef7 	bl	8009c14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e26:	2300      	movs	r3, #0
 8007e28:	e05c      	b.n	8007ee4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d106      	bne.n	8007e3e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e30:	f107 0314 	add.w	r3, r7, #20
 8007e34:	4618      	mov	r0, r3
 8007e36:	f001 f809 	bl	8008e4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e3e:	f001 fee9 	bl	8009c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e42:	f000 fd7b 	bl	800893c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e46:	f001 feb5 	bl	8009bb4 <vPortEnterCritical>
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e50:	b25b      	sxtb	r3, r3
 8007e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e56:	d103      	bne.n	8007e60 <xQueueGenericSend+0x16c>
 8007e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e66:	b25b      	sxtb	r3, r3
 8007e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6c:	d103      	bne.n	8007e76 <xQueueGenericSend+0x182>
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e76:	f001 fecd 	bl	8009c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e7a:	1d3a      	adds	r2, r7, #4
 8007e7c:	f107 0314 	add.w	r3, r7, #20
 8007e80:	4611      	mov	r1, r2
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 fff8 	bl	8008e78 <xTaskCheckForTimeOut>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d124      	bne.n	8007ed8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e90:	f000 faa2 	bl	80083d8 <prvIsQueueFull>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d018      	beq.n	8007ecc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9c:	3310      	adds	r3, #16
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	4611      	mov	r1, r2
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 ff1e 	bl	8008ce4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007eaa:	f000 fa2d 	bl	8008308 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007eae:	f000 fd53 	bl	8008958 <xTaskResumeAll>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f47f af7c 	bne.w	8007db2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007eba:	4b0c      	ldr	r3, [pc, #48]	; (8007eec <xQueueGenericSend+0x1f8>)
 8007ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ec0:	601a      	str	r2, [r3, #0]
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	e772      	b.n	8007db2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ece:	f000 fa1b 	bl	8008308 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ed2:	f000 fd41 	bl	8008958 <xTaskResumeAll>
 8007ed6:	e76c      	b.n	8007db2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007ed8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007eda:	f000 fa15 	bl	8008308 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ede:	f000 fd3b 	bl	8008958 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007ee2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3738      	adds	r7, #56	; 0x38
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	e000ed04 	.word	0xe000ed04

08007ef0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b090      	sub	sp, #64	; 0x40
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
 8007efc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10a      	bne.n	8007f1e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f1a:	bf00      	nop
 8007f1c:	e7fe      	b.n	8007f1c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d103      	bne.n	8007f2c <xQueueGenericSendFromISR+0x3c>
 8007f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d101      	bne.n	8007f30 <xQueueGenericSendFromISR+0x40>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e000      	b.n	8007f32 <xQueueGenericSendFromISR+0x42>
 8007f30:	2300      	movs	r3, #0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10a      	bne.n	8007f4c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3a:	f383 8811 	msr	BASEPRI, r3
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	f3bf 8f4f 	dsb	sy
 8007f46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f48:	bf00      	nop
 8007f4a:	e7fe      	b.n	8007f4a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	d103      	bne.n	8007f5a <xQueueGenericSendFromISR+0x6a>
 8007f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d101      	bne.n	8007f5e <xQueueGenericSendFromISR+0x6e>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e000      	b.n	8007f60 <xQueueGenericSendFromISR+0x70>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10a      	bne.n	8007f7a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f68:	f383 8811 	msr	BASEPRI, r3
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	623b      	str	r3, [r7, #32]
}
 8007f76:	bf00      	nop
 8007f78:	e7fe      	b.n	8007f78 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f7a:	f001 fefd 	bl	8009d78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f7e:	f3ef 8211 	mrs	r2, BASEPRI
 8007f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	61fa      	str	r2, [r7, #28]
 8007f94:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f96:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f98:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d302      	bcc.n	8007fac <xQueueGenericSendFromISR+0xbc>
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d12f      	bne.n	800800c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fbc:	683a      	ldr	r2, [r7, #0]
 8007fbe:	68b9      	ldr	r1, [r7, #8]
 8007fc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007fc2:	f000 f911 	bl	80081e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007fc6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fce:	d112      	bne.n	8007ff6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d016      	beq.n	8008006 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fda:	3324      	adds	r3, #36	; 0x24
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 fed1 	bl	8008d84 <xTaskRemoveFromEventList>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00e      	beq.n	8008006 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00b      	beq.n	8008006 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	601a      	str	r2, [r3, #0]
 8007ff4:	e007      	b.n	8008006 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007ff6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	b25a      	sxtb	r2, r3
 8008000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008006:	2301      	movs	r3, #1
 8008008:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800800a:	e001      	b.n	8008010 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800800c:	2300      	movs	r3, #0
 800800e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008012:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800801a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800801c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800801e:	4618      	mov	r0, r3
 8008020:	3740      	adds	r7, #64	; 0x40
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
	...

08008028 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b08c      	sub	sp, #48	; 0x30
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008034:	2300      	movs	r3, #0
 8008036:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800803c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803e:	2b00      	cmp	r3, #0
 8008040:	d10a      	bne.n	8008058 <xQueueReceive+0x30>
	__asm volatile
 8008042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008046:	f383 8811 	msr	BASEPRI, r3
 800804a:	f3bf 8f6f 	isb	sy
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	623b      	str	r3, [r7, #32]
}
 8008054:	bf00      	nop
 8008056:	e7fe      	b.n	8008056 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d103      	bne.n	8008066 <xQueueReceive+0x3e>
 800805e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008062:	2b00      	cmp	r3, #0
 8008064:	d101      	bne.n	800806a <xQueueReceive+0x42>
 8008066:	2301      	movs	r3, #1
 8008068:	e000      	b.n	800806c <xQueueReceive+0x44>
 800806a:	2300      	movs	r3, #0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10a      	bne.n	8008086 <xQueueReceive+0x5e>
	__asm volatile
 8008070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	61fb      	str	r3, [r7, #28]
}
 8008082:	bf00      	nop
 8008084:	e7fe      	b.n	8008084 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008086:	f001 f83b 	bl	8009100 <xTaskGetSchedulerState>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d102      	bne.n	8008096 <xQueueReceive+0x6e>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <xQueueReceive+0x72>
 8008096:	2301      	movs	r3, #1
 8008098:	e000      	b.n	800809c <xQueueReceive+0x74>
 800809a:	2300      	movs	r3, #0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10a      	bne.n	80080b6 <xQueueReceive+0x8e>
	__asm volatile
 80080a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a4:	f383 8811 	msr	BASEPRI, r3
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	61bb      	str	r3, [r7, #24]
}
 80080b2:	bf00      	nop
 80080b4:	e7fe      	b.n	80080b4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080b6:	f001 fd7d 	bl	8009bb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d01f      	beq.n	8008106 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80080c6:	68b9      	ldr	r1, [r7, #8]
 80080c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080ca:	f000 f8f7 	bl	80082bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80080ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d0:	1e5a      	subs	r2, r3, #1
 80080d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00f      	beq.n	80080fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e0:	3310      	adds	r3, #16
 80080e2:	4618      	mov	r0, r3
 80080e4:	f000 fe4e 	bl	8008d84 <xTaskRemoveFromEventList>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d007      	beq.n	80080fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80080ee:	4b3d      	ldr	r3, [pc, #244]	; (80081e4 <xQueueReceive+0x1bc>)
 80080f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080f4:	601a      	str	r2, [r3, #0]
 80080f6:	f3bf 8f4f 	dsb	sy
 80080fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80080fe:	f001 fd89 	bl	8009c14 <vPortExitCritical>
				return pdPASS;
 8008102:	2301      	movs	r3, #1
 8008104:	e069      	b.n	80081da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d103      	bne.n	8008114 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800810c:	f001 fd82 	bl	8009c14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008110:	2300      	movs	r3, #0
 8008112:	e062      	b.n	80081da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008116:	2b00      	cmp	r3, #0
 8008118:	d106      	bne.n	8008128 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800811a:	f107 0310 	add.w	r3, r7, #16
 800811e:	4618      	mov	r0, r3
 8008120:	f000 fe94 	bl	8008e4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008124:	2301      	movs	r3, #1
 8008126:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008128:	f001 fd74 	bl	8009c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800812c:	f000 fc06 	bl	800893c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008130:	f001 fd40 	bl	8009bb4 <vPortEnterCritical>
 8008134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008136:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800813a:	b25b      	sxtb	r3, r3
 800813c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008140:	d103      	bne.n	800814a <xQueueReceive+0x122>
 8008142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008144:	2200      	movs	r2, #0
 8008146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800814a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008150:	b25b      	sxtb	r3, r3
 8008152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008156:	d103      	bne.n	8008160 <xQueueReceive+0x138>
 8008158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815a:	2200      	movs	r2, #0
 800815c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008160:	f001 fd58 	bl	8009c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008164:	1d3a      	adds	r2, r7, #4
 8008166:	f107 0310 	add.w	r3, r7, #16
 800816a:	4611      	mov	r1, r2
 800816c:	4618      	mov	r0, r3
 800816e:	f000 fe83 	bl	8008e78 <xTaskCheckForTimeOut>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d123      	bne.n	80081c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800817a:	f000 f917 	bl	80083ac <prvIsQueueEmpty>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d017      	beq.n	80081b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008186:	3324      	adds	r3, #36	; 0x24
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	4611      	mov	r1, r2
 800818c:	4618      	mov	r0, r3
 800818e:	f000 fda9 	bl	8008ce4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008194:	f000 f8b8 	bl	8008308 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008198:	f000 fbde 	bl	8008958 <xTaskResumeAll>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d189      	bne.n	80080b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80081a2:	4b10      	ldr	r3, [pc, #64]	; (80081e4 <xQueueReceive+0x1bc>)
 80081a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081a8:	601a      	str	r2, [r3, #0]
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	e780      	b.n	80080b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80081b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081b6:	f000 f8a7 	bl	8008308 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081ba:	f000 fbcd 	bl	8008958 <xTaskResumeAll>
 80081be:	e77a      	b.n	80080b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80081c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081c2:	f000 f8a1 	bl	8008308 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081c6:	f000 fbc7 	bl	8008958 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081cc:	f000 f8ee 	bl	80083ac <prvIsQueueEmpty>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f43f af6f 	beq.w	80080b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80081d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3730      	adds	r7, #48	; 0x30
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	e000ed04 	.word	0xe000ed04

080081e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b086      	sub	sp, #24
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80081f4:	2300      	movs	r3, #0
 80081f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008202:	2b00      	cmp	r3, #0
 8008204:	d10d      	bne.n	8008222 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d14d      	bne.n	80082aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	4618      	mov	r0, r3
 8008214:	f000 ff92 	bl	800913c <xTaskPriorityDisinherit>
 8008218:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	609a      	str	r2, [r3, #8]
 8008220:	e043      	b.n	80082aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d119      	bne.n	800825c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6858      	ldr	r0, [r3, #4]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008230:	461a      	mov	r2, r3
 8008232:	68b9      	ldr	r1, [r7, #8]
 8008234:	f002 fd24 	bl	800ac80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008240:	441a      	add	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	685a      	ldr	r2, [r3, #4]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	429a      	cmp	r2, r3
 8008250:	d32b      	bcc.n	80082aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	605a      	str	r2, [r3, #4]
 800825a:	e026      	b.n	80082aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	68d8      	ldr	r0, [r3, #12]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008264:	461a      	mov	r2, r3
 8008266:	68b9      	ldr	r1, [r7, #8]
 8008268:	f002 fd0a 	bl	800ac80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	68da      	ldr	r2, [r3, #12]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008274:	425b      	negs	r3, r3
 8008276:	441a      	add	r2, r3
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	68da      	ldr	r2, [r3, #12]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	429a      	cmp	r2, r3
 8008286:	d207      	bcs.n	8008298 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	689a      	ldr	r2, [r3, #8]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008290:	425b      	negs	r3, r3
 8008292:	441a      	add	r2, r3
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b02      	cmp	r3, #2
 800829c:	d105      	bne.n	80082aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	3b01      	subs	r3, #1
 80082a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	1c5a      	adds	r2, r3, #1
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80082b2:	697b      	ldr	r3, [r7, #20]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3718      	adds	r7, #24
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d018      	beq.n	8008300 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	68da      	ldr	r2, [r3, #12]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d6:	441a      	add	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	68da      	ldr	r2, [r3, #12]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d303      	bcc.n	80082f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	68d9      	ldr	r1, [r3, #12]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f8:	461a      	mov	r2, r3
 80082fa:	6838      	ldr	r0, [r7, #0]
 80082fc:	f002 fcc0 	bl	800ac80 <memcpy>
	}
}
 8008300:	bf00      	nop
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008310:	f001 fc50 	bl	8009bb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800831a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800831c:	e011      	b.n	8008342 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008322:	2b00      	cmp	r3, #0
 8008324:	d012      	beq.n	800834c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	3324      	adds	r3, #36	; 0x24
 800832a:	4618      	mov	r0, r3
 800832c:	f000 fd2a 	bl	8008d84 <xTaskRemoveFromEventList>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008336:	f000 fe01 	bl	8008f3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800833a:	7bfb      	ldrb	r3, [r7, #15]
 800833c:	3b01      	subs	r3, #1
 800833e:	b2db      	uxtb	r3, r3
 8008340:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008346:	2b00      	cmp	r3, #0
 8008348:	dce9      	bgt.n	800831e <prvUnlockQueue+0x16>
 800834a:	e000      	b.n	800834e <prvUnlockQueue+0x46>
					break;
 800834c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	22ff      	movs	r2, #255	; 0xff
 8008352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008356:	f001 fc5d 	bl	8009c14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800835a:	f001 fc2b 	bl	8009bb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008364:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008366:	e011      	b.n	800838c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d012      	beq.n	8008396 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	3310      	adds	r3, #16
 8008374:	4618      	mov	r0, r3
 8008376:	f000 fd05 	bl	8008d84 <xTaskRemoveFromEventList>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d001      	beq.n	8008384 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008380:	f000 fddc 	bl	8008f3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008384:	7bbb      	ldrb	r3, [r7, #14]
 8008386:	3b01      	subs	r3, #1
 8008388:	b2db      	uxtb	r3, r3
 800838a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800838c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008390:	2b00      	cmp	r3, #0
 8008392:	dce9      	bgt.n	8008368 <prvUnlockQueue+0x60>
 8008394:	e000      	b.n	8008398 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008396:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	22ff      	movs	r2, #255	; 0xff
 800839c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80083a0:	f001 fc38 	bl	8009c14 <vPortExitCritical>
}
 80083a4:	bf00      	nop
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083b4:	f001 fbfe 	bl	8009bb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d102      	bne.n	80083c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80083c0:	2301      	movs	r3, #1
 80083c2:	60fb      	str	r3, [r7, #12]
 80083c4:	e001      	b.n	80083ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80083c6:	2300      	movs	r3, #0
 80083c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083ca:	f001 fc23 	bl	8009c14 <vPortExitCritical>

	return xReturn;
 80083ce:	68fb      	ldr	r3, [r7, #12]
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3710      	adds	r7, #16
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083e0:	f001 fbe8 	bl	8009bb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d102      	bne.n	80083f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80083f0:	2301      	movs	r3, #1
 80083f2:	60fb      	str	r3, [r7, #12]
 80083f4:	e001      	b.n	80083fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80083f6:	2300      	movs	r3, #0
 80083f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083fa:	f001 fc0b 	bl	8009c14 <vPortExitCritical>

	return xReturn;
 80083fe:	68fb      	ldr	r3, [r7, #12]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008412:	2300      	movs	r3, #0
 8008414:	60fb      	str	r3, [r7, #12]
 8008416:	e014      	b.n	8008442 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008418:	4a0f      	ldr	r2, [pc, #60]	; (8008458 <vQueueAddToRegistry+0x50>)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10b      	bne.n	800843c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008424:	490c      	ldr	r1, [pc, #48]	; (8008458 <vQueueAddToRegistry+0x50>)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	683a      	ldr	r2, [r7, #0]
 800842a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800842e:	4a0a      	ldr	r2, [pc, #40]	; (8008458 <vQueueAddToRegistry+0x50>)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	00db      	lsls	r3, r3, #3
 8008434:	4413      	add	r3, r2
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800843a:	e006      	b.n	800844a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	3301      	adds	r3, #1
 8008440:	60fb      	str	r3, [r7, #12]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2b07      	cmp	r3, #7
 8008446:	d9e7      	bls.n	8008418 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008448:	bf00      	nop
 800844a:	bf00      	nop
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	20004ea4 	.word	0x20004ea4

0800845c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800845c:	b580      	push	{r7, lr}
 800845e:	b086      	sub	sp, #24
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800846c:	f001 fba2 	bl	8009bb4 <vPortEnterCritical>
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008476:	b25b      	sxtb	r3, r3
 8008478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800847c:	d103      	bne.n	8008486 <vQueueWaitForMessageRestricted+0x2a>
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800848c:	b25b      	sxtb	r3, r3
 800848e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008492:	d103      	bne.n	800849c <vQueueWaitForMessageRestricted+0x40>
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	2200      	movs	r2, #0
 8008498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800849c:	f001 fbba 	bl	8009c14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d106      	bne.n	80084b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	3324      	adds	r3, #36	; 0x24
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	68b9      	ldr	r1, [r7, #8]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f000 fc3b 	bl	8008d2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80084b6:	6978      	ldr	r0, [r7, #20]
 80084b8:	f7ff ff26 	bl	8008308 <prvUnlockQueue>
	}
 80084bc:	bf00      	nop
 80084be:	3718      	adds	r7, #24
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b08e      	sub	sp, #56	; 0x38
 80084c8:	af04      	add	r7, sp, #16
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	607a      	str	r2, [r7, #4]
 80084d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80084d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10a      	bne.n	80084ee <xTaskCreateStatic+0x2a>
	__asm volatile
 80084d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084dc:	f383 8811 	msr	BASEPRI, r3
 80084e0:	f3bf 8f6f 	isb	sy
 80084e4:	f3bf 8f4f 	dsb	sy
 80084e8:	623b      	str	r3, [r7, #32]
}
 80084ea:	bf00      	nop
 80084ec:	e7fe      	b.n	80084ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80084ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10a      	bne.n	800850a <xTaskCreateStatic+0x46>
	__asm volatile
 80084f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f8:	f383 8811 	msr	BASEPRI, r3
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	61fb      	str	r3, [r7, #28]
}
 8008506:	bf00      	nop
 8008508:	e7fe      	b.n	8008508 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800850a:	235c      	movs	r3, #92	; 0x5c
 800850c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	2b5c      	cmp	r3, #92	; 0x5c
 8008512:	d00a      	beq.n	800852a <xTaskCreateStatic+0x66>
	__asm volatile
 8008514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008518:	f383 8811 	msr	BASEPRI, r3
 800851c:	f3bf 8f6f 	isb	sy
 8008520:	f3bf 8f4f 	dsb	sy
 8008524:	61bb      	str	r3, [r7, #24]
}
 8008526:	bf00      	nop
 8008528:	e7fe      	b.n	8008528 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800852a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800852c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852e:	2b00      	cmp	r3, #0
 8008530:	d01e      	beq.n	8008570 <xTaskCreateStatic+0xac>
 8008532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008534:	2b00      	cmp	r3, #0
 8008536:	d01b      	beq.n	8008570 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800853c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008540:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008544:	2202      	movs	r2, #2
 8008546:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800854a:	2300      	movs	r3, #0
 800854c:	9303      	str	r3, [sp, #12]
 800854e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008550:	9302      	str	r3, [sp, #8]
 8008552:	f107 0314 	add.w	r3, r7, #20
 8008556:	9301      	str	r3, [sp, #4]
 8008558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855a:	9300      	str	r3, [sp, #0]
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	68b9      	ldr	r1, [r7, #8]
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f000 f850 	bl	8008608 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008568:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800856a:	f000 f8dd 	bl	8008728 <prvAddNewTaskToReadyList>
 800856e:	e001      	b.n	8008574 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008570:	2300      	movs	r3, #0
 8008572:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008574:	697b      	ldr	r3, [r7, #20]
	}
 8008576:	4618      	mov	r0, r3
 8008578:	3728      	adds	r7, #40	; 0x28
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800857e:	b580      	push	{r7, lr}
 8008580:	b08c      	sub	sp, #48	; 0x30
 8008582:	af04      	add	r7, sp, #16
 8008584:	60f8      	str	r0, [r7, #12]
 8008586:	60b9      	str	r1, [r7, #8]
 8008588:	603b      	str	r3, [r7, #0]
 800858a:	4613      	mov	r3, r2
 800858c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800858e:	88fb      	ldrh	r3, [r7, #6]
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4618      	mov	r0, r3
 8008594:	f001 fc30 	bl	8009df8 <pvPortMalloc>
 8008598:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00e      	beq.n	80085be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80085a0:	205c      	movs	r0, #92	; 0x5c
 80085a2:	f001 fc29 	bl	8009df8 <pvPortMalloc>
 80085a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d003      	beq.n	80085b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	697a      	ldr	r2, [r7, #20]
 80085b2:	631a      	str	r2, [r3, #48]	; 0x30
 80085b4:	e005      	b.n	80085c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80085b6:	6978      	ldr	r0, [r7, #20]
 80085b8:	f001 fcea 	bl	8009f90 <vPortFree>
 80085bc:	e001      	b.n	80085c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80085be:	2300      	movs	r3, #0
 80085c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d017      	beq.n	80085f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80085d0:	88fa      	ldrh	r2, [r7, #6]
 80085d2:	2300      	movs	r3, #0
 80085d4:	9303      	str	r3, [sp, #12]
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	9302      	str	r3, [sp, #8]
 80085da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085dc:	9301      	str	r3, [sp, #4]
 80085de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	68b9      	ldr	r1, [r7, #8]
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f000 f80e 	bl	8008608 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085ec:	69f8      	ldr	r0, [r7, #28]
 80085ee:	f000 f89b 	bl	8008728 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80085f2:	2301      	movs	r3, #1
 80085f4:	61bb      	str	r3, [r7, #24]
 80085f6:	e002      	b.n	80085fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80085f8:	f04f 33ff 	mov.w	r3, #4294967295
 80085fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085fe:	69bb      	ldr	r3, [r7, #24]
	}
 8008600:	4618      	mov	r0, r3
 8008602:	3720      	adds	r7, #32
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b088      	sub	sp, #32
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
 8008614:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008618:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	461a      	mov	r2, r3
 8008620:	21a5      	movs	r1, #165	; 0xa5
 8008622:	f002 fb3b 	bl	800ac9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008630:	3b01      	subs	r3, #1
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	f023 0307 	bic.w	r3, r3, #7
 800863e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	f003 0307 	and.w	r3, r3, #7
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00a      	beq.n	8008660 <prvInitialiseNewTask+0x58>
	__asm volatile
 800864a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864e:	f383 8811 	msr	BASEPRI, r3
 8008652:	f3bf 8f6f 	isb	sy
 8008656:	f3bf 8f4f 	dsb	sy
 800865a:	617b      	str	r3, [r7, #20]
}
 800865c:	bf00      	nop
 800865e:	e7fe      	b.n	800865e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d01f      	beq.n	80086a6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008666:	2300      	movs	r3, #0
 8008668:	61fb      	str	r3, [r7, #28]
 800866a:	e012      	b.n	8008692 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	4413      	add	r3, r2
 8008672:	7819      	ldrb	r1, [r3, #0]
 8008674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	4413      	add	r3, r2
 800867a:	3334      	adds	r3, #52	; 0x34
 800867c:	460a      	mov	r2, r1
 800867e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	69fb      	ldr	r3, [r7, #28]
 8008684:	4413      	add	r3, r2
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d006      	beq.n	800869a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	3301      	adds	r3, #1
 8008690:	61fb      	str	r3, [r7, #28]
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	2b0f      	cmp	r3, #15
 8008696:	d9e9      	bls.n	800866c <prvInitialiseNewTask+0x64>
 8008698:	e000      	b.n	800869c <prvInitialiseNewTask+0x94>
			{
				break;
 800869a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800869c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086a4:	e003      	b.n	80086ae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80086a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80086ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b0:	2b37      	cmp	r3, #55	; 0x37
 80086b2:	d901      	bls.n	80086b8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80086b4:	2337      	movs	r3, #55	; 0x37
 80086b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80086b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80086be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80086c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c6:	2200      	movs	r2, #0
 80086c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80086ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086cc:	3304      	adds	r3, #4
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7ff f93e 	bl	8007950 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80086d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d6:	3318      	adds	r3, #24
 80086d8:	4618      	mov	r0, r3
 80086da:	f7ff f939 	bl	8007950 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80086de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80086f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f6:	2200      	movs	r2, #0
 80086f8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fc:	2200      	movs	r2, #0
 80086fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008702:	683a      	ldr	r2, [r7, #0]
 8008704:	68f9      	ldr	r1, [r7, #12]
 8008706:	69b8      	ldr	r0, [r7, #24]
 8008708:	f001 f928 	bl	800995c <pxPortInitialiseStack>
 800870c:	4602      	mov	r2, r0
 800870e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008710:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008714:	2b00      	cmp	r3, #0
 8008716:	d002      	beq.n	800871e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800871c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800871e:	bf00      	nop
 8008720:	3720      	adds	r7, #32
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
	...

08008728 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008730:	f001 fa40 	bl	8009bb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008734:	4b2d      	ldr	r3, [pc, #180]	; (80087ec <prvAddNewTaskToReadyList+0xc4>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	3301      	adds	r3, #1
 800873a:	4a2c      	ldr	r2, [pc, #176]	; (80087ec <prvAddNewTaskToReadyList+0xc4>)
 800873c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800873e:	4b2c      	ldr	r3, [pc, #176]	; (80087f0 <prvAddNewTaskToReadyList+0xc8>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d109      	bne.n	800875a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008746:	4a2a      	ldr	r2, [pc, #168]	; (80087f0 <prvAddNewTaskToReadyList+0xc8>)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800874c:	4b27      	ldr	r3, [pc, #156]	; (80087ec <prvAddNewTaskToReadyList+0xc4>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d110      	bne.n	8008776 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008754:	f000 fc16 	bl	8008f84 <prvInitialiseTaskLists>
 8008758:	e00d      	b.n	8008776 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800875a:	4b26      	ldr	r3, [pc, #152]	; (80087f4 <prvAddNewTaskToReadyList+0xcc>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d109      	bne.n	8008776 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008762:	4b23      	ldr	r3, [pc, #140]	; (80087f0 <prvAddNewTaskToReadyList+0xc8>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876c:	429a      	cmp	r2, r3
 800876e:	d802      	bhi.n	8008776 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008770:	4a1f      	ldr	r2, [pc, #124]	; (80087f0 <prvAddNewTaskToReadyList+0xc8>)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008776:	4b20      	ldr	r3, [pc, #128]	; (80087f8 <prvAddNewTaskToReadyList+0xd0>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	3301      	adds	r3, #1
 800877c:	4a1e      	ldr	r2, [pc, #120]	; (80087f8 <prvAddNewTaskToReadyList+0xd0>)
 800877e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008780:	4b1d      	ldr	r3, [pc, #116]	; (80087f8 <prvAddNewTaskToReadyList+0xd0>)
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800878c:	4b1b      	ldr	r3, [pc, #108]	; (80087fc <prvAddNewTaskToReadyList+0xd4>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	429a      	cmp	r2, r3
 8008792:	d903      	bls.n	800879c <prvAddNewTaskToReadyList+0x74>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008798:	4a18      	ldr	r2, [pc, #96]	; (80087fc <prvAddNewTaskToReadyList+0xd4>)
 800879a:	6013      	str	r3, [r2, #0]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a0:	4613      	mov	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4a15      	ldr	r2, [pc, #84]	; (8008800 <prvAddNewTaskToReadyList+0xd8>)
 80087aa:	441a      	add	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	3304      	adds	r3, #4
 80087b0:	4619      	mov	r1, r3
 80087b2:	4610      	mov	r0, r2
 80087b4:	f7ff f8d9 	bl	800796a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80087b8:	f001 fa2c 	bl	8009c14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80087bc:	4b0d      	ldr	r3, [pc, #52]	; (80087f4 <prvAddNewTaskToReadyList+0xcc>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00e      	beq.n	80087e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80087c4:	4b0a      	ldr	r3, [pc, #40]	; (80087f0 <prvAddNewTaskToReadyList+0xc8>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d207      	bcs.n	80087e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087d2:	4b0c      	ldr	r3, [pc, #48]	; (8008804 <prvAddNewTaskToReadyList+0xdc>)
 80087d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087d8:	601a      	str	r2, [r3, #0]
 80087da:	f3bf 8f4f 	dsb	sy
 80087de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087e2:	bf00      	nop
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	20000e44 	.word	0x20000e44
 80087f0:	20000970 	.word	0x20000970
 80087f4:	20000e50 	.word	0x20000e50
 80087f8:	20000e60 	.word	0x20000e60
 80087fc:	20000e4c 	.word	0x20000e4c
 8008800:	20000974 	.word	0x20000974
 8008804:	e000ed04 	.word	0xe000ed04

08008808 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008810:	2300      	movs	r3, #0
 8008812:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d017      	beq.n	800884a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800881a:	4b13      	ldr	r3, [pc, #76]	; (8008868 <vTaskDelay+0x60>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00a      	beq.n	8008838 <vTaskDelay+0x30>
	__asm volatile
 8008822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008826:	f383 8811 	msr	BASEPRI, r3
 800882a:	f3bf 8f6f 	isb	sy
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	60bb      	str	r3, [r7, #8]
}
 8008834:	bf00      	nop
 8008836:	e7fe      	b.n	8008836 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008838:	f000 f880 	bl	800893c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800883c:	2100      	movs	r1, #0
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 fcea 	bl	8009218 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008844:	f000 f888 	bl	8008958 <xTaskResumeAll>
 8008848:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d107      	bne.n	8008860 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008850:	4b06      	ldr	r3, [pc, #24]	; (800886c <vTaskDelay+0x64>)
 8008852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008860:	bf00      	nop
 8008862:	3710      	adds	r7, #16
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	20000e6c 	.word	0x20000e6c
 800886c:	e000ed04 	.word	0xe000ed04

08008870 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b08a      	sub	sp, #40	; 0x28
 8008874:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008876:	2300      	movs	r3, #0
 8008878:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800887a:	2300      	movs	r3, #0
 800887c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800887e:	463a      	mov	r2, r7
 8008880:	1d39      	adds	r1, r7, #4
 8008882:	f107 0308 	add.w	r3, r7, #8
 8008886:	4618      	mov	r0, r3
 8008888:	f7ff f80e 	bl	80078a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800888c:	6839      	ldr	r1, [r7, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	9202      	str	r2, [sp, #8]
 8008894:	9301      	str	r3, [sp, #4]
 8008896:	2300      	movs	r3, #0
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	2300      	movs	r3, #0
 800889c:	460a      	mov	r2, r1
 800889e:	4921      	ldr	r1, [pc, #132]	; (8008924 <vTaskStartScheduler+0xb4>)
 80088a0:	4821      	ldr	r0, [pc, #132]	; (8008928 <vTaskStartScheduler+0xb8>)
 80088a2:	f7ff fe0f 	bl	80084c4 <xTaskCreateStatic>
 80088a6:	4603      	mov	r3, r0
 80088a8:	4a20      	ldr	r2, [pc, #128]	; (800892c <vTaskStartScheduler+0xbc>)
 80088aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80088ac:	4b1f      	ldr	r3, [pc, #124]	; (800892c <vTaskStartScheduler+0xbc>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d002      	beq.n	80088ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80088b4:	2301      	movs	r3, #1
 80088b6:	617b      	str	r3, [r7, #20]
 80088b8:	e001      	b.n	80088be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80088ba:	2300      	movs	r3, #0
 80088bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d102      	bne.n	80088ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80088c4:	f000 fcfc 	bl	80092c0 <xTimerCreateTimerTask>
 80088c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d116      	bne.n	80088fe <vTaskStartScheduler+0x8e>
	__asm volatile
 80088d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d4:	f383 8811 	msr	BASEPRI, r3
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	613b      	str	r3, [r7, #16]
}
 80088e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80088e4:	4b12      	ldr	r3, [pc, #72]	; (8008930 <vTaskStartScheduler+0xc0>)
 80088e6:	f04f 32ff 	mov.w	r2, #4294967295
 80088ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088ec:	4b11      	ldr	r3, [pc, #68]	; (8008934 <vTaskStartScheduler+0xc4>)
 80088ee:	2201      	movs	r2, #1
 80088f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80088f2:	4b11      	ldr	r3, [pc, #68]	; (8008938 <vTaskStartScheduler+0xc8>)
 80088f4:	2200      	movs	r2, #0
 80088f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088f8:	f001 f8ba 	bl	8009a70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088fc:	e00e      	b.n	800891c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008904:	d10a      	bne.n	800891c <vTaskStartScheduler+0xac>
	__asm volatile
 8008906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890a:	f383 8811 	msr	BASEPRI, r3
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	60fb      	str	r3, [r7, #12]
}
 8008918:	bf00      	nop
 800891a:	e7fe      	b.n	800891a <vTaskStartScheduler+0xaa>
}
 800891c:	bf00      	nop
 800891e:	3718      	adds	r7, #24
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	0800b64c 	.word	0x0800b64c
 8008928:	08008f55 	.word	0x08008f55
 800892c:	20000e68 	.word	0x20000e68
 8008930:	20000e64 	.word	0x20000e64
 8008934:	20000e50 	.word	0x20000e50
 8008938:	20000e48 	.word	0x20000e48

0800893c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800893c:	b480      	push	{r7}
 800893e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008940:	4b04      	ldr	r3, [pc, #16]	; (8008954 <vTaskSuspendAll+0x18>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	3301      	adds	r3, #1
 8008946:	4a03      	ldr	r2, [pc, #12]	; (8008954 <vTaskSuspendAll+0x18>)
 8008948:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800894a:	bf00      	nop
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr
 8008954:	20000e6c 	.word	0x20000e6c

08008958 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800895e:	2300      	movs	r3, #0
 8008960:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008962:	2300      	movs	r3, #0
 8008964:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008966:	4b42      	ldr	r3, [pc, #264]	; (8008a70 <xTaskResumeAll+0x118>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10a      	bne.n	8008984 <xTaskResumeAll+0x2c>
	__asm volatile
 800896e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	603b      	str	r3, [r7, #0]
}
 8008980:	bf00      	nop
 8008982:	e7fe      	b.n	8008982 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008984:	f001 f916 	bl	8009bb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008988:	4b39      	ldr	r3, [pc, #228]	; (8008a70 <xTaskResumeAll+0x118>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	3b01      	subs	r3, #1
 800898e:	4a38      	ldr	r2, [pc, #224]	; (8008a70 <xTaskResumeAll+0x118>)
 8008990:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008992:	4b37      	ldr	r3, [pc, #220]	; (8008a70 <xTaskResumeAll+0x118>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d162      	bne.n	8008a60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800899a:	4b36      	ldr	r3, [pc, #216]	; (8008a74 <xTaskResumeAll+0x11c>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d05e      	beq.n	8008a60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089a2:	e02f      	b.n	8008a04 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089a4:	4b34      	ldr	r3, [pc, #208]	; (8008a78 <xTaskResumeAll+0x120>)
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	3318      	adds	r3, #24
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7ff f837 	bl	8007a24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	3304      	adds	r3, #4
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7ff f832 	bl	8007a24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c4:	4b2d      	ldr	r3, [pc, #180]	; (8008a7c <xTaskResumeAll+0x124>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d903      	bls.n	80089d4 <xTaskResumeAll+0x7c>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d0:	4a2a      	ldr	r2, [pc, #168]	; (8008a7c <xTaskResumeAll+0x124>)
 80089d2:	6013      	str	r3, [r2, #0]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d8:	4613      	mov	r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4413      	add	r3, r2
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	4a27      	ldr	r2, [pc, #156]	; (8008a80 <xTaskResumeAll+0x128>)
 80089e2:	441a      	add	r2, r3
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	3304      	adds	r3, #4
 80089e8:	4619      	mov	r1, r3
 80089ea:	4610      	mov	r0, r2
 80089ec:	f7fe ffbd 	bl	800796a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f4:	4b23      	ldr	r3, [pc, #140]	; (8008a84 <xTaskResumeAll+0x12c>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d302      	bcc.n	8008a04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80089fe:	4b22      	ldr	r3, [pc, #136]	; (8008a88 <xTaskResumeAll+0x130>)
 8008a00:	2201      	movs	r2, #1
 8008a02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a04:	4b1c      	ldr	r3, [pc, #112]	; (8008a78 <xTaskResumeAll+0x120>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1cb      	bne.n	80089a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d001      	beq.n	8008a16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a12:	f000 fb55 	bl	80090c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008a16:	4b1d      	ldr	r3, [pc, #116]	; (8008a8c <xTaskResumeAll+0x134>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d010      	beq.n	8008a44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a22:	f000 f847 	bl	8008ab4 <xTaskIncrementTick>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d002      	beq.n	8008a32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008a2c:	4b16      	ldr	r3, [pc, #88]	; (8008a88 <xTaskResumeAll+0x130>)
 8008a2e:	2201      	movs	r2, #1
 8008a30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	3b01      	subs	r3, #1
 8008a36:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1f1      	bne.n	8008a22 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008a3e:	4b13      	ldr	r3, [pc, #76]	; (8008a8c <xTaskResumeAll+0x134>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a44:	4b10      	ldr	r3, [pc, #64]	; (8008a88 <xTaskResumeAll+0x130>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d009      	beq.n	8008a60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a50:	4b0f      	ldr	r3, [pc, #60]	; (8008a90 <xTaskResumeAll+0x138>)
 8008a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a56:	601a      	str	r2, [r3, #0]
 8008a58:	f3bf 8f4f 	dsb	sy
 8008a5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a60:	f001 f8d8 	bl	8009c14 <vPortExitCritical>

	return xAlreadyYielded;
 8008a64:	68bb      	ldr	r3, [r7, #8]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	20000e6c 	.word	0x20000e6c
 8008a74:	20000e44 	.word	0x20000e44
 8008a78:	20000e04 	.word	0x20000e04
 8008a7c:	20000e4c 	.word	0x20000e4c
 8008a80:	20000974 	.word	0x20000974
 8008a84:	20000970 	.word	0x20000970
 8008a88:	20000e58 	.word	0x20000e58
 8008a8c:	20000e54 	.word	0x20000e54
 8008a90:	e000ed04 	.word	0xe000ed04

08008a94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a9a:	4b05      	ldr	r3, [pc, #20]	; (8008ab0 <xTaskGetTickCount+0x1c>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008aa0:	687b      	ldr	r3, [r7, #4]
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	370c      	adds	r7, #12
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	20000e48 	.word	0x20000e48

08008ab4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008aba:	2300      	movs	r3, #0
 8008abc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008abe:	4b4f      	ldr	r3, [pc, #316]	; (8008bfc <xTaskIncrementTick+0x148>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f040 808f 	bne.w	8008be6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ac8:	4b4d      	ldr	r3, [pc, #308]	; (8008c00 <xTaskIncrementTick+0x14c>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	3301      	adds	r3, #1
 8008ace:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ad0:	4a4b      	ldr	r2, [pc, #300]	; (8008c00 <xTaskIncrementTick+0x14c>)
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d120      	bne.n	8008b1e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008adc:	4b49      	ldr	r3, [pc, #292]	; (8008c04 <xTaskIncrementTick+0x150>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00a      	beq.n	8008afc <xTaskIncrementTick+0x48>
	__asm volatile
 8008ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aea:	f383 8811 	msr	BASEPRI, r3
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	603b      	str	r3, [r7, #0]
}
 8008af8:	bf00      	nop
 8008afa:	e7fe      	b.n	8008afa <xTaskIncrementTick+0x46>
 8008afc:	4b41      	ldr	r3, [pc, #260]	; (8008c04 <xTaskIncrementTick+0x150>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	60fb      	str	r3, [r7, #12]
 8008b02:	4b41      	ldr	r3, [pc, #260]	; (8008c08 <xTaskIncrementTick+0x154>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a3f      	ldr	r2, [pc, #252]	; (8008c04 <xTaskIncrementTick+0x150>)
 8008b08:	6013      	str	r3, [r2, #0]
 8008b0a:	4a3f      	ldr	r2, [pc, #252]	; (8008c08 <xTaskIncrementTick+0x154>)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6013      	str	r3, [r2, #0]
 8008b10:	4b3e      	ldr	r3, [pc, #248]	; (8008c0c <xTaskIncrementTick+0x158>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	3301      	adds	r3, #1
 8008b16:	4a3d      	ldr	r2, [pc, #244]	; (8008c0c <xTaskIncrementTick+0x158>)
 8008b18:	6013      	str	r3, [r2, #0]
 8008b1a:	f000 fad1 	bl	80090c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b1e:	4b3c      	ldr	r3, [pc, #240]	; (8008c10 <xTaskIncrementTick+0x15c>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	693a      	ldr	r2, [r7, #16]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d349      	bcc.n	8008bbc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b28:	4b36      	ldr	r3, [pc, #216]	; (8008c04 <xTaskIncrementTick+0x150>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d104      	bne.n	8008b3c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b32:	4b37      	ldr	r3, [pc, #220]	; (8008c10 <xTaskIncrementTick+0x15c>)
 8008b34:	f04f 32ff 	mov.w	r2, #4294967295
 8008b38:	601a      	str	r2, [r3, #0]
					break;
 8008b3a:	e03f      	b.n	8008bbc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b3c:	4b31      	ldr	r3, [pc, #196]	; (8008c04 <xTaskIncrementTick+0x150>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d203      	bcs.n	8008b5c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b54:	4a2e      	ldr	r2, [pc, #184]	; (8008c10 <xTaskIncrementTick+0x15c>)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b5a:	e02f      	b.n	8008bbc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	3304      	adds	r3, #4
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7fe ff5f 	bl	8007a24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d004      	beq.n	8008b78 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	3318      	adds	r3, #24
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7fe ff56 	bl	8007a24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b7c:	4b25      	ldr	r3, [pc, #148]	; (8008c14 <xTaskIncrementTick+0x160>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d903      	bls.n	8008b8c <xTaskIncrementTick+0xd8>
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b88:	4a22      	ldr	r2, [pc, #136]	; (8008c14 <xTaskIncrementTick+0x160>)
 8008b8a:	6013      	str	r3, [r2, #0]
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b90:	4613      	mov	r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	4413      	add	r3, r2
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	4a1f      	ldr	r2, [pc, #124]	; (8008c18 <xTaskIncrementTick+0x164>)
 8008b9a:	441a      	add	r2, r3
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	4610      	mov	r0, r2
 8008ba4:	f7fe fee1 	bl	800796a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bac:	4b1b      	ldr	r3, [pc, #108]	; (8008c1c <xTaskIncrementTick+0x168>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d3b8      	bcc.n	8008b28 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bba:	e7b5      	b.n	8008b28 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008bbc:	4b17      	ldr	r3, [pc, #92]	; (8008c1c <xTaskIncrementTick+0x168>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc2:	4915      	ldr	r1, [pc, #84]	; (8008c18 <xTaskIncrementTick+0x164>)
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	440b      	add	r3, r1
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d901      	bls.n	8008bd8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008bd8:	4b11      	ldr	r3, [pc, #68]	; (8008c20 <xTaskIncrementTick+0x16c>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d007      	beq.n	8008bf0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008be0:	2301      	movs	r3, #1
 8008be2:	617b      	str	r3, [r7, #20]
 8008be4:	e004      	b.n	8008bf0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008be6:	4b0f      	ldr	r3, [pc, #60]	; (8008c24 <xTaskIncrementTick+0x170>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	3301      	adds	r3, #1
 8008bec:	4a0d      	ldr	r2, [pc, #52]	; (8008c24 <xTaskIncrementTick+0x170>)
 8008bee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008bf0:	697b      	ldr	r3, [r7, #20]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3718      	adds	r7, #24
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	20000e6c 	.word	0x20000e6c
 8008c00:	20000e48 	.word	0x20000e48
 8008c04:	20000dfc 	.word	0x20000dfc
 8008c08:	20000e00 	.word	0x20000e00
 8008c0c:	20000e5c 	.word	0x20000e5c
 8008c10:	20000e64 	.word	0x20000e64
 8008c14:	20000e4c 	.word	0x20000e4c
 8008c18:	20000974 	.word	0x20000974
 8008c1c:	20000970 	.word	0x20000970
 8008c20:	20000e58 	.word	0x20000e58
 8008c24:	20000e54 	.word	0x20000e54

08008c28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c2e:	4b28      	ldr	r3, [pc, #160]	; (8008cd0 <vTaskSwitchContext+0xa8>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d003      	beq.n	8008c3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c36:	4b27      	ldr	r3, [pc, #156]	; (8008cd4 <vTaskSwitchContext+0xac>)
 8008c38:	2201      	movs	r2, #1
 8008c3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c3c:	e041      	b.n	8008cc2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008c3e:	4b25      	ldr	r3, [pc, #148]	; (8008cd4 <vTaskSwitchContext+0xac>)
 8008c40:	2200      	movs	r2, #0
 8008c42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c44:	4b24      	ldr	r3, [pc, #144]	; (8008cd8 <vTaskSwitchContext+0xb0>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	60fb      	str	r3, [r7, #12]
 8008c4a:	e010      	b.n	8008c6e <vTaskSwitchContext+0x46>
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10a      	bne.n	8008c68 <vTaskSwitchContext+0x40>
	__asm volatile
 8008c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	607b      	str	r3, [r7, #4]
}
 8008c64:	bf00      	nop
 8008c66:	e7fe      	b.n	8008c66 <vTaskSwitchContext+0x3e>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	60fb      	str	r3, [r7, #12]
 8008c6e:	491b      	ldr	r1, [pc, #108]	; (8008cdc <vTaskSwitchContext+0xb4>)
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	4613      	mov	r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	4413      	add	r3, r2
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	440b      	add	r3, r1
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d0e4      	beq.n	8008c4c <vTaskSwitchContext+0x24>
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	4613      	mov	r3, r2
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	4413      	add	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	4a13      	ldr	r2, [pc, #76]	; (8008cdc <vTaskSwitchContext+0xb4>)
 8008c8e:	4413      	add	r3, r2
 8008c90:	60bb      	str	r3, [r7, #8]
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	685a      	ldr	r2, [r3, #4]
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	605a      	str	r2, [r3, #4]
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	685a      	ldr	r2, [r3, #4]
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	3308      	adds	r3, #8
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d104      	bne.n	8008cb2 <vTaskSwitchContext+0x8a>
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	685a      	ldr	r2, [r3, #4]
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	605a      	str	r2, [r3, #4]
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	4a09      	ldr	r2, [pc, #36]	; (8008ce0 <vTaskSwitchContext+0xb8>)
 8008cba:	6013      	str	r3, [r2, #0]
 8008cbc:	4a06      	ldr	r2, [pc, #24]	; (8008cd8 <vTaskSwitchContext+0xb0>)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	6013      	str	r3, [r2, #0]
}
 8008cc2:	bf00      	nop
 8008cc4:	3714      	adds	r7, #20
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	20000e6c 	.word	0x20000e6c
 8008cd4:	20000e58 	.word	0x20000e58
 8008cd8:	20000e4c 	.word	0x20000e4c
 8008cdc:	20000974 	.word	0x20000974
 8008ce0:	20000970 	.word	0x20000970

08008ce4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d10a      	bne.n	8008d0a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf8:	f383 8811 	msr	BASEPRI, r3
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	60fb      	str	r3, [r7, #12]
}
 8008d06:	bf00      	nop
 8008d08:	e7fe      	b.n	8008d08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d0a:	4b07      	ldr	r3, [pc, #28]	; (8008d28 <vTaskPlaceOnEventList+0x44>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	3318      	adds	r3, #24
 8008d10:	4619      	mov	r1, r3
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f7fe fe4d 	bl	80079b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d18:	2101      	movs	r1, #1
 8008d1a:	6838      	ldr	r0, [r7, #0]
 8008d1c:	f000 fa7c 	bl	8009218 <prvAddCurrentTaskToDelayedList>
}
 8008d20:	bf00      	nop
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	20000970 	.word	0x20000970

08008d2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b086      	sub	sp, #24
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d10a      	bne.n	8008d54 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d42:	f383 8811 	msr	BASEPRI, r3
 8008d46:	f3bf 8f6f 	isb	sy
 8008d4a:	f3bf 8f4f 	dsb	sy
 8008d4e:	617b      	str	r3, [r7, #20]
}
 8008d50:	bf00      	nop
 8008d52:	e7fe      	b.n	8008d52 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d54:	4b0a      	ldr	r3, [pc, #40]	; (8008d80 <vTaskPlaceOnEventListRestricted+0x54>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	3318      	adds	r3, #24
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f7fe fe04 	bl	800796a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d002      	beq.n	8008d6e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008d68:	f04f 33ff 	mov.w	r3, #4294967295
 8008d6c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d6e:	6879      	ldr	r1, [r7, #4]
 8008d70:	68b8      	ldr	r0, [r7, #8]
 8008d72:	f000 fa51 	bl	8009218 <prvAddCurrentTaskToDelayedList>
	}
 8008d76:	bf00      	nop
 8008d78:	3718      	adds	r7, #24
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	20000970 	.word	0x20000970

08008d84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b086      	sub	sp, #24
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10a      	bne.n	8008db0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9e:	f383 8811 	msr	BASEPRI, r3
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	f3bf 8f4f 	dsb	sy
 8008daa:	60fb      	str	r3, [r7, #12]
}
 8008dac:	bf00      	nop
 8008dae:	e7fe      	b.n	8008dae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	3318      	adds	r3, #24
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7fe fe35 	bl	8007a24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dba:	4b1e      	ldr	r3, [pc, #120]	; (8008e34 <xTaskRemoveFromEventList+0xb0>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d11d      	bne.n	8008dfe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	3304      	adds	r3, #4
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fe fe2c 	bl	8007a24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd0:	4b19      	ldr	r3, [pc, #100]	; (8008e38 <xTaskRemoveFromEventList+0xb4>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d903      	bls.n	8008de0 <xTaskRemoveFromEventList+0x5c>
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ddc:	4a16      	ldr	r2, [pc, #88]	; (8008e38 <xTaskRemoveFromEventList+0xb4>)
 8008dde:	6013      	str	r3, [r2, #0]
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de4:	4613      	mov	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4413      	add	r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	4a13      	ldr	r2, [pc, #76]	; (8008e3c <xTaskRemoveFromEventList+0xb8>)
 8008dee:	441a      	add	r2, r3
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	3304      	adds	r3, #4
 8008df4:	4619      	mov	r1, r3
 8008df6:	4610      	mov	r0, r2
 8008df8:	f7fe fdb7 	bl	800796a <vListInsertEnd>
 8008dfc:	e005      	b.n	8008e0a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	3318      	adds	r3, #24
 8008e02:	4619      	mov	r1, r3
 8008e04:	480e      	ldr	r0, [pc, #56]	; (8008e40 <xTaskRemoveFromEventList+0xbc>)
 8008e06:	f7fe fdb0 	bl	800796a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e0e:	4b0d      	ldr	r3, [pc, #52]	; (8008e44 <xTaskRemoveFromEventList+0xc0>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d905      	bls.n	8008e24 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e1c:	4b0a      	ldr	r3, [pc, #40]	; (8008e48 <xTaskRemoveFromEventList+0xc4>)
 8008e1e:	2201      	movs	r2, #1
 8008e20:	601a      	str	r2, [r3, #0]
 8008e22:	e001      	b.n	8008e28 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008e24:	2300      	movs	r3, #0
 8008e26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e28:	697b      	ldr	r3, [r7, #20]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3718      	adds	r7, #24
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	20000e6c 	.word	0x20000e6c
 8008e38:	20000e4c 	.word	0x20000e4c
 8008e3c:	20000974 	.word	0x20000974
 8008e40:	20000e04 	.word	0x20000e04
 8008e44:	20000970 	.word	0x20000970
 8008e48:	20000e58 	.word	0x20000e58

08008e4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e54:	4b06      	ldr	r3, [pc, #24]	; (8008e70 <vTaskInternalSetTimeOutState+0x24>)
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e5c:	4b05      	ldr	r3, [pc, #20]	; (8008e74 <vTaskInternalSetTimeOutState+0x28>)
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	605a      	str	r2, [r3, #4]
}
 8008e64:	bf00      	nop
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr
 8008e70:	20000e5c 	.word	0x20000e5c
 8008e74:	20000e48 	.word	0x20000e48

08008e78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b088      	sub	sp, #32
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10a      	bne.n	8008e9e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8c:	f383 8811 	msr	BASEPRI, r3
 8008e90:	f3bf 8f6f 	isb	sy
 8008e94:	f3bf 8f4f 	dsb	sy
 8008e98:	613b      	str	r3, [r7, #16]
}
 8008e9a:	bf00      	nop
 8008e9c:	e7fe      	b.n	8008e9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d10a      	bne.n	8008eba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea8:	f383 8811 	msr	BASEPRI, r3
 8008eac:	f3bf 8f6f 	isb	sy
 8008eb0:	f3bf 8f4f 	dsb	sy
 8008eb4:	60fb      	str	r3, [r7, #12]
}
 8008eb6:	bf00      	nop
 8008eb8:	e7fe      	b.n	8008eb8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008eba:	f000 fe7b 	bl	8009bb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008ebe:	4b1d      	ldr	r3, [pc, #116]	; (8008f34 <xTaskCheckForTimeOut+0xbc>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	69ba      	ldr	r2, [r7, #24]
 8008eca:	1ad3      	subs	r3, r2, r3
 8008ecc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed6:	d102      	bne.n	8008ede <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	61fb      	str	r3, [r7, #28]
 8008edc:	e023      	b.n	8008f26 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	4b15      	ldr	r3, [pc, #84]	; (8008f38 <xTaskCheckForTimeOut+0xc0>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d007      	beq.n	8008efa <xTaskCheckForTimeOut+0x82>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	69ba      	ldr	r2, [r7, #24]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d302      	bcc.n	8008efa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	61fb      	str	r3, [r7, #28]
 8008ef8:	e015      	b.n	8008f26 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	697a      	ldr	r2, [r7, #20]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d20b      	bcs.n	8008f1c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	1ad2      	subs	r2, r2, r3
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f7ff ff9b 	bl	8008e4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f16:	2300      	movs	r3, #0
 8008f18:	61fb      	str	r3, [r7, #28]
 8008f1a:	e004      	b.n	8008f26 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f22:	2301      	movs	r3, #1
 8008f24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f26:	f000 fe75 	bl	8009c14 <vPortExitCritical>

	return xReturn;
 8008f2a:	69fb      	ldr	r3, [r7, #28]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3720      	adds	r7, #32
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	20000e48 	.word	0x20000e48
 8008f38:	20000e5c 	.word	0x20000e5c

08008f3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f40:	4b03      	ldr	r3, [pc, #12]	; (8008f50 <vTaskMissedYield+0x14>)
 8008f42:	2201      	movs	r2, #1
 8008f44:	601a      	str	r2, [r3, #0]
}
 8008f46:	bf00      	nop
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr
 8008f50:	20000e58 	.word	0x20000e58

08008f54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f5c:	f000 f852 	bl	8009004 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f60:	4b06      	ldr	r3, [pc, #24]	; (8008f7c <prvIdleTask+0x28>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d9f9      	bls.n	8008f5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f68:	4b05      	ldr	r3, [pc, #20]	; (8008f80 <prvIdleTask+0x2c>)
 8008f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f6e:	601a      	str	r2, [r3, #0]
 8008f70:	f3bf 8f4f 	dsb	sy
 8008f74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f78:	e7f0      	b.n	8008f5c <prvIdleTask+0x8>
 8008f7a:	bf00      	nop
 8008f7c:	20000974 	.word	0x20000974
 8008f80:	e000ed04 	.word	0xe000ed04

08008f84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	607b      	str	r3, [r7, #4]
 8008f8e:	e00c      	b.n	8008faa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	4613      	mov	r3, r2
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	4413      	add	r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4a12      	ldr	r2, [pc, #72]	; (8008fe4 <prvInitialiseTaskLists+0x60>)
 8008f9c:	4413      	add	r3, r2
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fe fcb6 	bl	8007910 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	607b      	str	r3, [r7, #4]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2b37      	cmp	r3, #55	; 0x37
 8008fae:	d9ef      	bls.n	8008f90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008fb0:	480d      	ldr	r0, [pc, #52]	; (8008fe8 <prvInitialiseTaskLists+0x64>)
 8008fb2:	f7fe fcad 	bl	8007910 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008fb6:	480d      	ldr	r0, [pc, #52]	; (8008fec <prvInitialiseTaskLists+0x68>)
 8008fb8:	f7fe fcaa 	bl	8007910 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008fbc:	480c      	ldr	r0, [pc, #48]	; (8008ff0 <prvInitialiseTaskLists+0x6c>)
 8008fbe:	f7fe fca7 	bl	8007910 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008fc2:	480c      	ldr	r0, [pc, #48]	; (8008ff4 <prvInitialiseTaskLists+0x70>)
 8008fc4:	f7fe fca4 	bl	8007910 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008fc8:	480b      	ldr	r0, [pc, #44]	; (8008ff8 <prvInitialiseTaskLists+0x74>)
 8008fca:	f7fe fca1 	bl	8007910 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008fce:	4b0b      	ldr	r3, [pc, #44]	; (8008ffc <prvInitialiseTaskLists+0x78>)
 8008fd0:	4a05      	ldr	r2, [pc, #20]	; (8008fe8 <prvInitialiseTaskLists+0x64>)
 8008fd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008fd4:	4b0a      	ldr	r3, [pc, #40]	; (8009000 <prvInitialiseTaskLists+0x7c>)
 8008fd6:	4a05      	ldr	r2, [pc, #20]	; (8008fec <prvInitialiseTaskLists+0x68>)
 8008fd8:	601a      	str	r2, [r3, #0]
}
 8008fda:	bf00      	nop
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	20000974 	.word	0x20000974
 8008fe8:	20000dd4 	.word	0x20000dd4
 8008fec:	20000de8 	.word	0x20000de8
 8008ff0:	20000e04 	.word	0x20000e04
 8008ff4:	20000e18 	.word	0x20000e18
 8008ff8:	20000e30 	.word	0x20000e30
 8008ffc:	20000dfc 	.word	0x20000dfc
 8009000:	20000e00 	.word	0x20000e00

08009004 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800900a:	e019      	b.n	8009040 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800900c:	f000 fdd2 	bl	8009bb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009010:	4b10      	ldr	r3, [pc, #64]	; (8009054 <prvCheckTasksWaitingTermination+0x50>)
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	3304      	adds	r3, #4
 800901c:	4618      	mov	r0, r3
 800901e:	f7fe fd01 	bl	8007a24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009022:	4b0d      	ldr	r3, [pc, #52]	; (8009058 <prvCheckTasksWaitingTermination+0x54>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	3b01      	subs	r3, #1
 8009028:	4a0b      	ldr	r2, [pc, #44]	; (8009058 <prvCheckTasksWaitingTermination+0x54>)
 800902a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800902c:	4b0b      	ldr	r3, [pc, #44]	; (800905c <prvCheckTasksWaitingTermination+0x58>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3b01      	subs	r3, #1
 8009032:	4a0a      	ldr	r2, [pc, #40]	; (800905c <prvCheckTasksWaitingTermination+0x58>)
 8009034:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009036:	f000 fded 	bl	8009c14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 f810 	bl	8009060 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009040:	4b06      	ldr	r3, [pc, #24]	; (800905c <prvCheckTasksWaitingTermination+0x58>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1e1      	bne.n	800900c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009048:	bf00      	nop
 800904a:	bf00      	nop
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	20000e18 	.word	0x20000e18
 8009058:	20000e44 	.word	0x20000e44
 800905c:	20000e2c 	.word	0x20000e2c

08009060 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800906e:	2b00      	cmp	r3, #0
 8009070:	d108      	bne.n	8009084 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009076:	4618      	mov	r0, r3
 8009078:	f000 ff8a 	bl	8009f90 <vPortFree>
				vPortFree( pxTCB );
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 ff87 	bl	8009f90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009082:	e018      	b.n	80090b6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800908a:	2b01      	cmp	r3, #1
 800908c:	d103      	bne.n	8009096 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 ff7e 	bl	8009f90 <vPortFree>
	}
 8009094:	e00f      	b.n	80090b6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800909c:	2b02      	cmp	r3, #2
 800909e:	d00a      	beq.n	80090b6 <prvDeleteTCB+0x56>
	__asm volatile
 80090a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a4:	f383 8811 	msr	BASEPRI, r3
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	60fb      	str	r3, [r7, #12]
}
 80090b2:	bf00      	nop
 80090b4:	e7fe      	b.n	80090b4 <prvDeleteTCB+0x54>
	}
 80090b6:	bf00      	nop
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
	...

080090c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090c6:	4b0c      	ldr	r3, [pc, #48]	; (80090f8 <prvResetNextTaskUnblockTime+0x38>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d104      	bne.n	80090da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80090d0:	4b0a      	ldr	r3, [pc, #40]	; (80090fc <prvResetNextTaskUnblockTime+0x3c>)
 80090d2:	f04f 32ff 	mov.w	r2, #4294967295
 80090d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80090d8:	e008      	b.n	80090ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090da:	4b07      	ldr	r3, [pc, #28]	; (80090f8 <prvResetNextTaskUnblockTime+0x38>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	4a04      	ldr	r2, [pc, #16]	; (80090fc <prvResetNextTaskUnblockTime+0x3c>)
 80090ea:	6013      	str	r3, [r2, #0]
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr
 80090f8:	20000dfc 	.word	0x20000dfc
 80090fc:	20000e64 	.word	0x20000e64

08009100 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009106:	4b0b      	ldr	r3, [pc, #44]	; (8009134 <xTaskGetSchedulerState+0x34>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d102      	bne.n	8009114 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800910e:	2301      	movs	r3, #1
 8009110:	607b      	str	r3, [r7, #4]
 8009112:	e008      	b.n	8009126 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009114:	4b08      	ldr	r3, [pc, #32]	; (8009138 <xTaskGetSchedulerState+0x38>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d102      	bne.n	8009122 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800911c:	2302      	movs	r3, #2
 800911e:	607b      	str	r3, [r7, #4]
 8009120:	e001      	b.n	8009126 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009122:	2300      	movs	r3, #0
 8009124:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009126:	687b      	ldr	r3, [r7, #4]
	}
 8009128:	4618      	mov	r0, r3
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr
 8009134:	20000e50 	.word	0x20000e50
 8009138:	20000e6c 	.word	0x20000e6c

0800913c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009148:	2300      	movs	r3, #0
 800914a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d056      	beq.n	8009200 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009152:	4b2e      	ldr	r3, [pc, #184]	; (800920c <xTaskPriorityDisinherit+0xd0>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	693a      	ldr	r2, [r7, #16]
 8009158:	429a      	cmp	r2, r3
 800915a:	d00a      	beq.n	8009172 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800915c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009160:	f383 8811 	msr	BASEPRI, r3
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	f3bf 8f4f 	dsb	sy
 800916c:	60fb      	str	r3, [r7, #12]
}
 800916e:	bf00      	nop
 8009170:	e7fe      	b.n	8009170 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009176:	2b00      	cmp	r3, #0
 8009178:	d10a      	bne.n	8009190 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800917a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917e:	f383 8811 	msr	BASEPRI, r3
 8009182:	f3bf 8f6f 	isb	sy
 8009186:	f3bf 8f4f 	dsb	sy
 800918a:	60bb      	str	r3, [r7, #8]
}
 800918c:	bf00      	nop
 800918e:	e7fe      	b.n	800918e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009194:	1e5a      	subs	r2, r3, #1
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d02c      	beq.n	8009200 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d128      	bne.n	8009200 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	3304      	adds	r3, #4
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7fe fc36 	bl	8007a24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091d0:	4b0f      	ldr	r3, [pc, #60]	; (8009210 <xTaskPriorityDisinherit+0xd4>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d903      	bls.n	80091e0 <xTaskPriorityDisinherit+0xa4>
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091dc:	4a0c      	ldr	r2, [pc, #48]	; (8009210 <xTaskPriorityDisinherit+0xd4>)
 80091de:	6013      	str	r3, [r2, #0]
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e4:	4613      	mov	r3, r2
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	4413      	add	r3, r2
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	4a09      	ldr	r2, [pc, #36]	; (8009214 <xTaskPriorityDisinherit+0xd8>)
 80091ee:	441a      	add	r2, r3
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	3304      	adds	r3, #4
 80091f4:	4619      	mov	r1, r3
 80091f6:	4610      	mov	r0, r2
 80091f8:	f7fe fbb7 	bl	800796a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80091fc:	2301      	movs	r3, #1
 80091fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009200:	697b      	ldr	r3, [r7, #20]
	}
 8009202:	4618      	mov	r0, r3
 8009204:	3718      	adds	r7, #24
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	20000970 	.word	0x20000970
 8009210:	20000e4c 	.word	0x20000e4c
 8009214:	20000974 	.word	0x20000974

08009218 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009222:	4b21      	ldr	r3, [pc, #132]	; (80092a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009228:	4b20      	ldr	r3, [pc, #128]	; (80092ac <prvAddCurrentTaskToDelayedList+0x94>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	3304      	adds	r3, #4
 800922e:	4618      	mov	r0, r3
 8009230:	f7fe fbf8 	bl	8007a24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800923a:	d10a      	bne.n	8009252 <prvAddCurrentTaskToDelayedList+0x3a>
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d007      	beq.n	8009252 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009242:	4b1a      	ldr	r3, [pc, #104]	; (80092ac <prvAddCurrentTaskToDelayedList+0x94>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	3304      	adds	r3, #4
 8009248:	4619      	mov	r1, r3
 800924a:	4819      	ldr	r0, [pc, #100]	; (80092b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800924c:	f7fe fb8d 	bl	800796a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009250:	e026      	b.n	80092a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4413      	add	r3, r2
 8009258:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800925a:	4b14      	ldr	r3, [pc, #80]	; (80092ac <prvAddCurrentTaskToDelayedList+0x94>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	68ba      	ldr	r2, [r7, #8]
 8009260:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009262:	68ba      	ldr	r2, [r7, #8]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	429a      	cmp	r2, r3
 8009268:	d209      	bcs.n	800927e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800926a:	4b12      	ldr	r3, [pc, #72]	; (80092b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	4b0f      	ldr	r3, [pc, #60]	; (80092ac <prvAddCurrentTaskToDelayedList+0x94>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	3304      	adds	r3, #4
 8009274:	4619      	mov	r1, r3
 8009276:	4610      	mov	r0, r2
 8009278:	f7fe fb9b 	bl	80079b2 <vListInsert>
}
 800927c:	e010      	b.n	80092a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800927e:	4b0e      	ldr	r3, [pc, #56]	; (80092b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	4b0a      	ldr	r3, [pc, #40]	; (80092ac <prvAddCurrentTaskToDelayedList+0x94>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	3304      	adds	r3, #4
 8009288:	4619      	mov	r1, r3
 800928a:	4610      	mov	r0, r2
 800928c:	f7fe fb91 	bl	80079b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009290:	4b0a      	ldr	r3, [pc, #40]	; (80092bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68ba      	ldr	r2, [r7, #8]
 8009296:	429a      	cmp	r2, r3
 8009298:	d202      	bcs.n	80092a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800929a:	4a08      	ldr	r2, [pc, #32]	; (80092bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	6013      	str	r3, [r2, #0]
}
 80092a0:	bf00      	nop
 80092a2:	3710      	adds	r7, #16
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	20000e48 	.word	0x20000e48
 80092ac:	20000970 	.word	0x20000970
 80092b0:	20000e30 	.word	0x20000e30
 80092b4:	20000e00 	.word	0x20000e00
 80092b8:	20000dfc 	.word	0x20000dfc
 80092bc:	20000e64 	.word	0x20000e64

080092c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b08a      	sub	sp, #40	; 0x28
 80092c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80092c6:	2300      	movs	r3, #0
 80092c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80092ca:	f000 fb07 	bl	80098dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80092ce:	4b1c      	ldr	r3, [pc, #112]	; (8009340 <xTimerCreateTimerTask+0x80>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d021      	beq.n	800931a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80092d6:	2300      	movs	r3, #0
 80092d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80092da:	2300      	movs	r3, #0
 80092dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80092de:	1d3a      	adds	r2, r7, #4
 80092e0:	f107 0108 	add.w	r1, r7, #8
 80092e4:	f107 030c 	add.w	r3, r7, #12
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7fe faf7 	bl	80078dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80092ee:	6879      	ldr	r1, [r7, #4]
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	68fa      	ldr	r2, [r7, #12]
 80092f4:	9202      	str	r2, [sp, #8]
 80092f6:	9301      	str	r3, [sp, #4]
 80092f8:	2302      	movs	r3, #2
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	2300      	movs	r3, #0
 80092fe:	460a      	mov	r2, r1
 8009300:	4910      	ldr	r1, [pc, #64]	; (8009344 <xTimerCreateTimerTask+0x84>)
 8009302:	4811      	ldr	r0, [pc, #68]	; (8009348 <xTimerCreateTimerTask+0x88>)
 8009304:	f7ff f8de 	bl	80084c4 <xTaskCreateStatic>
 8009308:	4603      	mov	r3, r0
 800930a:	4a10      	ldr	r2, [pc, #64]	; (800934c <xTimerCreateTimerTask+0x8c>)
 800930c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800930e:	4b0f      	ldr	r3, [pc, #60]	; (800934c <xTimerCreateTimerTask+0x8c>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d001      	beq.n	800931a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009316:	2301      	movs	r3, #1
 8009318:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d10a      	bne.n	8009336 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009324:	f383 8811 	msr	BASEPRI, r3
 8009328:	f3bf 8f6f 	isb	sy
 800932c:	f3bf 8f4f 	dsb	sy
 8009330:	613b      	str	r3, [r7, #16]
}
 8009332:	bf00      	nop
 8009334:	e7fe      	b.n	8009334 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009336:	697b      	ldr	r3, [r7, #20]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3718      	adds	r7, #24
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	20000ea0 	.word	0x20000ea0
 8009344:	0800b654 	.word	0x0800b654
 8009348:	08009485 	.word	0x08009485
 800934c:	20000ea4 	.word	0x20000ea4

08009350 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b08a      	sub	sp, #40	; 0x28
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
 800935c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800935e:	2300      	movs	r3, #0
 8009360:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10a      	bne.n	800937e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936c:	f383 8811 	msr	BASEPRI, r3
 8009370:	f3bf 8f6f 	isb	sy
 8009374:	f3bf 8f4f 	dsb	sy
 8009378:	623b      	str	r3, [r7, #32]
}
 800937a:	bf00      	nop
 800937c:	e7fe      	b.n	800937c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800937e:	4b1a      	ldr	r3, [pc, #104]	; (80093e8 <xTimerGenericCommand+0x98>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d02a      	beq.n	80093dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	2b05      	cmp	r3, #5
 8009396:	dc18      	bgt.n	80093ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009398:	f7ff feb2 	bl	8009100 <xTaskGetSchedulerState>
 800939c:	4603      	mov	r3, r0
 800939e:	2b02      	cmp	r3, #2
 80093a0:	d109      	bne.n	80093b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80093a2:	4b11      	ldr	r3, [pc, #68]	; (80093e8 <xTimerGenericCommand+0x98>)
 80093a4:	6818      	ldr	r0, [r3, #0]
 80093a6:	f107 0110 	add.w	r1, r7, #16
 80093aa:	2300      	movs	r3, #0
 80093ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093ae:	f7fe fca1 	bl	8007cf4 <xQueueGenericSend>
 80093b2:	6278      	str	r0, [r7, #36]	; 0x24
 80093b4:	e012      	b.n	80093dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80093b6:	4b0c      	ldr	r3, [pc, #48]	; (80093e8 <xTimerGenericCommand+0x98>)
 80093b8:	6818      	ldr	r0, [r3, #0]
 80093ba:	f107 0110 	add.w	r1, r7, #16
 80093be:	2300      	movs	r3, #0
 80093c0:	2200      	movs	r2, #0
 80093c2:	f7fe fc97 	bl	8007cf4 <xQueueGenericSend>
 80093c6:	6278      	str	r0, [r7, #36]	; 0x24
 80093c8:	e008      	b.n	80093dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80093ca:	4b07      	ldr	r3, [pc, #28]	; (80093e8 <xTimerGenericCommand+0x98>)
 80093cc:	6818      	ldr	r0, [r3, #0]
 80093ce:	f107 0110 	add.w	r1, r7, #16
 80093d2:	2300      	movs	r3, #0
 80093d4:	683a      	ldr	r2, [r7, #0]
 80093d6:	f7fe fd8b 	bl	8007ef0 <xQueueGenericSendFromISR>
 80093da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80093dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3728      	adds	r7, #40	; 0x28
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	20000ea0 	.word	0x20000ea0

080093ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b088      	sub	sp, #32
 80093f0:	af02      	add	r7, sp, #8
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093f6:	4b22      	ldr	r3, [pc, #136]	; (8009480 <prvProcessExpiredTimer+0x94>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	3304      	adds	r3, #4
 8009404:	4618      	mov	r0, r3
 8009406:	f7fe fb0d 	bl	8007a24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009410:	f003 0304 	and.w	r3, r3, #4
 8009414:	2b00      	cmp	r3, #0
 8009416:	d022      	beq.n	800945e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	699a      	ldr	r2, [r3, #24]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	18d1      	adds	r1, r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	6978      	ldr	r0, [r7, #20]
 8009426:	f000 f8d1 	bl	80095cc <prvInsertTimerInActiveList>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d01f      	beq.n	8009470 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009430:	2300      	movs	r3, #0
 8009432:	9300      	str	r3, [sp, #0]
 8009434:	2300      	movs	r3, #0
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	2100      	movs	r1, #0
 800943a:	6978      	ldr	r0, [r7, #20]
 800943c:	f7ff ff88 	bl	8009350 <xTimerGenericCommand>
 8009440:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d113      	bne.n	8009470 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944c:	f383 8811 	msr	BASEPRI, r3
 8009450:	f3bf 8f6f 	isb	sy
 8009454:	f3bf 8f4f 	dsb	sy
 8009458:	60fb      	str	r3, [r7, #12]
}
 800945a:	bf00      	nop
 800945c:	e7fe      	b.n	800945c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009464:	f023 0301 	bic.w	r3, r3, #1
 8009468:	b2da      	uxtb	r2, r3
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	6a1b      	ldr	r3, [r3, #32]
 8009474:	6978      	ldr	r0, [r7, #20]
 8009476:	4798      	blx	r3
}
 8009478:	bf00      	nop
 800947a:	3718      	adds	r7, #24
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	20000e98 	.word	0x20000e98

08009484 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800948c:	f107 0308 	add.w	r3, r7, #8
 8009490:	4618      	mov	r0, r3
 8009492:	f000 f857 	bl	8009544 <prvGetNextExpireTime>
 8009496:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	4619      	mov	r1, r3
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	f000 f803 	bl	80094a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80094a2:	f000 f8d5 	bl	8009650 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80094a6:	e7f1      	b.n	800948c <prvTimerTask+0x8>

080094a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80094b2:	f7ff fa43 	bl	800893c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094b6:	f107 0308 	add.w	r3, r7, #8
 80094ba:	4618      	mov	r0, r3
 80094bc:	f000 f866 	bl	800958c <prvSampleTimeNow>
 80094c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d130      	bne.n	800952a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d10a      	bne.n	80094e4 <prvProcessTimerOrBlockTask+0x3c>
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d806      	bhi.n	80094e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80094d6:	f7ff fa3f 	bl	8008958 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80094da:	68f9      	ldr	r1, [r7, #12]
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f7ff ff85 	bl	80093ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80094e2:	e024      	b.n	800952e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d008      	beq.n	80094fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80094ea:	4b13      	ldr	r3, [pc, #76]	; (8009538 <prvProcessTimerOrBlockTask+0x90>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d101      	bne.n	80094f8 <prvProcessTimerOrBlockTask+0x50>
 80094f4:	2301      	movs	r3, #1
 80094f6:	e000      	b.n	80094fa <prvProcessTimerOrBlockTask+0x52>
 80094f8:	2300      	movs	r3, #0
 80094fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80094fc:	4b0f      	ldr	r3, [pc, #60]	; (800953c <prvProcessTimerOrBlockTask+0x94>)
 80094fe:	6818      	ldr	r0, [r3, #0]
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	1ad3      	subs	r3, r2, r3
 8009506:	683a      	ldr	r2, [r7, #0]
 8009508:	4619      	mov	r1, r3
 800950a:	f7fe ffa7 	bl	800845c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800950e:	f7ff fa23 	bl	8008958 <xTaskResumeAll>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10a      	bne.n	800952e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009518:	4b09      	ldr	r3, [pc, #36]	; (8009540 <prvProcessTimerOrBlockTask+0x98>)
 800951a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800951e:	601a      	str	r2, [r3, #0]
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	f3bf 8f6f 	isb	sy
}
 8009528:	e001      	b.n	800952e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800952a:	f7ff fa15 	bl	8008958 <xTaskResumeAll>
}
 800952e:	bf00      	nop
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	20000e9c 	.word	0x20000e9c
 800953c:	20000ea0 	.word	0x20000ea0
 8009540:	e000ed04 	.word	0xe000ed04

08009544 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009544:	b480      	push	{r7}
 8009546:	b085      	sub	sp, #20
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800954c:	4b0e      	ldr	r3, [pc, #56]	; (8009588 <prvGetNextExpireTime+0x44>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d101      	bne.n	800955a <prvGetNextExpireTime+0x16>
 8009556:	2201      	movs	r2, #1
 8009558:	e000      	b.n	800955c <prvGetNextExpireTime+0x18>
 800955a:	2200      	movs	r2, #0
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d105      	bne.n	8009574 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009568:	4b07      	ldr	r3, [pc, #28]	; (8009588 <prvGetNextExpireTime+0x44>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	60fb      	str	r3, [r7, #12]
 8009572:	e001      	b.n	8009578 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009574:	2300      	movs	r3, #0
 8009576:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009578:	68fb      	ldr	r3, [r7, #12]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3714      	adds	r7, #20
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr
 8009586:	bf00      	nop
 8009588:	20000e98 	.word	0x20000e98

0800958c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009594:	f7ff fa7e 	bl	8008a94 <xTaskGetTickCount>
 8009598:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800959a:	4b0b      	ldr	r3, [pc, #44]	; (80095c8 <prvSampleTimeNow+0x3c>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	68fa      	ldr	r2, [r7, #12]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d205      	bcs.n	80095b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80095a4:	f000 f936 	bl	8009814 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	601a      	str	r2, [r3, #0]
 80095ae:	e002      	b.n	80095b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80095b6:	4a04      	ldr	r2, [pc, #16]	; (80095c8 <prvSampleTimeNow+0x3c>)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80095bc:	68fb      	ldr	r3, [r7, #12]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3710      	adds	r7, #16
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	20000ea8 	.word	0x20000ea8

080095cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b086      	sub	sp, #24
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	607a      	str	r2, [r7, #4]
 80095d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80095da:	2300      	movs	r3, #0
 80095dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80095ea:	68ba      	ldr	r2, [r7, #8]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d812      	bhi.n	8009618 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	1ad2      	subs	r2, r2, r3
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d302      	bcc.n	8009606 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009600:	2301      	movs	r3, #1
 8009602:	617b      	str	r3, [r7, #20]
 8009604:	e01b      	b.n	800963e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009606:	4b10      	ldr	r3, [pc, #64]	; (8009648 <prvInsertTimerInActiveList+0x7c>)
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	3304      	adds	r3, #4
 800960e:	4619      	mov	r1, r3
 8009610:	4610      	mov	r0, r2
 8009612:	f7fe f9ce 	bl	80079b2 <vListInsert>
 8009616:	e012      	b.n	800963e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	429a      	cmp	r2, r3
 800961e:	d206      	bcs.n	800962e <prvInsertTimerInActiveList+0x62>
 8009620:	68ba      	ldr	r2, [r7, #8]
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	429a      	cmp	r2, r3
 8009626:	d302      	bcc.n	800962e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009628:	2301      	movs	r3, #1
 800962a:	617b      	str	r3, [r7, #20]
 800962c:	e007      	b.n	800963e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800962e:	4b07      	ldr	r3, [pc, #28]	; (800964c <prvInsertTimerInActiveList+0x80>)
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	3304      	adds	r3, #4
 8009636:	4619      	mov	r1, r3
 8009638:	4610      	mov	r0, r2
 800963a:	f7fe f9ba 	bl	80079b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800963e:	697b      	ldr	r3, [r7, #20]
}
 8009640:	4618      	mov	r0, r3
 8009642:	3718      	adds	r7, #24
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	20000e9c 	.word	0x20000e9c
 800964c:	20000e98 	.word	0x20000e98

08009650 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b08e      	sub	sp, #56	; 0x38
 8009654:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009656:	e0ca      	b.n	80097ee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2b00      	cmp	r3, #0
 800965c:	da18      	bge.n	8009690 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800965e:	1d3b      	adds	r3, r7, #4
 8009660:	3304      	adds	r3, #4
 8009662:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009666:	2b00      	cmp	r3, #0
 8009668:	d10a      	bne.n	8009680 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800966a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966e:	f383 8811 	msr	BASEPRI, r3
 8009672:	f3bf 8f6f 	isb	sy
 8009676:	f3bf 8f4f 	dsb	sy
 800967a:	61fb      	str	r3, [r7, #28]
}
 800967c:	bf00      	nop
 800967e:	e7fe      	b.n	800967e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009686:	6850      	ldr	r0, [r2, #4]
 8009688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800968a:	6892      	ldr	r2, [r2, #8]
 800968c:	4611      	mov	r1, r2
 800968e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2b00      	cmp	r3, #0
 8009694:	f2c0 80aa 	blt.w	80097ec <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800969c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969e:	695b      	ldr	r3, [r3, #20]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d004      	beq.n	80096ae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a6:	3304      	adds	r3, #4
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7fe f9bb 	bl	8007a24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096ae:	463b      	mov	r3, r7
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7ff ff6b 	bl	800958c <prvSampleTimeNow>
 80096b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2b09      	cmp	r3, #9
 80096bc:	f200 8097 	bhi.w	80097ee <prvProcessReceivedCommands+0x19e>
 80096c0:	a201      	add	r2, pc, #4	; (adr r2, 80096c8 <prvProcessReceivedCommands+0x78>)
 80096c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c6:	bf00      	nop
 80096c8:	080096f1 	.word	0x080096f1
 80096cc:	080096f1 	.word	0x080096f1
 80096d0:	080096f1 	.word	0x080096f1
 80096d4:	08009765 	.word	0x08009765
 80096d8:	08009779 	.word	0x08009779
 80096dc:	080097c3 	.word	0x080097c3
 80096e0:	080096f1 	.word	0x080096f1
 80096e4:	080096f1 	.word	0x080096f1
 80096e8:	08009765 	.word	0x08009765
 80096ec:	08009779 	.word	0x08009779
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80096f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096f6:	f043 0301 	orr.w	r3, r3, #1
 80096fa:	b2da      	uxtb	r2, r3
 80096fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009702:	68ba      	ldr	r2, [r7, #8]
 8009704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009706:	699b      	ldr	r3, [r3, #24]
 8009708:	18d1      	adds	r1, r2, r3
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800970e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009710:	f7ff ff5c 	bl	80095cc <prvInsertTimerInActiveList>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d069      	beq.n	80097ee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800971a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009720:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009728:	f003 0304 	and.w	r3, r3, #4
 800972c:	2b00      	cmp	r3, #0
 800972e:	d05e      	beq.n	80097ee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009734:	699b      	ldr	r3, [r3, #24]
 8009736:	441a      	add	r2, r3
 8009738:	2300      	movs	r3, #0
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	2300      	movs	r3, #0
 800973e:	2100      	movs	r1, #0
 8009740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009742:	f7ff fe05 	bl	8009350 <xTimerGenericCommand>
 8009746:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009748:	6a3b      	ldr	r3, [r7, #32]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d14f      	bne.n	80097ee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800974e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009752:	f383 8811 	msr	BASEPRI, r3
 8009756:	f3bf 8f6f 	isb	sy
 800975a:	f3bf 8f4f 	dsb	sy
 800975e:	61bb      	str	r3, [r7, #24]
}
 8009760:	bf00      	nop
 8009762:	e7fe      	b.n	8009762 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009766:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800976a:	f023 0301 	bic.w	r3, r3, #1
 800976e:	b2da      	uxtb	r2, r3
 8009770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009772:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009776:	e03a      	b.n	80097ee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800977e:	f043 0301 	orr.w	r3, r3, #1
 8009782:	b2da      	uxtb	r2, r3
 8009784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009786:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009792:	699b      	ldr	r3, [r3, #24]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10a      	bne.n	80097ae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979c:	f383 8811 	msr	BASEPRI, r3
 80097a0:	f3bf 8f6f 	isb	sy
 80097a4:	f3bf 8f4f 	dsb	sy
 80097a8:	617b      	str	r3, [r7, #20]
}
 80097aa:	bf00      	nop
 80097ac:	e7fe      	b.n	80097ac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80097ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b0:	699a      	ldr	r2, [r3, #24]
 80097b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b4:	18d1      	adds	r1, r2, r3
 80097b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097bc:	f7ff ff06 	bl	80095cc <prvInsertTimerInActiveList>
					break;
 80097c0:	e015      	b.n	80097ee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80097c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097c8:	f003 0302 	and.w	r3, r3, #2
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d103      	bne.n	80097d8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80097d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097d2:	f000 fbdd 	bl	8009f90 <vPortFree>
 80097d6:	e00a      	b.n	80097ee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097de:	f023 0301 	bic.w	r3, r3, #1
 80097e2:	b2da      	uxtb	r2, r3
 80097e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80097ea:	e000      	b.n	80097ee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80097ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80097ee:	4b08      	ldr	r3, [pc, #32]	; (8009810 <prvProcessReceivedCommands+0x1c0>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	1d39      	adds	r1, r7, #4
 80097f4:	2200      	movs	r2, #0
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7fe fc16 	bl	8008028 <xQueueReceive>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	f47f af2a 	bne.w	8009658 <prvProcessReceivedCommands+0x8>
	}
}
 8009804:	bf00      	nop
 8009806:	bf00      	nop
 8009808:	3730      	adds	r7, #48	; 0x30
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	20000ea0 	.word	0x20000ea0

08009814 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b088      	sub	sp, #32
 8009818:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800981a:	e048      	b.n	80098ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800981c:	4b2d      	ldr	r3, [pc, #180]	; (80098d4 <prvSwitchTimerLists+0xc0>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009826:	4b2b      	ldr	r3, [pc, #172]	; (80098d4 <prvSwitchTimerLists+0xc0>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	3304      	adds	r3, #4
 8009834:	4618      	mov	r0, r3
 8009836:	f7fe f8f5 	bl	8007a24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6a1b      	ldr	r3, [r3, #32]
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009848:	f003 0304 	and.w	r3, r3, #4
 800984c:	2b00      	cmp	r3, #0
 800984e:	d02e      	beq.n	80098ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	699b      	ldr	r3, [r3, #24]
 8009854:	693a      	ldr	r2, [r7, #16]
 8009856:	4413      	add	r3, r2
 8009858:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800985a:	68ba      	ldr	r2, [r7, #8]
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	429a      	cmp	r2, r3
 8009860:	d90e      	bls.n	8009880 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	68ba      	ldr	r2, [r7, #8]
 8009866:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	68fa      	ldr	r2, [r7, #12]
 800986c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800986e:	4b19      	ldr	r3, [pc, #100]	; (80098d4 <prvSwitchTimerLists+0xc0>)
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	3304      	adds	r3, #4
 8009876:	4619      	mov	r1, r3
 8009878:	4610      	mov	r0, r2
 800987a:	f7fe f89a 	bl	80079b2 <vListInsert>
 800987e:	e016      	b.n	80098ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009880:	2300      	movs	r3, #0
 8009882:	9300      	str	r3, [sp, #0]
 8009884:	2300      	movs	r3, #0
 8009886:	693a      	ldr	r2, [r7, #16]
 8009888:	2100      	movs	r1, #0
 800988a:	68f8      	ldr	r0, [r7, #12]
 800988c:	f7ff fd60 	bl	8009350 <xTimerGenericCommand>
 8009890:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d10a      	bne.n	80098ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989c:	f383 8811 	msr	BASEPRI, r3
 80098a0:	f3bf 8f6f 	isb	sy
 80098a4:	f3bf 8f4f 	dsb	sy
 80098a8:	603b      	str	r3, [r7, #0]
}
 80098aa:	bf00      	nop
 80098ac:	e7fe      	b.n	80098ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098ae:	4b09      	ldr	r3, [pc, #36]	; (80098d4 <prvSwitchTimerLists+0xc0>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d1b1      	bne.n	800981c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80098b8:	4b06      	ldr	r3, [pc, #24]	; (80098d4 <prvSwitchTimerLists+0xc0>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80098be:	4b06      	ldr	r3, [pc, #24]	; (80098d8 <prvSwitchTimerLists+0xc4>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a04      	ldr	r2, [pc, #16]	; (80098d4 <prvSwitchTimerLists+0xc0>)
 80098c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80098c6:	4a04      	ldr	r2, [pc, #16]	; (80098d8 <prvSwitchTimerLists+0xc4>)
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	6013      	str	r3, [r2, #0]
}
 80098cc:	bf00      	nop
 80098ce:	3718      	adds	r7, #24
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	20000e98 	.word	0x20000e98
 80098d8:	20000e9c 	.word	0x20000e9c

080098dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80098e2:	f000 f967 	bl	8009bb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80098e6:	4b15      	ldr	r3, [pc, #84]	; (800993c <prvCheckForValidListAndQueue+0x60>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d120      	bne.n	8009930 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80098ee:	4814      	ldr	r0, [pc, #80]	; (8009940 <prvCheckForValidListAndQueue+0x64>)
 80098f0:	f7fe f80e 	bl	8007910 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80098f4:	4813      	ldr	r0, [pc, #76]	; (8009944 <prvCheckForValidListAndQueue+0x68>)
 80098f6:	f7fe f80b 	bl	8007910 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80098fa:	4b13      	ldr	r3, [pc, #76]	; (8009948 <prvCheckForValidListAndQueue+0x6c>)
 80098fc:	4a10      	ldr	r2, [pc, #64]	; (8009940 <prvCheckForValidListAndQueue+0x64>)
 80098fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009900:	4b12      	ldr	r3, [pc, #72]	; (800994c <prvCheckForValidListAndQueue+0x70>)
 8009902:	4a10      	ldr	r2, [pc, #64]	; (8009944 <prvCheckForValidListAndQueue+0x68>)
 8009904:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009906:	2300      	movs	r3, #0
 8009908:	9300      	str	r3, [sp, #0]
 800990a:	4b11      	ldr	r3, [pc, #68]	; (8009950 <prvCheckForValidListAndQueue+0x74>)
 800990c:	4a11      	ldr	r2, [pc, #68]	; (8009954 <prvCheckForValidListAndQueue+0x78>)
 800990e:	2110      	movs	r1, #16
 8009910:	200a      	movs	r0, #10
 8009912:	f7fe f919 	bl	8007b48 <xQueueGenericCreateStatic>
 8009916:	4603      	mov	r3, r0
 8009918:	4a08      	ldr	r2, [pc, #32]	; (800993c <prvCheckForValidListAndQueue+0x60>)
 800991a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800991c:	4b07      	ldr	r3, [pc, #28]	; (800993c <prvCheckForValidListAndQueue+0x60>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d005      	beq.n	8009930 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009924:	4b05      	ldr	r3, [pc, #20]	; (800993c <prvCheckForValidListAndQueue+0x60>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	490b      	ldr	r1, [pc, #44]	; (8009958 <prvCheckForValidListAndQueue+0x7c>)
 800992a:	4618      	mov	r0, r3
 800992c:	f7fe fd6c 	bl	8008408 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009930:	f000 f970 	bl	8009c14 <vPortExitCritical>
}
 8009934:	bf00      	nop
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	20000ea0 	.word	0x20000ea0
 8009940:	20000e70 	.word	0x20000e70
 8009944:	20000e84 	.word	0x20000e84
 8009948:	20000e98 	.word	0x20000e98
 800994c:	20000e9c 	.word	0x20000e9c
 8009950:	20000f4c 	.word	0x20000f4c
 8009954:	20000eac 	.word	0x20000eac
 8009958:	0800b65c 	.word	0x0800b65c

0800995c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800995c:	b480      	push	{r7}
 800995e:	b085      	sub	sp, #20
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	3b04      	subs	r3, #4
 800996c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009974:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	3b04      	subs	r3, #4
 800997a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	f023 0201 	bic.w	r2, r3, #1
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	3b04      	subs	r3, #4
 800998a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800998c:	4a0c      	ldr	r2, [pc, #48]	; (80099c0 <pxPortInitialiseStack+0x64>)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	3b14      	subs	r3, #20
 8009996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	3b04      	subs	r3, #4
 80099a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f06f 0202 	mvn.w	r2, #2
 80099aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	3b20      	subs	r3, #32
 80099b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80099b2:	68fb      	ldr	r3, [r7, #12]
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3714      	adds	r7, #20
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr
 80099c0:	080099c5 	.word	0x080099c5

080099c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80099c4:	b480      	push	{r7}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80099ca:	2300      	movs	r3, #0
 80099cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80099ce:	4b12      	ldr	r3, [pc, #72]	; (8009a18 <prvTaskExitError+0x54>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d6:	d00a      	beq.n	80099ee <prvTaskExitError+0x2a>
	__asm volatile
 80099d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099dc:	f383 8811 	msr	BASEPRI, r3
 80099e0:	f3bf 8f6f 	isb	sy
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	60fb      	str	r3, [r7, #12]
}
 80099ea:	bf00      	nop
 80099ec:	e7fe      	b.n	80099ec <prvTaskExitError+0x28>
	__asm volatile
 80099ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	f3bf 8f6f 	isb	sy
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	60bb      	str	r3, [r7, #8]
}
 8009a00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009a02:	bf00      	nop
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d0fc      	beq.n	8009a04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009a0a:	bf00      	nop
 8009a0c:	bf00      	nop
 8009a0e:	3714      	adds	r7, #20
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr
 8009a18:	200001c0 	.word	0x200001c0
 8009a1c:	00000000 	.word	0x00000000

08009a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009a20:	4b07      	ldr	r3, [pc, #28]	; (8009a40 <pxCurrentTCBConst2>)
 8009a22:	6819      	ldr	r1, [r3, #0]
 8009a24:	6808      	ldr	r0, [r1, #0]
 8009a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a2a:	f380 8809 	msr	PSP, r0
 8009a2e:	f3bf 8f6f 	isb	sy
 8009a32:	f04f 0000 	mov.w	r0, #0
 8009a36:	f380 8811 	msr	BASEPRI, r0
 8009a3a:	4770      	bx	lr
 8009a3c:	f3af 8000 	nop.w

08009a40 <pxCurrentTCBConst2>:
 8009a40:	20000970 	.word	0x20000970
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a44:	bf00      	nop
 8009a46:	bf00      	nop

08009a48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009a48:	4808      	ldr	r0, [pc, #32]	; (8009a6c <prvPortStartFirstTask+0x24>)
 8009a4a:	6800      	ldr	r0, [r0, #0]
 8009a4c:	6800      	ldr	r0, [r0, #0]
 8009a4e:	f380 8808 	msr	MSP, r0
 8009a52:	f04f 0000 	mov.w	r0, #0
 8009a56:	f380 8814 	msr	CONTROL, r0
 8009a5a:	b662      	cpsie	i
 8009a5c:	b661      	cpsie	f
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	f3bf 8f6f 	isb	sy
 8009a66:	df00      	svc	0
 8009a68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a6a:	bf00      	nop
 8009a6c:	e000ed08 	.word	0xe000ed08

08009a70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009a76:	4b46      	ldr	r3, [pc, #280]	; (8009b90 <xPortStartScheduler+0x120>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a46      	ldr	r2, [pc, #280]	; (8009b94 <xPortStartScheduler+0x124>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d10a      	bne.n	8009a96 <xPortStartScheduler+0x26>
	__asm volatile
 8009a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a84:	f383 8811 	msr	BASEPRI, r3
 8009a88:	f3bf 8f6f 	isb	sy
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	613b      	str	r3, [r7, #16]
}
 8009a92:	bf00      	nop
 8009a94:	e7fe      	b.n	8009a94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a96:	4b3e      	ldr	r3, [pc, #248]	; (8009b90 <xPortStartScheduler+0x120>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a3f      	ldr	r2, [pc, #252]	; (8009b98 <xPortStartScheduler+0x128>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d10a      	bne.n	8009ab6 <xPortStartScheduler+0x46>
	__asm volatile
 8009aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa4:	f383 8811 	msr	BASEPRI, r3
 8009aa8:	f3bf 8f6f 	isb	sy
 8009aac:	f3bf 8f4f 	dsb	sy
 8009ab0:	60fb      	str	r3, [r7, #12]
}
 8009ab2:	bf00      	nop
 8009ab4:	e7fe      	b.n	8009ab4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009ab6:	4b39      	ldr	r3, [pc, #228]	; (8009b9c <xPortStartScheduler+0x12c>)
 8009ab8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	22ff      	movs	r2, #255	; 0xff
 8009ac6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ad0:	78fb      	ldrb	r3, [r7, #3]
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009ad8:	b2da      	uxtb	r2, r3
 8009ada:	4b31      	ldr	r3, [pc, #196]	; (8009ba0 <xPortStartScheduler+0x130>)
 8009adc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009ade:	4b31      	ldr	r3, [pc, #196]	; (8009ba4 <xPortStartScheduler+0x134>)
 8009ae0:	2207      	movs	r2, #7
 8009ae2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ae4:	e009      	b.n	8009afa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009ae6:	4b2f      	ldr	r3, [pc, #188]	; (8009ba4 <xPortStartScheduler+0x134>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	3b01      	subs	r3, #1
 8009aec:	4a2d      	ldr	r2, [pc, #180]	; (8009ba4 <xPortStartScheduler+0x134>)
 8009aee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009af0:	78fb      	ldrb	r3, [r7, #3]
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	005b      	lsls	r3, r3, #1
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009afa:	78fb      	ldrb	r3, [r7, #3]
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b02:	2b80      	cmp	r3, #128	; 0x80
 8009b04:	d0ef      	beq.n	8009ae6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009b06:	4b27      	ldr	r3, [pc, #156]	; (8009ba4 <xPortStartScheduler+0x134>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f1c3 0307 	rsb	r3, r3, #7
 8009b0e:	2b04      	cmp	r3, #4
 8009b10:	d00a      	beq.n	8009b28 <xPortStartScheduler+0xb8>
	__asm volatile
 8009b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b16:	f383 8811 	msr	BASEPRI, r3
 8009b1a:	f3bf 8f6f 	isb	sy
 8009b1e:	f3bf 8f4f 	dsb	sy
 8009b22:	60bb      	str	r3, [r7, #8]
}
 8009b24:	bf00      	nop
 8009b26:	e7fe      	b.n	8009b26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009b28:	4b1e      	ldr	r3, [pc, #120]	; (8009ba4 <xPortStartScheduler+0x134>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	021b      	lsls	r3, r3, #8
 8009b2e:	4a1d      	ldr	r2, [pc, #116]	; (8009ba4 <xPortStartScheduler+0x134>)
 8009b30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009b32:	4b1c      	ldr	r3, [pc, #112]	; (8009ba4 <xPortStartScheduler+0x134>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b3a:	4a1a      	ldr	r2, [pc, #104]	; (8009ba4 <xPortStartScheduler+0x134>)
 8009b3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	b2da      	uxtb	r2, r3
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009b46:	4b18      	ldr	r3, [pc, #96]	; (8009ba8 <xPortStartScheduler+0x138>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a17      	ldr	r2, [pc, #92]	; (8009ba8 <xPortStartScheduler+0x138>)
 8009b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b52:	4b15      	ldr	r3, [pc, #84]	; (8009ba8 <xPortStartScheduler+0x138>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a14      	ldr	r2, [pc, #80]	; (8009ba8 <xPortStartScheduler+0x138>)
 8009b58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009b5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b5e:	f000 f8dd 	bl	8009d1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b62:	4b12      	ldr	r3, [pc, #72]	; (8009bac <xPortStartScheduler+0x13c>)
 8009b64:	2200      	movs	r2, #0
 8009b66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b68:	f000 f8fc 	bl	8009d64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b6c:	4b10      	ldr	r3, [pc, #64]	; (8009bb0 <xPortStartScheduler+0x140>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a0f      	ldr	r2, [pc, #60]	; (8009bb0 <xPortStartScheduler+0x140>)
 8009b72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009b76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b78:	f7ff ff66 	bl	8009a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b7c:	f7ff f854 	bl	8008c28 <vTaskSwitchContext>
	prvTaskExitError();
 8009b80:	f7ff ff20 	bl	80099c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3718      	adds	r7, #24
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	e000ed00 	.word	0xe000ed00
 8009b94:	410fc271 	.word	0x410fc271
 8009b98:	410fc270 	.word	0x410fc270
 8009b9c:	e000e400 	.word	0xe000e400
 8009ba0:	20000f9c 	.word	0x20000f9c
 8009ba4:	20000fa0 	.word	0x20000fa0
 8009ba8:	e000ed20 	.word	0xe000ed20
 8009bac:	200001c0 	.word	0x200001c0
 8009bb0:	e000ef34 	.word	0xe000ef34

08009bb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
	__asm volatile
 8009bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bbe:	f383 8811 	msr	BASEPRI, r3
 8009bc2:	f3bf 8f6f 	isb	sy
 8009bc6:	f3bf 8f4f 	dsb	sy
 8009bca:	607b      	str	r3, [r7, #4]
}
 8009bcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009bce:	4b0f      	ldr	r3, [pc, #60]	; (8009c0c <vPortEnterCritical+0x58>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	4a0d      	ldr	r2, [pc, #52]	; (8009c0c <vPortEnterCritical+0x58>)
 8009bd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009bd8:	4b0c      	ldr	r3, [pc, #48]	; (8009c0c <vPortEnterCritical+0x58>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d10f      	bne.n	8009c00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009be0:	4b0b      	ldr	r3, [pc, #44]	; (8009c10 <vPortEnterCritical+0x5c>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00a      	beq.n	8009c00 <vPortEnterCritical+0x4c>
	__asm volatile
 8009bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bee:	f383 8811 	msr	BASEPRI, r3
 8009bf2:	f3bf 8f6f 	isb	sy
 8009bf6:	f3bf 8f4f 	dsb	sy
 8009bfa:	603b      	str	r3, [r7, #0]
}
 8009bfc:	bf00      	nop
 8009bfe:	e7fe      	b.n	8009bfe <vPortEnterCritical+0x4a>
	}
}
 8009c00:	bf00      	nop
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr
 8009c0c:	200001c0 	.word	0x200001c0
 8009c10:	e000ed04 	.word	0xe000ed04

08009c14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009c1a:	4b12      	ldr	r3, [pc, #72]	; (8009c64 <vPortExitCritical+0x50>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10a      	bne.n	8009c38 <vPortExitCritical+0x24>
	__asm volatile
 8009c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	607b      	str	r3, [r7, #4]
}
 8009c34:	bf00      	nop
 8009c36:	e7fe      	b.n	8009c36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009c38:	4b0a      	ldr	r3, [pc, #40]	; (8009c64 <vPortExitCritical+0x50>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	3b01      	subs	r3, #1
 8009c3e:	4a09      	ldr	r2, [pc, #36]	; (8009c64 <vPortExitCritical+0x50>)
 8009c40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c42:	4b08      	ldr	r3, [pc, #32]	; (8009c64 <vPortExitCritical+0x50>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d105      	bne.n	8009c56 <vPortExitCritical+0x42>
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	f383 8811 	msr	BASEPRI, r3
}
 8009c54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c56:	bf00      	nop
 8009c58:	370c      	adds	r7, #12
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	200001c0 	.word	0x200001c0
	...

08009c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c70:	f3ef 8009 	mrs	r0, PSP
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	4b15      	ldr	r3, [pc, #84]	; (8009cd0 <pxCurrentTCBConst>)
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	f01e 0f10 	tst.w	lr, #16
 8009c80:	bf08      	it	eq
 8009c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c8a:	6010      	str	r0, [r2, #0]
 8009c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009c94:	f380 8811 	msr	BASEPRI, r0
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f7fe ffc2 	bl	8008c28 <vTaskSwitchContext>
 8009ca4:	f04f 0000 	mov.w	r0, #0
 8009ca8:	f380 8811 	msr	BASEPRI, r0
 8009cac:	bc09      	pop	{r0, r3}
 8009cae:	6819      	ldr	r1, [r3, #0]
 8009cb0:	6808      	ldr	r0, [r1, #0]
 8009cb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb6:	f01e 0f10 	tst.w	lr, #16
 8009cba:	bf08      	it	eq
 8009cbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009cc0:	f380 8809 	msr	PSP, r0
 8009cc4:	f3bf 8f6f 	isb	sy
 8009cc8:	4770      	bx	lr
 8009cca:	bf00      	nop
 8009ccc:	f3af 8000 	nop.w

08009cd0 <pxCurrentTCBConst>:
 8009cd0:	20000970 	.word	0x20000970
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009cd4:	bf00      	nop
 8009cd6:	bf00      	nop

08009cd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	607b      	str	r3, [r7, #4]
}
 8009cf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009cf2:	f7fe fedf 	bl	8008ab4 <xTaskIncrementTick>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d003      	beq.n	8009d04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009cfc:	4b06      	ldr	r3, [pc, #24]	; (8009d18 <xPortSysTickHandler+0x40>)
 8009cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d02:	601a      	str	r2, [r3, #0]
 8009d04:	2300      	movs	r3, #0
 8009d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	f383 8811 	msr	BASEPRI, r3
}
 8009d0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009d10:	bf00      	nop
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	e000ed04 	.word	0xe000ed04

08009d1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d20:	4b0b      	ldr	r3, [pc, #44]	; (8009d50 <vPortSetupTimerInterrupt+0x34>)
 8009d22:	2200      	movs	r2, #0
 8009d24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d26:	4b0b      	ldr	r3, [pc, #44]	; (8009d54 <vPortSetupTimerInterrupt+0x38>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d2c:	4b0a      	ldr	r3, [pc, #40]	; (8009d58 <vPortSetupTimerInterrupt+0x3c>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a0a      	ldr	r2, [pc, #40]	; (8009d5c <vPortSetupTimerInterrupt+0x40>)
 8009d32:	fba2 2303 	umull	r2, r3, r2, r3
 8009d36:	099b      	lsrs	r3, r3, #6
 8009d38:	4a09      	ldr	r2, [pc, #36]	; (8009d60 <vPortSetupTimerInterrupt+0x44>)
 8009d3a:	3b01      	subs	r3, #1
 8009d3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d3e:	4b04      	ldr	r3, [pc, #16]	; (8009d50 <vPortSetupTimerInterrupt+0x34>)
 8009d40:	2207      	movs	r2, #7
 8009d42:	601a      	str	r2, [r3, #0]
}
 8009d44:	bf00      	nop
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	e000e010 	.word	0xe000e010
 8009d54:	e000e018 	.word	0xe000e018
 8009d58:	200000a4 	.word	0x200000a4
 8009d5c:	10624dd3 	.word	0x10624dd3
 8009d60:	e000e014 	.word	0xe000e014

08009d64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009d74 <vPortEnableVFP+0x10>
 8009d68:	6801      	ldr	r1, [r0, #0]
 8009d6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009d6e:	6001      	str	r1, [r0, #0]
 8009d70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d72:	bf00      	nop
 8009d74:	e000ed88 	.word	0xe000ed88

08009d78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d7e:	f3ef 8305 	mrs	r3, IPSR
 8009d82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2b0f      	cmp	r3, #15
 8009d88:	d914      	bls.n	8009db4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d8a:	4a17      	ldr	r2, [pc, #92]	; (8009de8 <vPortValidateInterruptPriority+0x70>)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	4413      	add	r3, r2
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d94:	4b15      	ldr	r3, [pc, #84]	; (8009dec <vPortValidateInterruptPriority+0x74>)
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	7afa      	ldrb	r2, [r7, #11]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d20a      	bcs.n	8009db4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da2:	f383 8811 	msr	BASEPRI, r3
 8009da6:	f3bf 8f6f 	isb	sy
 8009daa:	f3bf 8f4f 	dsb	sy
 8009dae:	607b      	str	r3, [r7, #4]
}
 8009db0:	bf00      	nop
 8009db2:	e7fe      	b.n	8009db2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009db4:	4b0e      	ldr	r3, [pc, #56]	; (8009df0 <vPortValidateInterruptPriority+0x78>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009dbc:	4b0d      	ldr	r3, [pc, #52]	; (8009df4 <vPortValidateInterruptPriority+0x7c>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d90a      	bls.n	8009dda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc8:	f383 8811 	msr	BASEPRI, r3
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	603b      	str	r3, [r7, #0]
}
 8009dd6:	bf00      	nop
 8009dd8:	e7fe      	b.n	8009dd8 <vPortValidateInterruptPriority+0x60>
	}
 8009dda:	bf00      	nop
 8009ddc:	3714      	adds	r7, #20
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	e000e3f0 	.word	0xe000e3f0
 8009dec:	20000f9c 	.word	0x20000f9c
 8009df0:	e000ed0c 	.word	0xe000ed0c
 8009df4:	20000fa0 	.word	0x20000fa0

08009df8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b08a      	sub	sp, #40	; 0x28
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009e00:	2300      	movs	r3, #0
 8009e02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009e04:	f7fe fd9a 	bl	800893c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009e08:	4b5b      	ldr	r3, [pc, #364]	; (8009f78 <pvPortMalloc+0x180>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d101      	bne.n	8009e14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009e10:	f000 f920 	bl	800a054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009e14:	4b59      	ldr	r3, [pc, #356]	; (8009f7c <pvPortMalloc+0x184>)
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f040 8093 	bne.w	8009f48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d01d      	beq.n	8009e64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009e28:	2208      	movs	r2, #8
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4413      	add	r3, r2
 8009e2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f003 0307 	and.w	r3, r3, #7
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d014      	beq.n	8009e64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f023 0307 	bic.w	r3, r3, #7
 8009e40:	3308      	adds	r3, #8
 8009e42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f003 0307 	and.w	r3, r3, #7
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00a      	beq.n	8009e64 <pvPortMalloc+0x6c>
	__asm volatile
 8009e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e52:	f383 8811 	msr	BASEPRI, r3
 8009e56:	f3bf 8f6f 	isb	sy
 8009e5a:	f3bf 8f4f 	dsb	sy
 8009e5e:	617b      	str	r3, [r7, #20]
}
 8009e60:	bf00      	nop
 8009e62:	e7fe      	b.n	8009e62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d06e      	beq.n	8009f48 <pvPortMalloc+0x150>
 8009e6a:	4b45      	ldr	r3, [pc, #276]	; (8009f80 <pvPortMalloc+0x188>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d869      	bhi.n	8009f48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009e74:	4b43      	ldr	r3, [pc, #268]	; (8009f84 <pvPortMalloc+0x18c>)
 8009e76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009e78:	4b42      	ldr	r3, [pc, #264]	; (8009f84 <pvPortMalloc+0x18c>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e7e:	e004      	b.n	8009e8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d903      	bls.n	8009e9c <pvPortMalloc+0xa4>
 8009e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d1f1      	bne.n	8009e80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e9c:	4b36      	ldr	r3, [pc, #216]	; (8009f78 <pvPortMalloc+0x180>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d050      	beq.n	8009f48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009ea6:	6a3b      	ldr	r3, [r7, #32]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2208      	movs	r2, #8
 8009eac:	4413      	add	r3, r2
 8009eae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	6a3b      	ldr	r3, [r7, #32]
 8009eb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eba:	685a      	ldr	r2, [r3, #4]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	1ad2      	subs	r2, r2, r3
 8009ec0:	2308      	movs	r3, #8
 8009ec2:	005b      	lsls	r3, r3, #1
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d91f      	bls.n	8009f08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	4413      	add	r3, r2
 8009ece:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ed0:	69bb      	ldr	r3, [r7, #24]
 8009ed2:	f003 0307 	and.w	r3, r3, #7
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d00a      	beq.n	8009ef0 <pvPortMalloc+0xf8>
	__asm volatile
 8009eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ede:	f383 8811 	msr	BASEPRI, r3
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	f3bf 8f4f 	dsb	sy
 8009eea:	613b      	str	r3, [r7, #16]
}
 8009eec:	bf00      	nop
 8009eee:	e7fe      	b.n	8009eee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef2:	685a      	ldr	r2, [r3, #4]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	1ad2      	subs	r2, r2, r3
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009f02:	69b8      	ldr	r0, [r7, #24]
 8009f04:	f000 f908 	bl	800a118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009f08:	4b1d      	ldr	r3, [pc, #116]	; (8009f80 <pvPortMalloc+0x188>)
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	1ad3      	subs	r3, r2, r3
 8009f12:	4a1b      	ldr	r2, [pc, #108]	; (8009f80 <pvPortMalloc+0x188>)
 8009f14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009f16:	4b1a      	ldr	r3, [pc, #104]	; (8009f80 <pvPortMalloc+0x188>)
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	4b1b      	ldr	r3, [pc, #108]	; (8009f88 <pvPortMalloc+0x190>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d203      	bcs.n	8009f2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009f22:	4b17      	ldr	r3, [pc, #92]	; (8009f80 <pvPortMalloc+0x188>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a18      	ldr	r2, [pc, #96]	; (8009f88 <pvPortMalloc+0x190>)
 8009f28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2c:	685a      	ldr	r2, [r3, #4]
 8009f2e:	4b13      	ldr	r3, [pc, #76]	; (8009f7c <pvPortMalloc+0x184>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	431a      	orrs	r2, r3
 8009f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009f3e:	4b13      	ldr	r3, [pc, #76]	; (8009f8c <pvPortMalloc+0x194>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	3301      	adds	r3, #1
 8009f44:	4a11      	ldr	r2, [pc, #68]	; (8009f8c <pvPortMalloc+0x194>)
 8009f46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009f48:	f7fe fd06 	bl	8008958 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	f003 0307 	and.w	r3, r3, #7
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00a      	beq.n	8009f6c <pvPortMalloc+0x174>
	__asm volatile
 8009f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5a:	f383 8811 	msr	BASEPRI, r3
 8009f5e:	f3bf 8f6f 	isb	sy
 8009f62:	f3bf 8f4f 	dsb	sy
 8009f66:	60fb      	str	r3, [r7, #12]
}
 8009f68:	bf00      	nop
 8009f6a:	e7fe      	b.n	8009f6a <pvPortMalloc+0x172>
	return pvReturn;
 8009f6c:	69fb      	ldr	r3, [r7, #28]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3728      	adds	r7, #40	; 0x28
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	20004bac 	.word	0x20004bac
 8009f7c:	20004bc0 	.word	0x20004bc0
 8009f80:	20004bb0 	.word	0x20004bb0
 8009f84:	20004ba4 	.word	0x20004ba4
 8009f88:	20004bb4 	.word	0x20004bb4
 8009f8c:	20004bb8 	.word	0x20004bb8

08009f90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b086      	sub	sp, #24
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d04d      	beq.n	800a03e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009fa2:	2308      	movs	r3, #8
 8009fa4:	425b      	negs	r3, r3
 8009fa6:	697a      	ldr	r2, [r7, #20]
 8009fa8:	4413      	add	r3, r2
 8009faa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	685a      	ldr	r2, [r3, #4]
 8009fb4:	4b24      	ldr	r3, [pc, #144]	; (800a048 <vPortFree+0xb8>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4013      	ands	r3, r2
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d10a      	bne.n	8009fd4 <vPortFree+0x44>
	__asm volatile
 8009fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc2:	f383 8811 	msr	BASEPRI, r3
 8009fc6:	f3bf 8f6f 	isb	sy
 8009fca:	f3bf 8f4f 	dsb	sy
 8009fce:	60fb      	str	r3, [r7, #12]
}
 8009fd0:	bf00      	nop
 8009fd2:	e7fe      	b.n	8009fd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00a      	beq.n	8009ff2 <vPortFree+0x62>
	__asm volatile
 8009fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe0:	f383 8811 	msr	BASEPRI, r3
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	f3bf 8f4f 	dsb	sy
 8009fec:	60bb      	str	r3, [r7, #8]
}
 8009fee:	bf00      	nop
 8009ff0:	e7fe      	b.n	8009ff0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	685a      	ldr	r2, [r3, #4]
 8009ff6:	4b14      	ldr	r3, [pc, #80]	; (800a048 <vPortFree+0xb8>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4013      	ands	r3, r2
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d01e      	beq.n	800a03e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d11a      	bne.n	800a03e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	685a      	ldr	r2, [r3, #4]
 800a00c:	4b0e      	ldr	r3, [pc, #56]	; (800a048 <vPortFree+0xb8>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	43db      	mvns	r3, r3
 800a012:	401a      	ands	r2, r3
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a018:	f7fe fc90 	bl	800893c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	685a      	ldr	r2, [r3, #4]
 800a020:	4b0a      	ldr	r3, [pc, #40]	; (800a04c <vPortFree+0xbc>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4413      	add	r3, r2
 800a026:	4a09      	ldr	r2, [pc, #36]	; (800a04c <vPortFree+0xbc>)
 800a028:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a02a:	6938      	ldr	r0, [r7, #16]
 800a02c:	f000 f874 	bl	800a118 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a030:	4b07      	ldr	r3, [pc, #28]	; (800a050 <vPortFree+0xc0>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	3301      	adds	r3, #1
 800a036:	4a06      	ldr	r2, [pc, #24]	; (800a050 <vPortFree+0xc0>)
 800a038:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a03a:	f7fe fc8d 	bl	8008958 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a03e:	bf00      	nop
 800a040:	3718      	adds	r7, #24
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	20004bc0 	.word	0x20004bc0
 800a04c:	20004bb0 	.word	0x20004bb0
 800a050:	20004bbc 	.word	0x20004bbc

0800a054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a054:	b480      	push	{r7}
 800a056:	b085      	sub	sp, #20
 800a058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a05a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a05e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a060:	4b27      	ldr	r3, [pc, #156]	; (800a100 <prvHeapInit+0xac>)
 800a062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f003 0307 	and.w	r3, r3, #7
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00c      	beq.n	800a088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	3307      	adds	r3, #7
 800a072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f023 0307 	bic.w	r3, r3, #7
 800a07a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a07c:	68ba      	ldr	r2, [r7, #8]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	1ad3      	subs	r3, r2, r3
 800a082:	4a1f      	ldr	r2, [pc, #124]	; (800a100 <prvHeapInit+0xac>)
 800a084:	4413      	add	r3, r2
 800a086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a08c:	4a1d      	ldr	r2, [pc, #116]	; (800a104 <prvHeapInit+0xb0>)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a092:	4b1c      	ldr	r3, [pc, #112]	; (800a104 <prvHeapInit+0xb0>)
 800a094:	2200      	movs	r2, #0
 800a096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	68ba      	ldr	r2, [r7, #8]
 800a09c:	4413      	add	r3, r2
 800a09e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a0a0:	2208      	movs	r2, #8
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	1a9b      	subs	r3, r3, r2
 800a0a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f023 0307 	bic.w	r3, r3, #7
 800a0ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	4a15      	ldr	r2, [pc, #84]	; (800a108 <prvHeapInit+0xb4>)
 800a0b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a0b6:	4b14      	ldr	r3, [pc, #80]	; (800a108 <prvHeapInit+0xb4>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a0be:	4b12      	ldr	r3, [pc, #72]	; (800a108 <prvHeapInit+0xb4>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	1ad2      	subs	r2, r2, r3
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a0d4:	4b0c      	ldr	r3, [pc, #48]	; (800a108 <prvHeapInit+0xb4>)
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	4a0a      	ldr	r2, [pc, #40]	; (800a10c <prvHeapInit+0xb8>)
 800a0e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	4a09      	ldr	r2, [pc, #36]	; (800a110 <prvHeapInit+0xbc>)
 800a0ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a0ec:	4b09      	ldr	r3, [pc, #36]	; (800a114 <prvHeapInit+0xc0>)
 800a0ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a0f2:	601a      	str	r2, [r3, #0]
}
 800a0f4:	bf00      	nop
 800a0f6:	3714      	adds	r7, #20
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr
 800a100:	20000fa4 	.word	0x20000fa4
 800a104:	20004ba4 	.word	0x20004ba4
 800a108:	20004bac 	.word	0x20004bac
 800a10c:	20004bb4 	.word	0x20004bb4
 800a110:	20004bb0 	.word	0x20004bb0
 800a114:	20004bc0 	.word	0x20004bc0

0800a118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a118:	b480      	push	{r7}
 800a11a:	b085      	sub	sp, #20
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a120:	4b28      	ldr	r3, [pc, #160]	; (800a1c4 <prvInsertBlockIntoFreeList+0xac>)
 800a122:	60fb      	str	r3, [r7, #12]
 800a124:	e002      	b.n	800a12c <prvInsertBlockIntoFreeList+0x14>
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	60fb      	str	r3, [r7, #12]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	429a      	cmp	r2, r3
 800a134:	d8f7      	bhi.n	800a126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	4413      	add	r3, r2
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	429a      	cmp	r2, r3
 800a146:	d108      	bne.n	800a15a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	685a      	ldr	r2, [r3, #4]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	441a      	add	r2, r3
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	68ba      	ldr	r2, [r7, #8]
 800a164:	441a      	add	r2, r3
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d118      	bne.n	800a1a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	4b15      	ldr	r3, [pc, #84]	; (800a1c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	429a      	cmp	r2, r3
 800a178:	d00d      	beq.n	800a196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	685a      	ldr	r2, [r3, #4]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	441a      	add	r2, r3
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	601a      	str	r2, [r3, #0]
 800a194:	e008      	b.n	800a1a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a196:	4b0c      	ldr	r3, [pc, #48]	; (800a1c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	601a      	str	r2, [r3, #0]
 800a19e:	e003      	b.n	800a1a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d002      	beq.n	800a1b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1b6:	bf00      	nop
 800a1b8:	3714      	adds	r7, #20
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr
 800a1c2:	bf00      	nop
 800a1c4:	20004ba4 	.word	0x20004ba4
 800a1c8:	20004bac 	.word	0x20004bac

0800a1cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	4912      	ldr	r1, [pc, #72]	; (800a21c <MX_USB_DEVICE_Init+0x50>)
 800a1d4:	4812      	ldr	r0, [pc, #72]	; (800a220 <MX_USB_DEVICE_Init+0x54>)
 800a1d6:	f7fc f84f 	bl	8006278 <USBD_Init>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d001      	beq.n	800a1e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a1e0:	f7f7 f80c 	bl	80011fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a1e4:	490f      	ldr	r1, [pc, #60]	; (800a224 <MX_USB_DEVICE_Init+0x58>)
 800a1e6:	480e      	ldr	r0, [pc, #56]	; (800a220 <MX_USB_DEVICE_Init+0x54>)
 800a1e8:	f7fc f876 	bl	80062d8 <USBD_RegisterClass>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d001      	beq.n	800a1f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a1f2:	f7f7 f803 	bl	80011fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a1f6:	490c      	ldr	r1, [pc, #48]	; (800a228 <MX_USB_DEVICE_Init+0x5c>)
 800a1f8:	4809      	ldr	r0, [pc, #36]	; (800a220 <MX_USB_DEVICE_Init+0x54>)
 800a1fa:	f7fb ff97 	bl	800612c <USBD_CDC_RegisterInterface>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d001      	beq.n	800a208 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a204:	f7f6 fffa 	bl	80011fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a208:	4805      	ldr	r0, [pc, #20]	; (800a220 <MX_USB_DEVICE_Init+0x54>)
 800a20a:	f7fc f88c 	bl	8006326 <USBD_Start>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d001      	beq.n	800a218 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a214:	f7f6 fff2 	bl	80011fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a218:	bf00      	nop
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	200001d8 	.word	0x200001d8
 800a220:	20004ee4 	.word	0x20004ee4
 800a224:	200000bc 	.word	0x200000bc
 800a228:	200001c4 	.word	0x200001c4

0800a22c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a230:	2200      	movs	r2, #0
 800a232:	4905      	ldr	r1, [pc, #20]	; (800a248 <CDC_Init_FS+0x1c>)
 800a234:	4805      	ldr	r0, [pc, #20]	; (800a24c <CDC_Init_FS+0x20>)
 800a236:	f7fb ff8e 	bl	8006156 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a23a:	4905      	ldr	r1, [pc, #20]	; (800a250 <CDC_Init_FS+0x24>)
 800a23c:	4803      	ldr	r0, [pc, #12]	; (800a24c <CDC_Init_FS+0x20>)
 800a23e:	f7fb ffa8 	bl	8006192 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a242:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a244:	4618      	mov	r0, r3
 800a246:	bd80      	pop	{r7, pc}
 800a248:	200059b4 	.word	0x200059b4
 800a24c:	20004ee4 	.word	0x20004ee4
 800a250:	200051b4 	.word	0x200051b4

0800a254 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a254:	b480      	push	{r7}
 800a256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a258:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	4603      	mov	r3, r0
 800a26c:	6039      	str	r1, [r7, #0]
 800a26e:	71fb      	strb	r3, [r7, #7]
 800a270:	4613      	mov	r3, r2
 800a272:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a274:	79fb      	ldrb	r3, [r7, #7]
 800a276:	2b23      	cmp	r3, #35	; 0x23
 800a278:	d84a      	bhi.n	800a310 <CDC_Control_FS+0xac>
 800a27a:	a201      	add	r2, pc, #4	; (adr r2, 800a280 <CDC_Control_FS+0x1c>)
 800a27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a280:	0800a311 	.word	0x0800a311
 800a284:	0800a311 	.word	0x0800a311
 800a288:	0800a311 	.word	0x0800a311
 800a28c:	0800a311 	.word	0x0800a311
 800a290:	0800a311 	.word	0x0800a311
 800a294:	0800a311 	.word	0x0800a311
 800a298:	0800a311 	.word	0x0800a311
 800a29c:	0800a311 	.word	0x0800a311
 800a2a0:	0800a311 	.word	0x0800a311
 800a2a4:	0800a311 	.word	0x0800a311
 800a2a8:	0800a311 	.word	0x0800a311
 800a2ac:	0800a311 	.word	0x0800a311
 800a2b0:	0800a311 	.word	0x0800a311
 800a2b4:	0800a311 	.word	0x0800a311
 800a2b8:	0800a311 	.word	0x0800a311
 800a2bc:	0800a311 	.word	0x0800a311
 800a2c0:	0800a311 	.word	0x0800a311
 800a2c4:	0800a311 	.word	0x0800a311
 800a2c8:	0800a311 	.word	0x0800a311
 800a2cc:	0800a311 	.word	0x0800a311
 800a2d0:	0800a311 	.word	0x0800a311
 800a2d4:	0800a311 	.word	0x0800a311
 800a2d8:	0800a311 	.word	0x0800a311
 800a2dc:	0800a311 	.word	0x0800a311
 800a2e0:	0800a311 	.word	0x0800a311
 800a2e4:	0800a311 	.word	0x0800a311
 800a2e8:	0800a311 	.word	0x0800a311
 800a2ec:	0800a311 	.word	0x0800a311
 800a2f0:	0800a311 	.word	0x0800a311
 800a2f4:	0800a311 	.word	0x0800a311
 800a2f8:	0800a311 	.word	0x0800a311
 800a2fc:	0800a311 	.word	0x0800a311
 800a300:	0800a311 	.word	0x0800a311
 800a304:	0800a311 	.word	0x0800a311
 800a308:	0800a311 	.word	0x0800a311
 800a30c:	0800a311 	.word	0x0800a311
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a310:	bf00      	nop
  }

  return (USBD_OK);
 800a312:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a314:	4618      	mov	r0, r3
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a32a:	6879      	ldr	r1, [r7, #4]
 800a32c:	4808      	ldr	r0, [pc, #32]	; (800a350 <CDC_Receive_FS+0x30>)
 800a32e:	f7fb ff30 	bl	8006192 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a332:	4807      	ldr	r0, [pc, #28]	; (800a350 <CDC_Receive_FS+0x30>)
 800a334:	f7fb ff76 	bl	8006224 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallBack(Buf,(uint16_t)*Len);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	4619      	mov	r1, r3
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 f83e 	bl	800a3c2 <CDC_ReceiveCallBack>
  return (USBD_OK);
 800a346:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3708      	adds	r7, #8
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	20004ee4 	.word	0x20004ee4

0800a354 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	460b      	mov	r3, r1
 800a35e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a360:	2300      	movs	r3, #0
 800a362:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a364:	4b0d      	ldr	r3, [pc, #52]	; (800a39c <CDC_Transmit_FS+0x48>)
 800a366:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a36a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a372:	2b00      	cmp	r3, #0
 800a374:	d001      	beq.n	800a37a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a376:	2301      	movs	r3, #1
 800a378:	e00b      	b.n	800a392 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a37a:	887b      	ldrh	r3, [r7, #2]
 800a37c:	461a      	mov	r2, r3
 800a37e:	6879      	ldr	r1, [r7, #4]
 800a380:	4806      	ldr	r0, [pc, #24]	; (800a39c <CDC_Transmit_FS+0x48>)
 800a382:	f7fb fee8 	bl	8006156 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a386:	4805      	ldr	r0, [pc, #20]	; (800a39c <CDC_Transmit_FS+0x48>)
 800a388:	f7fb ff1c 	bl	80061c4 <USBD_CDC_TransmitPacket>
 800a38c:	4603      	mov	r3, r0
 800a38e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a390:	7bfb      	ldrb	r3, [r7, #15]
}
 800a392:	4618      	mov	r0, r3
 800a394:	3710      	adds	r7, #16
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	20004ee4 	.word	0x20004ee4

0800a3a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b087      	sub	sp, #28
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	4613      	mov	r3, r2
 800a3ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a3b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	371c      	adds	r7, #28
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr

0800a3c2 <CDC_ReceiveCallBack>:
__weak void CDC_ReceiveCallBack(uint8_t *Buf, uint16_t Len)
{}
 800a3c2:	b480      	push	{r7}
 800a3c4:	b083      	sub	sp, #12
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	807b      	strh	r3, [r7, #2]
 800a3ce:	bf00      	nop
 800a3d0:	370c      	adds	r7, #12
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr
	...

0800a3dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	6039      	str	r1, [r7, #0]
 800a3e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	2212      	movs	r2, #18
 800a3ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a3ee:	4b03      	ldr	r3, [pc, #12]	; (800a3fc <USBD_FS_DeviceDescriptor+0x20>)
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	370c      	adds	r7, #12
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr
 800a3fc:	200001f4 	.word	0x200001f4

0800a400 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
 800a406:	4603      	mov	r3, r0
 800a408:	6039      	str	r1, [r7, #0]
 800a40a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	2204      	movs	r2, #4
 800a410:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a412:	4b03      	ldr	r3, [pc, #12]	; (800a420 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a414:	4618      	mov	r0, r3
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr
 800a420:	20000208 	.word	0x20000208

0800a424 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	4603      	mov	r3, r0
 800a42c:	6039      	str	r1, [r7, #0]
 800a42e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a430:	79fb      	ldrb	r3, [r7, #7]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d105      	bne.n	800a442 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a436:	683a      	ldr	r2, [r7, #0]
 800a438:	4907      	ldr	r1, [pc, #28]	; (800a458 <USBD_FS_ProductStrDescriptor+0x34>)
 800a43a:	4808      	ldr	r0, [pc, #32]	; (800a45c <USBD_FS_ProductStrDescriptor+0x38>)
 800a43c:	f7fc ffa5 	bl	800738a <USBD_GetString>
 800a440:	e004      	b.n	800a44c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a442:	683a      	ldr	r2, [r7, #0]
 800a444:	4904      	ldr	r1, [pc, #16]	; (800a458 <USBD_FS_ProductStrDescriptor+0x34>)
 800a446:	4805      	ldr	r0, [pc, #20]	; (800a45c <USBD_FS_ProductStrDescriptor+0x38>)
 800a448:	f7fc ff9f 	bl	800738a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a44c:	4b02      	ldr	r3, [pc, #8]	; (800a458 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	200061b4 	.word	0x200061b4
 800a45c:	0800b664 	.word	0x0800b664

0800a460 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	4603      	mov	r3, r0
 800a468:	6039      	str	r1, [r7, #0]
 800a46a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a46c:	683a      	ldr	r2, [r7, #0]
 800a46e:	4904      	ldr	r1, [pc, #16]	; (800a480 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a470:	4804      	ldr	r0, [pc, #16]	; (800a484 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a472:	f7fc ff8a 	bl	800738a <USBD_GetString>
  return USBD_StrDesc;
 800a476:	4b02      	ldr	r3, [pc, #8]	; (800a480 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3708      	adds	r7, #8
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	200061b4 	.word	0x200061b4
 800a484:	0800b67c 	.word	0x0800b67c

0800a488 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	4603      	mov	r3, r0
 800a490:	6039      	str	r1, [r7, #0]
 800a492:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	221a      	movs	r2, #26
 800a498:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a49a:	f000 f843 	bl	800a524 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a49e:	4b02      	ldr	r3, [pc, #8]	; (800a4a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3708      	adds	r7, #8
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	2000020c 	.word	0x2000020c

0800a4ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	6039      	str	r1, [r7, #0]
 800a4b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a4b8:	79fb      	ldrb	r3, [r7, #7]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d105      	bne.n	800a4ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a4be:	683a      	ldr	r2, [r7, #0]
 800a4c0:	4907      	ldr	r1, [pc, #28]	; (800a4e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a4c2:	4808      	ldr	r0, [pc, #32]	; (800a4e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a4c4:	f7fc ff61 	bl	800738a <USBD_GetString>
 800a4c8:	e004      	b.n	800a4d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a4ca:	683a      	ldr	r2, [r7, #0]
 800a4cc:	4904      	ldr	r1, [pc, #16]	; (800a4e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a4ce:	4805      	ldr	r0, [pc, #20]	; (800a4e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a4d0:	f7fc ff5b 	bl	800738a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4d4:	4b02      	ldr	r3, [pc, #8]	; (800a4e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3708      	adds	r7, #8
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	200061b4 	.word	0x200061b4
 800a4e4:	0800b690 	.word	0x0800b690

0800a4e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	6039      	str	r1, [r7, #0]
 800a4f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a4f4:	79fb      	ldrb	r3, [r7, #7]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d105      	bne.n	800a506 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a4fa:	683a      	ldr	r2, [r7, #0]
 800a4fc:	4907      	ldr	r1, [pc, #28]	; (800a51c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a4fe:	4808      	ldr	r0, [pc, #32]	; (800a520 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a500:	f7fc ff43 	bl	800738a <USBD_GetString>
 800a504:	e004      	b.n	800a510 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a506:	683a      	ldr	r2, [r7, #0]
 800a508:	4904      	ldr	r1, [pc, #16]	; (800a51c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a50a:	4805      	ldr	r0, [pc, #20]	; (800a520 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a50c:	f7fc ff3d 	bl	800738a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a510:	4b02      	ldr	r3, [pc, #8]	; (800a51c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a512:	4618      	mov	r0, r3
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	200061b4 	.word	0x200061b4
 800a520:	0800b69c 	.word	0x0800b69c

0800a524 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a52a:	4b0f      	ldr	r3, [pc, #60]	; (800a568 <Get_SerialNum+0x44>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a530:	4b0e      	ldr	r3, [pc, #56]	; (800a56c <Get_SerialNum+0x48>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a536:	4b0e      	ldr	r3, [pc, #56]	; (800a570 <Get_SerialNum+0x4c>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4413      	add	r3, r2
 800a542:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d009      	beq.n	800a55e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a54a:	2208      	movs	r2, #8
 800a54c:	4909      	ldr	r1, [pc, #36]	; (800a574 <Get_SerialNum+0x50>)
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	f000 f814 	bl	800a57c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a554:	2204      	movs	r2, #4
 800a556:	4908      	ldr	r1, [pc, #32]	; (800a578 <Get_SerialNum+0x54>)
 800a558:	68b8      	ldr	r0, [r7, #8]
 800a55a:	f000 f80f 	bl	800a57c <IntToUnicode>
  }
}
 800a55e:	bf00      	nop
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	1fff7a10 	.word	0x1fff7a10
 800a56c:	1fff7a14 	.word	0x1fff7a14
 800a570:	1fff7a18 	.word	0x1fff7a18
 800a574:	2000020e 	.word	0x2000020e
 800a578:	2000021e 	.word	0x2000021e

0800a57c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b087      	sub	sp, #28
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	4613      	mov	r3, r2
 800a588:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a58a:	2300      	movs	r3, #0
 800a58c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a58e:	2300      	movs	r3, #0
 800a590:	75fb      	strb	r3, [r7, #23]
 800a592:	e027      	b.n	800a5e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	0f1b      	lsrs	r3, r3, #28
 800a598:	2b09      	cmp	r3, #9
 800a59a:	d80b      	bhi.n	800a5b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	0f1b      	lsrs	r3, r3, #28
 800a5a0:	b2da      	uxtb	r2, r3
 800a5a2:	7dfb      	ldrb	r3, [r7, #23]
 800a5a4:	005b      	lsls	r3, r3, #1
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	440b      	add	r3, r1
 800a5ac:	3230      	adds	r2, #48	; 0x30
 800a5ae:	b2d2      	uxtb	r2, r2
 800a5b0:	701a      	strb	r2, [r3, #0]
 800a5b2:	e00a      	b.n	800a5ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	0f1b      	lsrs	r3, r3, #28
 800a5b8:	b2da      	uxtb	r2, r3
 800a5ba:	7dfb      	ldrb	r3, [r7, #23]
 800a5bc:	005b      	lsls	r3, r3, #1
 800a5be:	4619      	mov	r1, r3
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	440b      	add	r3, r1
 800a5c4:	3237      	adds	r2, #55	; 0x37
 800a5c6:	b2d2      	uxtb	r2, r2
 800a5c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	011b      	lsls	r3, r3, #4
 800a5ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a5d0:	7dfb      	ldrb	r3, [r7, #23]
 800a5d2:	005b      	lsls	r3, r3, #1
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	4413      	add	r3, r2
 800a5da:	2200      	movs	r2, #0
 800a5dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a5de:	7dfb      	ldrb	r3, [r7, #23]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	75fb      	strb	r3, [r7, #23]
 800a5e4:	7dfa      	ldrb	r2, [r7, #23]
 800a5e6:	79fb      	ldrb	r3, [r7, #7]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d3d3      	bcc.n	800a594 <IntToUnicode+0x18>
  }
}
 800a5ec:	bf00      	nop
 800a5ee:	bf00      	nop
 800a5f0:	371c      	adds	r7, #28
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr
	...

0800a5fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b08a      	sub	sp, #40	; 0x28
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a604:	f107 0314 	add.w	r3, r7, #20
 800a608:	2200      	movs	r2, #0
 800a60a:	601a      	str	r2, [r3, #0]
 800a60c:	605a      	str	r2, [r3, #4]
 800a60e:	609a      	str	r2, [r3, #8]
 800a610:	60da      	str	r2, [r3, #12]
 800a612:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a61c:	d147      	bne.n	800a6ae <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a61e:	2300      	movs	r3, #0
 800a620:	613b      	str	r3, [r7, #16]
 800a622:	4b25      	ldr	r3, [pc, #148]	; (800a6b8 <HAL_PCD_MspInit+0xbc>)
 800a624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a626:	4a24      	ldr	r2, [pc, #144]	; (800a6b8 <HAL_PCD_MspInit+0xbc>)
 800a628:	f043 0301 	orr.w	r3, r3, #1
 800a62c:	6313      	str	r3, [r2, #48]	; 0x30
 800a62e:	4b22      	ldr	r3, [pc, #136]	; (800a6b8 <HAL_PCD_MspInit+0xbc>)
 800a630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a632:	f003 0301 	and.w	r3, r3, #1
 800a636:	613b      	str	r3, [r7, #16]
 800a638:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a63a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a63e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a640:	2300      	movs	r3, #0
 800a642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a644:	2300      	movs	r3, #0
 800a646:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a648:	f107 0314 	add.w	r3, r7, #20
 800a64c:	4619      	mov	r1, r3
 800a64e:	481b      	ldr	r0, [pc, #108]	; (800a6bc <HAL_PCD_MspInit+0xc0>)
 800a650:	f7f7 f9b0 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a654:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a65a:	2302      	movs	r3, #2
 800a65c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a65e:	2300      	movs	r3, #0
 800a660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a662:	2303      	movs	r3, #3
 800a664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a666:	230a      	movs	r3, #10
 800a668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a66a:	f107 0314 	add.w	r3, r7, #20
 800a66e:	4619      	mov	r1, r3
 800a670:	4812      	ldr	r0, [pc, #72]	; (800a6bc <HAL_PCD_MspInit+0xc0>)
 800a672:	f7f7 f99f 	bl	80019b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a676:	4b10      	ldr	r3, [pc, #64]	; (800a6b8 <HAL_PCD_MspInit+0xbc>)
 800a678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a67a:	4a0f      	ldr	r2, [pc, #60]	; (800a6b8 <HAL_PCD_MspInit+0xbc>)
 800a67c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a680:	6353      	str	r3, [r2, #52]	; 0x34
 800a682:	2300      	movs	r3, #0
 800a684:	60fb      	str	r3, [r7, #12]
 800a686:	4b0c      	ldr	r3, [pc, #48]	; (800a6b8 <HAL_PCD_MspInit+0xbc>)
 800a688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a68a:	4a0b      	ldr	r2, [pc, #44]	; (800a6b8 <HAL_PCD_MspInit+0xbc>)
 800a68c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a690:	6453      	str	r3, [r2, #68]	; 0x44
 800a692:	4b09      	ldr	r3, [pc, #36]	; (800a6b8 <HAL_PCD_MspInit+0xbc>)
 800a694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a69a:	60fb      	str	r3, [r7, #12]
 800a69c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a69e:	2200      	movs	r2, #0
 800a6a0:	2105      	movs	r1, #5
 800a6a2:	2043      	movs	r0, #67	; 0x43
 800a6a4:	f7f7 f95c 	bl	8001960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a6a8:	2043      	movs	r0, #67	; 0x43
 800a6aa:	f7f7 f975 	bl	8001998 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a6ae:	bf00      	nop
 800a6b0:	3728      	adds	r7, #40	; 0x28
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	40023800 	.word	0x40023800
 800a6bc:	40020000 	.word	0x40020000

0800a6c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	4610      	mov	r0, r2
 800a6d8:	f7fb fe70 	bl	80063bc <USBD_LL_SetupStage>
}
 800a6dc:	bf00      	nop
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a6f6:	78fa      	ldrb	r2, [r7, #3]
 800a6f8:	6879      	ldr	r1, [r7, #4]
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	00db      	lsls	r3, r3, #3
 800a6fe:	1a9b      	subs	r3, r3, r2
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	440b      	add	r3, r1
 800a704:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a708:	681a      	ldr	r2, [r3, #0]
 800a70a:	78fb      	ldrb	r3, [r7, #3]
 800a70c:	4619      	mov	r1, r3
 800a70e:	f7fb feaa 	bl	8006466 <USBD_LL_DataOutStage>
}
 800a712:	bf00      	nop
 800a714:	3708      	adds	r7, #8
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b082      	sub	sp, #8
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
 800a722:	460b      	mov	r3, r1
 800a724:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a72c:	78fa      	ldrb	r2, [r7, #3]
 800a72e:	6879      	ldr	r1, [r7, #4]
 800a730:	4613      	mov	r3, r2
 800a732:	00db      	lsls	r3, r3, #3
 800a734:	1a9b      	subs	r3, r3, r2
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	440b      	add	r3, r1
 800a73a:	3348      	adds	r3, #72	; 0x48
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	78fb      	ldrb	r3, [r7, #3]
 800a740:	4619      	mov	r1, r3
 800a742:	f7fb fef3 	bl	800652c <USBD_LL_DataInStage>
}
 800a746:	bf00      	nop
 800a748:	3708      	adds	r7, #8
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a74e:	b580      	push	{r7, lr}
 800a750:	b082      	sub	sp, #8
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7fc f807 	bl	8006770 <USBD_LL_SOF>
}
 800a762:	bf00      	nop
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b084      	sub	sp, #16
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a772:	2301      	movs	r3, #1
 800a774:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	2b02      	cmp	r3, #2
 800a77c:	d001      	beq.n	800a782 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a77e:	f7f6 fd3d 	bl	80011fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a788:	7bfa      	ldrb	r2, [r7, #15]
 800a78a:	4611      	mov	r1, r2
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7fb ffb1 	bl	80066f4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a798:	4618      	mov	r0, r3
 800a79a:	f7fb ff5d 	bl	8006658 <USBD_LL_Reset>
}
 800a79e:	bf00      	nop
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
	...

0800a7a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7fb ffac 	bl	8006714 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	6812      	ldr	r2, [r2, #0]
 800a7ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a7ce:	f043 0301 	orr.w	r3, r3, #1
 800a7d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6a1b      	ldr	r3, [r3, #32]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d005      	beq.n	800a7e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a7dc:	4b04      	ldr	r3, [pc, #16]	; (800a7f0 <HAL_PCD_SuspendCallback+0x48>)
 800a7de:	691b      	ldr	r3, [r3, #16]
 800a7e0:	4a03      	ldr	r2, [pc, #12]	; (800a7f0 <HAL_PCD_SuspendCallback+0x48>)
 800a7e2:	f043 0306 	orr.w	r3, r3, #6
 800a7e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a7e8:	bf00      	nop
 800a7ea:	3708      	adds	r7, #8
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	e000ed00 	.word	0xe000ed00

0800a7f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a802:	4618      	mov	r0, r3
 800a804:	f7fb ff9c 	bl	8006740 <USBD_LL_Resume>
}
 800a808:	bf00      	nop
 800a80a:	3708      	adds	r7, #8
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	460b      	mov	r3, r1
 800a81a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a822:	78fa      	ldrb	r2, [r7, #3]
 800a824:	4611      	mov	r1, r2
 800a826:	4618      	mov	r0, r3
 800a828:	f7fb ffea 	bl	8006800 <USBD_LL_IsoOUTIncomplete>
}
 800a82c:	bf00      	nop
 800a82e:	3708      	adds	r7, #8
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	460b      	mov	r3, r1
 800a83e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a846:	78fa      	ldrb	r2, [r7, #3]
 800a848:	4611      	mov	r1, r2
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7fb ffb2 	bl	80067b4 <USBD_LL_IsoINIncomplete>
}
 800a850:	bf00      	nop
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a866:	4618      	mov	r0, r3
 800a868:	f7fb fff0 	bl	800684c <USBD_LL_DevConnected>
}
 800a86c:	bf00      	nop
 800a86e:	3708      	adds	r7, #8
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a882:	4618      	mov	r0, r3
 800a884:	f7fb ffed 	bl	8006862 <USBD_LL_DevDisconnected>
}
 800a888:	bf00      	nop
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d13c      	bne.n	800a91a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a8a0:	4a20      	ldr	r2, [pc, #128]	; (800a924 <USBD_LL_Init+0x94>)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4a1e      	ldr	r2, [pc, #120]	; (800a924 <USBD_LL_Init+0x94>)
 800a8ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a8b0:	4b1c      	ldr	r3, [pc, #112]	; (800a924 <USBD_LL_Init+0x94>)
 800a8b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a8b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a8b8:	4b1a      	ldr	r3, [pc, #104]	; (800a924 <USBD_LL_Init+0x94>)
 800a8ba:	2204      	movs	r2, #4
 800a8bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a8be:	4b19      	ldr	r3, [pc, #100]	; (800a924 <USBD_LL_Init+0x94>)
 800a8c0:	2202      	movs	r2, #2
 800a8c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a8c4:	4b17      	ldr	r3, [pc, #92]	; (800a924 <USBD_LL_Init+0x94>)
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a8ca:	4b16      	ldr	r3, [pc, #88]	; (800a924 <USBD_LL_Init+0x94>)
 800a8cc:	2202      	movs	r2, #2
 800a8ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a8d0:	4b14      	ldr	r3, [pc, #80]	; (800a924 <USBD_LL_Init+0x94>)
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a8d6:	4b13      	ldr	r3, [pc, #76]	; (800a924 <USBD_LL_Init+0x94>)
 800a8d8:	2200      	movs	r2, #0
 800a8da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a8dc:	4b11      	ldr	r3, [pc, #68]	; (800a924 <USBD_LL_Init+0x94>)
 800a8de:	2200      	movs	r2, #0
 800a8e0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a8e2:	4b10      	ldr	r3, [pc, #64]	; (800a924 <USBD_LL_Init+0x94>)
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a8e8:	4b0e      	ldr	r3, [pc, #56]	; (800a924 <USBD_LL_Init+0x94>)
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a8ee:	480d      	ldr	r0, [pc, #52]	; (800a924 <USBD_LL_Init+0x94>)
 800a8f0:	f7f7 fa39 	bl	8001d66 <HAL_PCD_Init>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d001      	beq.n	800a8fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a8fa:	f7f6 fc7f 	bl	80011fc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a8fe:	2180      	movs	r1, #128	; 0x80
 800a900:	4808      	ldr	r0, [pc, #32]	; (800a924 <USBD_LL_Init+0x94>)
 800a902:	f7f8 fb96 	bl	8003032 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a906:	2240      	movs	r2, #64	; 0x40
 800a908:	2100      	movs	r1, #0
 800a90a:	4806      	ldr	r0, [pc, #24]	; (800a924 <USBD_LL_Init+0x94>)
 800a90c:	f7f8 fb4a 	bl	8002fa4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a910:	2280      	movs	r2, #128	; 0x80
 800a912:	2101      	movs	r1, #1
 800a914:	4803      	ldr	r0, [pc, #12]	; (800a924 <USBD_LL_Init+0x94>)
 800a916:	f7f8 fb45 	bl	8002fa4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3708      	adds	r7, #8
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	200063b4 	.word	0x200063b4

0800a928 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a930:	2300      	movs	r3, #0
 800a932:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a934:	2300      	movs	r3, #0
 800a936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a93e:	4618      	mov	r0, r3
 800a940:	f7f7 fb2e 	bl	8001fa0 <HAL_PCD_Start>
 800a944:	4603      	mov	r3, r0
 800a946:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a948:	7bfb      	ldrb	r3, [r7, #15]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f000 f942 	bl	800abd4 <USBD_Get_USB_Status>
 800a950:	4603      	mov	r3, r0
 800a952:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a954:	7bbb      	ldrb	r3, [r7, #14]
}
 800a956:	4618      	mov	r0, r3
 800a958:	3710      	adds	r7, #16
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}

0800a95e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a95e:	b580      	push	{r7, lr}
 800a960:	b084      	sub	sp, #16
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
 800a966:	4608      	mov	r0, r1
 800a968:	4611      	mov	r1, r2
 800a96a:	461a      	mov	r2, r3
 800a96c:	4603      	mov	r3, r0
 800a96e:	70fb      	strb	r3, [r7, #3]
 800a970:	460b      	mov	r3, r1
 800a972:	70bb      	strb	r3, [r7, #2]
 800a974:	4613      	mov	r3, r2
 800a976:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a97c:	2300      	movs	r3, #0
 800a97e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a986:	78bb      	ldrb	r3, [r7, #2]
 800a988:	883a      	ldrh	r2, [r7, #0]
 800a98a:	78f9      	ldrb	r1, [r7, #3]
 800a98c:	f7f7 ff12 	bl	80027b4 <HAL_PCD_EP_Open>
 800a990:	4603      	mov	r3, r0
 800a992:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a994:	7bfb      	ldrb	r3, [r7, #15]
 800a996:	4618      	mov	r0, r3
 800a998:	f000 f91c 	bl	800abd4 <USBD_Get_USB_Status>
 800a99c:	4603      	mov	r3, r0
 800a99e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b084      	sub	sp, #16
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a9c4:	78fa      	ldrb	r2, [r7, #3]
 800a9c6:	4611      	mov	r1, r2
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f7f7 ff5b 	bl	8002884 <HAL_PCD_EP_Close>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9d2:	7bfb      	ldrb	r3, [r7, #15]
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f000 f8fd 	bl	800abd4 <USBD_Get_USB_Status>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9de:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3710      	adds	r7, #16
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aa02:	78fa      	ldrb	r2, [r7, #3]
 800aa04:	4611      	mov	r1, r2
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7f8 f833 	bl	8002a72 <HAL_PCD_EP_SetStall>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa10:	7bfb      	ldrb	r3, [r7, #15]
 800aa12:	4618      	mov	r0, r3
 800aa14:	f000 f8de 	bl	800abd4 <USBD_Get_USB_Status>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3710      	adds	r7, #16
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b084      	sub	sp, #16
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
 800aa2e:	460b      	mov	r3, r1
 800aa30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa32:	2300      	movs	r3, #0
 800aa34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa36:	2300      	movs	r3, #0
 800aa38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aa40:	78fa      	ldrb	r2, [r7, #3]
 800aa42:	4611      	mov	r1, r2
 800aa44:	4618      	mov	r0, r3
 800aa46:	f7f8 f878 	bl	8002b3a <HAL_PCD_EP_ClrStall>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa4e:	7bfb      	ldrb	r3, [r7, #15]
 800aa50:	4618      	mov	r0, r3
 800aa52:	f000 f8bf 	bl	800abd4 <USBD_Get_USB_Status>
 800aa56:	4603      	mov	r3, r0
 800aa58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3710      	adds	r7, #16
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b085      	sub	sp, #20
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aa76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	da0b      	bge.n	800aa98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa80:	78fb      	ldrb	r3, [r7, #3]
 800aa82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa86:	68f9      	ldr	r1, [r7, #12]
 800aa88:	4613      	mov	r3, r2
 800aa8a:	00db      	lsls	r3, r3, #3
 800aa8c:	1a9b      	subs	r3, r3, r2
 800aa8e:	009b      	lsls	r3, r3, #2
 800aa90:	440b      	add	r3, r1
 800aa92:	333e      	adds	r3, #62	; 0x3e
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	e00b      	b.n	800aab0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa98:	78fb      	ldrb	r3, [r7, #3]
 800aa9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa9e:	68f9      	ldr	r1, [r7, #12]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	00db      	lsls	r3, r3, #3
 800aaa4:	1a9b      	subs	r3, r3, r2
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	440b      	add	r3, r1
 800aaaa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aaae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3714      	adds	r7, #20
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	460b      	mov	r3, r1
 800aac6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aac8:	2300      	movs	r3, #0
 800aaca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aacc:	2300      	movs	r3, #0
 800aace:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aad6:	78fa      	ldrb	r2, [r7, #3]
 800aad8:	4611      	mov	r1, r2
 800aada:	4618      	mov	r0, r3
 800aadc:	f7f7 fe45 	bl	800276a <HAL_PCD_SetAddress>
 800aae0:	4603      	mov	r3, r0
 800aae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aae4:	7bfb      	ldrb	r3, [r7, #15]
 800aae6:	4618      	mov	r0, r3
 800aae8:	f000 f874 	bl	800abd4 <USBD_Get_USB_Status>
 800aaec:	4603      	mov	r3, r0
 800aaee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aaf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}

0800aafa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aafa:	b580      	push	{r7, lr}
 800aafc:	b086      	sub	sp, #24
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	60f8      	str	r0, [r7, #12]
 800ab02:	607a      	str	r2, [r7, #4]
 800ab04:	603b      	str	r3, [r7, #0]
 800ab06:	460b      	mov	r3, r1
 800ab08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ab18:	7af9      	ldrb	r1, [r7, #11]
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	f7f7 ff5e 	bl	80029de <HAL_PCD_EP_Transmit>
 800ab22:	4603      	mov	r3, r0
 800ab24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab26:	7dfb      	ldrb	r3, [r7, #23]
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f000 f853 	bl	800abd4 <USBD_Get_USB_Status>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab32:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3718      	adds	r7, #24
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b086      	sub	sp, #24
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	607a      	str	r2, [r7, #4]
 800ab46:	603b      	str	r3, [r7, #0]
 800ab48:	460b      	mov	r3, r1
 800ab4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab50:	2300      	movs	r3, #0
 800ab52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ab5a:	7af9      	ldrb	r1, [r7, #11]
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	f7f7 feda 	bl	8002918 <HAL_PCD_EP_Receive>
 800ab64:	4603      	mov	r3, r0
 800ab66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab68:	7dfb      	ldrb	r3, [r7, #23]
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f000 f832 	bl	800abd4 <USBD_Get_USB_Status>
 800ab70:	4603      	mov	r3, r0
 800ab72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab74:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3718      	adds	r7, #24
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b082      	sub	sp, #8
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
 800ab86:	460b      	mov	r3, r1
 800ab88:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ab90:	78fa      	ldrb	r2, [r7, #3]
 800ab92:	4611      	mov	r1, r2
 800ab94:	4618      	mov	r0, r3
 800ab96:	f7f7 ff0a 	bl	80029ae <HAL_PCD_EP_GetRxCount>
 800ab9a:	4603      	mov	r3, r0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800abac:	4b03      	ldr	r3, [pc, #12]	; (800abbc <USBD_static_malloc+0x18>)
}
 800abae:	4618      	mov	r0, r3
 800abb0:	370c      	adds	r7, #12
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop
 800abbc:	20004bc4 	.word	0x20004bc4

0800abc0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]

}
 800abc8:	bf00      	nop
 800abca:	370c      	adds	r7, #12
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	4603      	mov	r3, r0
 800abdc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abde:	2300      	movs	r3, #0
 800abe0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800abe2:	79fb      	ldrb	r3, [r7, #7]
 800abe4:	2b03      	cmp	r3, #3
 800abe6:	d817      	bhi.n	800ac18 <USBD_Get_USB_Status+0x44>
 800abe8:	a201      	add	r2, pc, #4	; (adr r2, 800abf0 <USBD_Get_USB_Status+0x1c>)
 800abea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abee:	bf00      	nop
 800abf0:	0800ac01 	.word	0x0800ac01
 800abf4:	0800ac07 	.word	0x0800ac07
 800abf8:	0800ac0d 	.word	0x0800ac0d
 800abfc:	0800ac13 	.word	0x0800ac13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ac00:	2300      	movs	r3, #0
 800ac02:	73fb      	strb	r3, [r7, #15]
    break;
 800ac04:	e00b      	b.n	800ac1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ac06:	2303      	movs	r3, #3
 800ac08:	73fb      	strb	r3, [r7, #15]
    break;
 800ac0a:	e008      	b.n	800ac1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	73fb      	strb	r3, [r7, #15]
    break;
 800ac10:	e005      	b.n	800ac1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac12:	2303      	movs	r3, #3
 800ac14:	73fb      	strb	r3, [r7, #15]
    break;
 800ac16:	e002      	b.n	800ac1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ac18:	2303      	movs	r3, #3
 800ac1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ac1c:	bf00      	nop
  }
  return usb_status;
 800ac1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3714      	adds	r7, #20
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <__errno>:
 800ac2c:	4b01      	ldr	r3, [pc, #4]	; (800ac34 <__errno+0x8>)
 800ac2e:	6818      	ldr	r0, [r3, #0]
 800ac30:	4770      	bx	lr
 800ac32:	bf00      	nop
 800ac34:	20000228 	.word	0x20000228

0800ac38 <__libc_init_array>:
 800ac38:	b570      	push	{r4, r5, r6, lr}
 800ac3a:	4d0d      	ldr	r5, [pc, #52]	; (800ac70 <__libc_init_array+0x38>)
 800ac3c:	4c0d      	ldr	r4, [pc, #52]	; (800ac74 <__libc_init_array+0x3c>)
 800ac3e:	1b64      	subs	r4, r4, r5
 800ac40:	10a4      	asrs	r4, r4, #2
 800ac42:	2600      	movs	r6, #0
 800ac44:	42a6      	cmp	r6, r4
 800ac46:	d109      	bne.n	800ac5c <__libc_init_array+0x24>
 800ac48:	4d0b      	ldr	r5, [pc, #44]	; (800ac78 <__libc_init_array+0x40>)
 800ac4a:	4c0c      	ldr	r4, [pc, #48]	; (800ac7c <__libc_init_array+0x44>)
 800ac4c:	f000 fc4e 	bl	800b4ec <_init>
 800ac50:	1b64      	subs	r4, r4, r5
 800ac52:	10a4      	asrs	r4, r4, #2
 800ac54:	2600      	movs	r6, #0
 800ac56:	42a6      	cmp	r6, r4
 800ac58:	d105      	bne.n	800ac66 <__libc_init_array+0x2e>
 800ac5a:	bd70      	pop	{r4, r5, r6, pc}
 800ac5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac60:	4798      	blx	r3
 800ac62:	3601      	adds	r6, #1
 800ac64:	e7ee      	b.n	800ac44 <__libc_init_array+0xc>
 800ac66:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac6a:	4798      	blx	r3
 800ac6c:	3601      	adds	r6, #1
 800ac6e:	e7f2      	b.n	800ac56 <__libc_init_array+0x1e>
 800ac70:	0800b804 	.word	0x0800b804
 800ac74:	0800b804 	.word	0x0800b804
 800ac78:	0800b804 	.word	0x0800b804
 800ac7c:	0800b808 	.word	0x0800b808

0800ac80 <memcpy>:
 800ac80:	440a      	add	r2, r1
 800ac82:	4291      	cmp	r1, r2
 800ac84:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac88:	d100      	bne.n	800ac8c <memcpy+0xc>
 800ac8a:	4770      	bx	lr
 800ac8c:	b510      	push	{r4, lr}
 800ac8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac96:	4291      	cmp	r1, r2
 800ac98:	d1f9      	bne.n	800ac8e <memcpy+0xe>
 800ac9a:	bd10      	pop	{r4, pc}

0800ac9c <memset>:
 800ac9c:	4402      	add	r2, r0
 800ac9e:	4603      	mov	r3, r0
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d100      	bne.n	800aca6 <memset+0xa>
 800aca4:	4770      	bx	lr
 800aca6:	f803 1b01 	strb.w	r1, [r3], #1
 800acaa:	e7f9      	b.n	800aca0 <memset+0x4>

0800acac <siprintf>:
 800acac:	b40e      	push	{r1, r2, r3}
 800acae:	b500      	push	{lr}
 800acb0:	b09c      	sub	sp, #112	; 0x70
 800acb2:	ab1d      	add	r3, sp, #116	; 0x74
 800acb4:	9002      	str	r0, [sp, #8]
 800acb6:	9006      	str	r0, [sp, #24]
 800acb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800acbc:	4809      	ldr	r0, [pc, #36]	; (800ace4 <siprintf+0x38>)
 800acbe:	9107      	str	r1, [sp, #28]
 800acc0:	9104      	str	r1, [sp, #16]
 800acc2:	4909      	ldr	r1, [pc, #36]	; (800ace8 <siprintf+0x3c>)
 800acc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800acc8:	9105      	str	r1, [sp, #20]
 800acca:	6800      	ldr	r0, [r0, #0]
 800accc:	9301      	str	r3, [sp, #4]
 800acce:	a902      	add	r1, sp, #8
 800acd0:	f000 f868 	bl	800ada4 <_svfiprintf_r>
 800acd4:	9b02      	ldr	r3, [sp, #8]
 800acd6:	2200      	movs	r2, #0
 800acd8:	701a      	strb	r2, [r3, #0]
 800acda:	b01c      	add	sp, #112	; 0x70
 800acdc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ace0:	b003      	add	sp, #12
 800ace2:	4770      	bx	lr
 800ace4:	20000228 	.word	0x20000228
 800ace8:	ffff0208 	.word	0xffff0208

0800acec <__ssputs_r>:
 800acec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acf0:	688e      	ldr	r6, [r1, #8]
 800acf2:	429e      	cmp	r6, r3
 800acf4:	4682      	mov	sl, r0
 800acf6:	460c      	mov	r4, r1
 800acf8:	4690      	mov	r8, r2
 800acfa:	461f      	mov	r7, r3
 800acfc:	d838      	bhi.n	800ad70 <__ssputs_r+0x84>
 800acfe:	898a      	ldrh	r2, [r1, #12]
 800ad00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad04:	d032      	beq.n	800ad6c <__ssputs_r+0x80>
 800ad06:	6825      	ldr	r5, [r4, #0]
 800ad08:	6909      	ldr	r1, [r1, #16]
 800ad0a:	eba5 0901 	sub.w	r9, r5, r1
 800ad0e:	6965      	ldr	r5, [r4, #20]
 800ad10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad18:	3301      	adds	r3, #1
 800ad1a:	444b      	add	r3, r9
 800ad1c:	106d      	asrs	r5, r5, #1
 800ad1e:	429d      	cmp	r5, r3
 800ad20:	bf38      	it	cc
 800ad22:	461d      	movcc	r5, r3
 800ad24:	0553      	lsls	r3, r2, #21
 800ad26:	d531      	bpl.n	800ad8c <__ssputs_r+0xa0>
 800ad28:	4629      	mov	r1, r5
 800ad2a:	f000 fb39 	bl	800b3a0 <_malloc_r>
 800ad2e:	4606      	mov	r6, r0
 800ad30:	b950      	cbnz	r0, 800ad48 <__ssputs_r+0x5c>
 800ad32:	230c      	movs	r3, #12
 800ad34:	f8ca 3000 	str.w	r3, [sl]
 800ad38:	89a3      	ldrh	r3, [r4, #12]
 800ad3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad3e:	81a3      	strh	r3, [r4, #12]
 800ad40:	f04f 30ff 	mov.w	r0, #4294967295
 800ad44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad48:	6921      	ldr	r1, [r4, #16]
 800ad4a:	464a      	mov	r2, r9
 800ad4c:	f7ff ff98 	bl	800ac80 <memcpy>
 800ad50:	89a3      	ldrh	r3, [r4, #12]
 800ad52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad5a:	81a3      	strh	r3, [r4, #12]
 800ad5c:	6126      	str	r6, [r4, #16]
 800ad5e:	6165      	str	r5, [r4, #20]
 800ad60:	444e      	add	r6, r9
 800ad62:	eba5 0509 	sub.w	r5, r5, r9
 800ad66:	6026      	str	r6, [r4, #0]
 800ad68:	60a5      	str	r5, [r4, #8]
 800ad6a:	463e      	mov	r6, r7
 800ad6c:	42be      	cmp	r6, r7
 800ad6e:	d900      	bls.n	800ad72 <__ssputs_r+0x86>
 800ad70:	463e      	mov	r6, r7
 800ad72:	4632      	mov	r2, r6
 800ad74:	6820      	ldr	r0, [r4, #0]
 800ad76:	4641      	mov	r1, r8
 800ad78:	f000 faa8 	bl	800b2cc <memmove>
 800ad7c:	68a3      	ldr	r3, [r4, #8]
 800ad7e:	6822      	ldr	r2, [r4, #0]
 800ad80:	1b9b      	subs	r3, r3, r6
 800ad82:	4432      	add	r2, r6
 800ad84:	60a3      	str	r3, [r4, #8]
 800ad86:	6022      	str	r2, [r4, #0]
 800ad88:	2000      	movs	r0, #0
 800ad8a:	e7db      	b.n	800ad44 <__ssputs_r+0x58>
 800ad8c:	462a      	mov	r2, r5
 800ad8e:	f000 fb61 	bl	800b454 <_realloc_r>
 800ad92:	4606      	mov	r6, r0
 800ad94:	2800      	cmp	r0, #0
 800ad96:	d1e1      	bne.n	800ad5c <__ssputs_r+0x70>
 800ad98:	6921      	ldr	r1, [r4, #16]
 800ad9a:	4650      	mov	r0, sl
 800ad9c:	f000 fab0 	bl	800b300 <_free_r>
 800ada0:	e7c7      	b.n	800ad32 <__ssputs_r+0x46>
	...

0800ada4 <_svfiprintf_r>:
 800ada4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada8:	4698      	mov	r8, r3
 800adaa:	898b      	ldrh	r3, [r1, #12]
 800adac:	061b      	lsls	r3, r3, #24
 800adae:	b09d      	sub	sp, #116	; 0x74
 800adb0:	4607      	mov	r7, r0
 800adb2:	460d      	mov	r5, r1
 800adb4:	4614      	mov	r4, r2
 800adb6:	d50e      	bpl.n	800add6 <_svfiprintf_r+0x32>
 800adb8:	690b      	ldr	r3, [r1, #16]
 800adba:	b963      	cbnz	r3, 800add6 <_svfiprintf_r+0x32>
 800adbc:	2140      	movs	r1, #64	; 0x40
 800adbe:	f000 faef 	bl	800b3a0 <_malloc_r>
 800adc2:	6028      	str	r0, [r5, #0]
 800adc4:	6128      	str	r0, [r5, #16]
 800adc6:	b920      	cbnz	r0, 800add2 <_svfiprintf_r+0x2e>
 800adc8:	230c      	movs	r3, #12
 800adca:	603b      	str	r3, [r7, #0]
 800adcc:	f04f 30ff 	mov.w	r0, #4294967295
 800add0:	e0d1      	b.n	800af76 <_svfiprintf_r+0x1d2>
 800add2:	2340      	movs	r3, #64	; 0x40
 800add4:	616b      	str	r3, [r5, #20]
 800add6:	2300      	movs	r3, #0
 800add8:	9309      	str	r3, [sp, #36]	; 0x24
 800adda:	2320      	movs	r3, #32
 800addc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ade0:	f8cd 800c 	str.w	r8, [sp, #12]
 800ade4:	2330      	movs	r3, #48	; 0x30
 800ade6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800af90 <_svfiprintf_r+0x1ec>
 800adea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adee:	f04f 0901 	mov.w	r9, #1
 800adf2:	4623      	mov	r3, r4
 800adf4:	469a      	mov	sl, r3
 800adf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adfa:	b10a      	cbz	r2, 800ae00 <_svfiprintf_r+0x5c>
 800adfc:	2a25      	cmp	r2, #37	; 0x25
 800adfe:	d1f9      	bne.n	800adf4 <_svfiprintf_r+0x50>
 800ae00:	ebba 0b04 	subs.w	fp, sl, r4
 800ae04:	d00b      	beq.n	800ae1e <_svfiprintf_r+0x7a>
 800ae06:	465b      	mov	r3, fp
 800ae08:	4622      	mov	r2, r4
 800ae0a:	4629      	mov	r1, r5
 800ae0c:	4638      	mov	r0, r7
 800ae0e:	f7ff ff6d 	bl	800acec <__ssputs_r>
 800ae12:	3001      	adds	r0, #1
 800ae14:	f000 80aa 	beq.w	800af6c <_svfiprintf_r+0x1c8>
 800ae18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae1a:	445a      	add	r2, fp
 800ae1c:	9209      	str	r2, [sp, #36]	; 0x24
 800ae1e:	f89a 3000 	ldrb.w	r3, [sl]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	f000 80a2 	beq.w	800af6c <_svfiprintf_r+0x1c8>
 800ae28:	2300      	movs	r3, #0
 800ae2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae32:	f10a 0a01 	add.w	sl, sl, #1
 800ae36:	9304      	str	r3, [sp, #16]
 800ae38:	9307      	str	r3, [sp, #28]
 800ae3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae3e:	931a      	str	r3, [sp, #104]	; 0x68
 800ae40:	4654      	mov	r4, sl
 800ae42:	2205      	movs	r2, #5
 800ae44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae48:	4851      	ldr	r0, [pc, #324]	; (800af90 <_svfiprintf_r+0x1ec>)
 800ae4a:	f7f5 f9d1 	bl	80001f0 <memchr>
 800ae4e:	9a04      	ldr	r2, [sp, #16]
 800ae50:	b9d8      	cbnz	r0, 800ae8a <_svfiprintf_r+0xe6>
 800ae52:	06d0      	lsls	r0, r2, #27
 800ae54:	bf44      	itt	mi
 800ae56:	2320      	movmi	r3, #32
 800ae58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae5c:	0711      	lsls	r1, r2, #28
 800ae5e:	bf44      	itt	mi
 800ae60:	232b      	movmi	r3, #43	; 0x2b
 800ae62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae66:	f89a 3000 	ldrb.w	r3, [sl]
 800ae6a:	2b2a      	cmp	r3, #42	; 0x2a
 800ae6c:	d015      	beq.n	800ae9a <_svfiprintf_r+0xf6>
 800ae6e:	9a07      	ldr	r2, [sp, #28]
 800ae70:	4654      	mov	r4, sl
 800ae72:	2000      	movs	r0, #0
 800ae74:	f04f 0c0a 	mov.w	ip, #10
 800ae78:	4621      	mov	r1, r4
 800ae7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae7e:	3b30      	subs	r3, #48	; 0x30
 800ae80:	2b09      	cmp	r3, #9
 800ae82:	d94e      	bls.n	800af22 <_svfiprintf_r+0x17e>
 800ae84:	b1b0      	cbz	r0, 800aeb4 <_svfiprintf_r+0x110>
 800ae86:	9207      	str	r2, [sp, #28]
 800ae88:	e014      	b.n	800aeb4 <_svfiprintf_r+0x110>
 800ae8a:	eba0 0308 	sub.w	r3, r0, r8
 800ae8e:	fa09 f303 	lsl.w	r3, r9, r3
 800ae92:	4313      	orrs	r3, r2
 800ae94:	9304      	str	r3, [sp, #16]
 800ae96:	46a2      	mov	sl, r4
 800ae98:	e7d2      	b.n	800ae40 <_svfiprintf_r+0x9c>
 800ae9a:	9b03      	ldr	r3, [sp, #12]
 800ae9c:	1d19      	adds	r1, r3, #4
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	9103      	str	r1, [sp, #12]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	bfbb      	ittet	lt
 800aea6:	425b      	neglt	r3, r3
 800aea8:	f042 0202 	orrlt.w	r2, r2, #2
 800aeac:	9307      	strge	r3, [sp, #28]
 800aeae:	9307      	strlt	r3, [sp, #28]
 800aeb0:	bfb8      	it	lt
 800aeb2:	9204      	strlt	r2, [sp, #16]
 800aeb4:	7823      	ldrb	r3, [r4, #0]
 800aeb6:	2b2e      	cmp	r3, #46	; 0x2e
 800aeb8:	d10c      	bne.n	800aed4 <_svfiprintf_r+0x130>
 800aeba:	7863      	ldrb	r3, [r4, #1]
 800aebc:	2b2a      	cmp	r3, #42	; 0x2a
 800aebe:	d135      	bne.n	800af2c <_svfiprintf_r+0x188>
 800aec0:	9b03      	ldr	r3, [sp, #12]
 800aec2:	1d1a      	adds	r2, r3, #4
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	9203      	str	r2, [sp, #12]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	bfb8      	it	lt
 800aecc:	f04f 33ff 	movlt.w	r3, #4294967295
 800aed0:	3402      	adds	r4, #2
 800aed2:	9305      	str	r3, [sp, #20]
 800aed4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800afa0 <_svfiprintf_r+0x1fc>
 800aed8:	7821      	ldrb	r1, [r4, #0]
 800aeda:	2203      	movs	r2, #3
 800aedc:	4650      	mov	r0, sl
 800aede:	f7f5 f987 	bl	80001f0 <memchr>
 800aee2:	b140      	cbz	r0, 800aef6 <_svfiprintf_r+0x152>
 800aee4:	2340      	movs	r3, #64	; 0x40
 800aee6:	eba0 000a 	sub.w	r0, r0, sl
 800aeea:	fa03 f000 	lsl.w	r0, r3, r0
 800aeee:	9b04      	ldr	r3, [sp, #16]
 800aef0:	4303      	orrs	r3, r0
 800aef2:	3401      	adds	r4, #1
 800aef4:	9304      	str	r3, [sp, #16]
 800aef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aefa:	4826      	ldr	r0, [pc, #152]	; (800af94 <_svfiprintf_r+0x1f0>)
 800aefc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af00:	2206      	movs	r2, #6
 800af02:	f7f5 f975 	bl	80001f0 <memchr>
 800af06:	2800      	cmp	r0, #0
 800af08:	d038      	beq.n	800af7c <_svfiprintf_r+0x1d8>
 800af0a:	4b23      	ldr	r3, [pc, #140]	; (800af98 <_svfiprintf_r+0x1f4>)
 800af0c:	bb1b      	cbnz	r3, 800af56 <_svfiprintf_r+0x1b2>
 800af0e:	9b03      	ldr	r3, [sp, #12]
 800af10:	3307      	adds	r3, #7
 800af12:	f023 0307 	bic.w	r3, r3, #7
 800af16:	3308      	adds	r3, #8
 800af18:	9303      	str	r3, [sp, #12]
 800af1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af1c:	4433      	add	r3, r6
 800af1e:	9309      	str	r3, [sp, #36]	; 0x24
 800af20:	e767      	b.n	800adf2 <_svfiprintf_r+0x4e>
 800af22:	fb0c 3202 	mla	r2, ip, r2, r3
 800af26:	460c      	mov	r4, r1
 800af28:	2001      	movs	r0, #1
 800af2a:	e7a5      	b.n	800ae78 <_svfiprintf_r+0xd4>
 800af2c:	2300      	movs	r3, #0
 800af2e:	3401      	adds	r4, #1
 800af30:	9305      	str	r3, [sp, #20]
 800af32:	4619      	mov	r1, r3
 800af34:	f04f 0c0a 	mov.w	ip, #10
 800af38:	4620      	mov	r0, r4
 800af3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af3e:	3a30      	subs	r2, #48	; 0x30
 800af40:	2a09      	cmp	r2, #9
 800af42:	d903      	bls.n	800af4c <_svfiprintf_r+0x1a8>
 800af44:	2b00      	cmp	r3, #0
 800af46:	d0c5      	beq.n	800aed4 <_svfiprintf_r+0x130>
 800af48:	9105      	str	r1, [sp, #20]
 800af4a:	e7c3      	b.n	800aed4 <_svfiprintf_r+0x130>
 800af4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800af50:	4604      	mov	r4, r0
 800af52:	2301      	movs	r3, #1
 800af54:	e7f0      	b.n	800af38 <_svfiprintf_r+0x194>
 800af56:	ab03      	add	r3, sp, #12
 800af58:	9300      	str	r3, [sp, #0]
 800af5a:	462a      	mov	r2, r5
 800af5c:	4b0f      	ldr	r3, [pc, #60]	; (800af9c <_svfiprintf_r+0x1f8>)
 800af5e:	a904      	add	r1, sp, #16
 800af60:	4638      	mov	r0, r7
 800af62:	f3af 8000 	nop.w
 800af66:	1c42      	adds	r2, r0, #1
 800af68:	4606      	mov	r6, r0
 800af6a:	d1d6      	bne.n	800af1a <_svfiprintf_r+0x176>
 800af6c:	89ab      	ldrh	r3, [r5, #12]
 800af6e:	065b      	lsls	r3, r3, #25
 800af70:	f53f af2c 	bmi.w	800adcc <_svfiprintf_r+0x28>
 800af74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af76:	b01d      	add	sp, #116	; 0x74
 800af78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af7c:	ab03      	add	r3, sp, #12
 800af7e:	9300      	str	r3, [sp, #0]
 800af80:	462a      	mov	r2, r5
 800af82:	4b06      	ldr	r3, [pc, #24]	; (800af9c <_svfiprintf_r+0x1f8>)
 800af84:	a904      	add	r1, sp, #16
 800af86:	4638      	mov	r0, r7
 800af88:	f000 f87a 	bl	800b080 <_printf_i>
 800af8c:	e7eb      	b.n	800af66 <_svfiprintf_r+0x1c2>
 800af8e:	bf00      	nop
 800af90:	0800b7c8 	.word	0x0800b7c8
 800af94:	0800b7d2 	.word	0x0800b7d2
 800af98:	00000000 	.word	0x00000000
 800af9c:	0800aced 	.word	0x0800aced
 800afa0:	0800b7ce 	.word	0x0800b7ce

0800afa4 <_printf_common>:
 800afa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afa8:	4616      	mov	r6, r2
 800afaa:	4699      	mov	r9, r3
 800afac:	688a      	ldr	r2, [r1, #8]
 800afae:	690b      	ldr	r3, [r1, #16]
 800afb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800afb4:	4293      	cmp	r3, r2
 800afb6:	bfb8      	it	lt
 800afb8:	4613      	movlt	r3, r2
 800afba:	6033      	str	r3, [r6, #0]
 800afbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800afc0:	4607      	mov	r7, r0
 800afc2:	460c      	mov	r4, r1
 800afc4:	b10a      	cbz	r2, 800afca <_printf_common+0x26>
 800afc6:	3301      	adds	r3, #1
 800afc8:	6033      	str	r3, [r6, #0]
 800afca:	6823      	ldr	r3, [r4, #0]
 800afcc:	0699      	lsls	r1, r3, #26
 800afce:	bf42      	ittt	mi
 800afd0:	6833      	ldrmi	r3, [r6, #0]
 800afd2:	3302      	addmi	r3, #2
 800afd4:	6033      	strmi	r3, [r6, #0]
 800afd6:	6825      	ldr	r5, [r4, #0]
 800afd8:	f015 0506 	ands.w	r5, r5, #6
 800afdc:	d106      	bne.n	800afec <_printf_common+0x48>
 800afde:	f104 0a19 	add.w	sl, r4, #25
 800afe2:	68e3      	ldr	r3, [r4, #12]
 800afe4:	6832      	ldr	r2, [r6, #0]
 800afe6:	1a9b      	subs	r3, r3, r2
 800afe8:	42ab      	cmp	r3, r5
 800afea:	dc26      	bgt.n	800b03a <_printf_common+0x96>
 800afec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aff0:	1e13      	subs	r3, r2, #0
 800aff2:	6822      	ldr	r2, [r4, #0]
 800aff4:	bf18      	it	ne
 800aff6:	2301      	movne	r3, #1
 800aff8:	0692      	lsls	r2, r2, #26
 800affa:	d42b      	bmi.n	800b054 <_printf_common+0xb0>
 800affc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b000:	4649      	mov	r1, r9
 800b002:	4638      	mov	r0, r7
 800b004:	47c0      	blx	r8
 800b006:	3001      	adds	r0, #1
 800b008:	d01e      	beq.n	800b048 <_printf_common+0xa4>
 800b00a:	6823      	ldr	r3, [r4, #0]
 800b00c:	68e5      	ldr	r5, [r4, #12]
 800b00e:	6832      	ldr	r2, [r6, #0]
 800b010:	f003 0306 	and.w	r3, r3, #6
 800b014:	2b04      	cmp	r3, #4
 800b016:	bf08      	it	eq
 800b018:	1aad      	subeq	r5, r5, r2
 800b01a:	68a3      	ldr	r3, [r4, #8]
 800b01c:	6922      	ldr	r2, [r4, #16]
 800b01e:	bf0c      	ite	eq
 800b020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b024:	2500      	movne	r5, #0
 800b026:	4293      	cmp	r3, r2
 800b028:	bfc4      	itt	gt
 800b02a:	1a9b      	subgt	r3, r3, r2
 800b02c:	18ed      	addgt	r5, r5, r3
 800b02e:	2600      	movs	r6, #0
 800b030:	341a      	adds	r4, #26
 800b032:	42b5      	cmp	r5, r6
 800b034:	d11a      	bne.n	800b06c <_printf_common+0xc8>
 800b036:	2000      	movs	r0, #0
 800b038:	e008      	b.n	800b04c <_printf_common+0xa8>
 800b03a:	2301      	movs	r3, #1
 800b03c:	4652      	mov	r2, sl
 800b03e:	4649      	mov	r1, r9
 800b040:	4638      	mov	r0, r7
 800b042:	47c0      	blx	r8
 800b044:	3001      	adds	r0, #1
 800b046:	d103      	bne.n	800b050 <_printf_common+0xac>
 800b048:	f04f 30ff 	mov.w	r0, #4294967295
 800b04c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b050:	3501      	adds	r5, #1
 800b052:	e7c6      	b.n	800afe2 <_printf_common+0x3e>
 800b054:	18e1      	adds	r1, r4, r3
 800b056:	1c5a      	adds	r2, r3, #1
 800b058:	2030      	movs	r0, #48	; 0x30
 800b05a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b05e:	4422      	add	r2, r4
 800b060:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b064:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b068:	3302      	adds	r3, #2
 800b06a:	e7c7      	b.n	800affc <_printf_common+0x58>
 800b06c:	2301      	movs	r3, #1
 800b06e:	4622      	mov	r2, r4
 800b070:	4649      	mov	r1, r9
 800b072:	4638      	mov	r0, r7
 800b074:	47c0      	blx	r8
 800b076:	3001      	adds	r0, #1
 800b078:	d0e6      	beq.n	800b048 <_printf_common+0xa4>
 800b07a:	3601      	adds	r6, #1
 800b07c:	e7d9      	b.n	800b032 <_printf_common+0x8e>
	...

0800b080 <_printf_i>:
 800b080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b084:	460c      	mov	r4, r1
 800b086:	4691      	mov	r9, r2
 800b088:	7e27      	ldrb	r7, [r4, #24]
 800b08a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b08c:	2f78      	cmp	r7, #120	; 0x78
 800b08e:	4680      	mov	r8, r0
 800b090:	469a      	mov	sl, r3
 800b092:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b096:	d807      	bhi.n	800b0a8 <_printf_i+0x28>
 800b098:	2f62      	cmp	r7, #98	; 0x62
 800b09a:	d80a      	bhi.n	800b0b2 <_printf_i+0x32>
 800b09c:	2f00      	cmp	r7, #0
 800b09e:	f000 80d8 	beq.w	800b252 <_printf_i+0x1d2>
 800b0a2:	2f58      	cmp	r7, #88	; 0x58
 800b0a4:	f000 80a3 	beq.w	800b1ee <_printf_i+0x16e>
 800b0a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b0ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b0b0:	e03a      	b.n	800b128 <_printf_i+0xa8>
 800b0b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b0b6:	2b15      	cmp	r3, #21
 800b0b8:	d8f6      	bhi.n	800b0a8 <_printf_i+0x28>
 800b0ba:	a001      	add	r0, pc, #4	; (adr r0, 800b0c0 <_printf_i+0x40>)
 800b0bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b0c0:	0800b119 	.word	0x0800b119
 800b0c4:	0800b12d 	.word	0x0800b12d
 800b0c8:	0800b0a9 	.word	0x0800b0a9
 800b0cc:	0800b0a9 	.word	0x0800b0a9
 800b0d0:	0800b0a9 	.word	0x0800b0a9
 800b0d4:	0800b0a9 	.word	0x0800b0a9
 800b0d8:	0800b12d 	.word	0x0800b12d
 800b0dc:	0800b0a9 	.word	0x0800b0a9
 800b0e0:	0800b0a9 	.word	0x0800b0a9
 800b0e4:	0800b0a9 	.word	0x0800b0a9
 800b0e8:	0800b0a9 	.word	0x0800b0a9
 800b0ec:	0800b239 	.word	0x0800b239
 800b0f0:	0800b15d 	.word	0x0800b15d
 800b0f4:	0800b21b 	.word	0x0800b21b
 800b0f8:	0800b0a9 	.word	0x0800b0a9
 800b0fc:	0800b0a9 	.word	0x0800b0a9
 800b100:	0800b25b 	.word	0x0800b25b
 800b104:	0800b0a9 	.word	0x0800b0a9
 800b108:	0800b15d 	.word	0x0800b15d
 800b10c:	0800b0a9 	.word	0x0800b0a9
 800b110:	0800b0a9 	.word	0x0800b0a9
 800b114:	0800b223 	.word	0x0800b223
 800b118:	680b      	ldr	r3, [r1, #0]
 800b11a:	1d1a      	adds	r2, r3, #4
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	600a      	str	r2, [r1, #0]
 800b120:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b128:	2301      	movs	r3, #1
 800b12a:	e0a3      	b.n	800b274 <_printf_i+0x1f4>
 800b12c:	6825      	ldr	r5, [r4, #0]
 800b12e:	6808      	ldr	r0, [r1, #0]
 800b130:	062e      	lsls	r6, r5, #24
 800b132:	f100 0304 	add.w	r3, r0, #4
 800b136:	d50a      	bpl.n	800b14e <_printf_i+0xce>
 800b138:	6805      	ldr	r5, [r0, #0]
 800b13a:	600b      	str	r3, [r1, #0]
 800b13c:	2d00      	cmp	r5, #0
 800b13e:	da03      	bge.n	800b148 <_printf_i+0xc8>
 800b140:	232d      	movs	r3, #45	; 0x2d
 800b142:	426d      	negs	r5, r5
 800b144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b148:	485e      	ldr	r0, [pc, #376]	; (800b2c4 <_printf_i+0x244>)
 800b14a:	230a      	movs	r3, #10
 800b14c:	e019      	b.n	800b182 <_printf_i+0x102>
 800b14e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b152:	6805      	ldr	r5, [r0, #0]
 800b154:	600b      	str	r3, [r1, #0]
 800b156:	bf18      	it	ne
 800b158:	b22d      	sxthne	r5, r5
 800b15a:	e7ef      	b.n	800b13c <_printf_i+0xbc>
 800b15c:	680b      	ldr	r3, [r1, #0]
 800b15e:	6825      	ldr	r5, [r4, #0]
 800b160:	1d18      	adds	r0, r3, #4
 800b162:	6008      	str	r0, [r1, #0]
 800b164:	0628      	lsls	r0, r5, #24
 800b166:	d501      	bpl.n	800b16c <_printf_i+0xec>
 800b168:	681d      	ldr	r5, [r3, #0]
 800b16a:	e002      	b.n	800b172 <_printf_i+0xf2>
 800b16c:	0669      	lsls	r1, r5, #25
 800b16e:	d5fb      	bpl.n	800b168 <_printf_i+0xe8>
 800b170:	881d      	ldrh	r5, [r3, #0]
 800b172:	4854      	ldr	r0, [pc, #336]	; (800b2c4 <_printf_i+0x244>)
 800b174:	2f6f      	cmp	r7, #111	; 0x6f
 800b176:	bf0c      	ite	eq
 800b178:	2308      	moveq	r3, #8
 800b17a:	230a      	movne	r3, #10
 800b17c:	2100      	movs	r1, #0
 800b17e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b182:	6866      	ldr	r6, [r4, #4]
 800b184:	60a6      	str	r6, [r4, #8]
 800b186:	2e00      	cmp	r6, #0
 800b188:	bfa2      	ittt	ge
 800b18a:	6821      	ldrge	r1, [r4, #0]
 800b18c:	f021 0104 	bicge.w	r1, r1, #4
 800b190:	6021      	strge	r1, [r4, #0]
 800b192:	b90d      	cbnz	r5, 800b198 <_printf_i+0x118>
 800b194:	2e00      	cmp	r6, #0
 800b196:	d04d      	beq.n	800b234 <_printf_i+0x1b4>
 800b198:	4616      	mov	r6, r2
 800b19a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b19e:	fb03 5711 	mls	r7, r3, r1, r5
 800b1a2:	5dc7      	ldrb	r7, [r0, r7]
 800b1a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b1a8:	462f      	mov	r7, r5
 800b1aa:	42bb      	cmp	r3, r7
 800b1ac:	460d      	mov	r5, r1
 800b1ae:	d9f4      	bls.n	800b19a <_printf_i+0x11a>
 800b1b0:	2b08      	cmp	r3, #8
 800b1b2:	d10b      	bne.n	800b1cc <_printf_i+0x14c>
 800b1b4:	6823      	ldr	r3, [r4, #0]
 800b1b6:	07df      	lsls	r7, r3, #31
 800b1b8:	d508      	bpl.n	800b1cc <_printf_i+0x14c>
 800b1ba:	6923      	ldr	r3, [r4, #16]
 800b1bc:	6861      	ldr	r1, [r4, #4]
 800b1be:	4299      	cmp	r1, r3
 800b1c0:	bfde      	ittt	le
 800b1c2:	2330      	movle	r3, #48	; 0x30
 800b1c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b1c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b1cc:	1b92      	subs	r2, r2, r6
 800b1ce:	6122      	str	r2, [r4, #16]
 800b1d0:	f8cd a000 	str.w	sl, [sp]
 800b1d4:	464b      	mov	r3, r9
 800b1d6:	aa03      	add	r2, sp, #12
 800b1d8:	4621      	mov	r1, r4
 800b1da:	4640      	mov	r0, r8
 800b1dc:	f7ff fee2 	bl	800afa4 <_printf_common>
 800b1e0:	3001      	adds	r0, #1
 800b1e2:	d14c      	bne.n	800b27e <_printf_i+0x1fe>
 800b1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e8:	b004      	add	sp, #16
 800b1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ee:	4835      	ldr	r0, [pc, #212]	; (800b2c4 <_printf_i+0x244>)
 800b1f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b1f4:	6823      	ldr	r3, [r4, #0]
 800b1f6:	680e      	ldr	r6, [r1, #0]
 800b1f8:	061f      	lsls	r7, r3, #24
 800b1fa:	f856 5b04 	ldr.w	r5, [r6], #4
 800b1fe:	600e      	str	r6, [r1, #0]
 800b200:	d514      	bpl.n	800b22c <_printf_i+0x1ac>
 800b202:	07d9      	lsls	r1, r3, #31
 800b204:	bf44      	itt	mi
 800b206:	f043 0320 	orrmi.w	r3, r3, #32
 800b20a:	6023      	strmi	r3, [r4, #0]
 800b20c:	b91d      	cbnz	r5, 800b216 <_printf_i+0x196>
 800b20e:	6823      	ldr	r3, [r4, #0]
 800b210:	f023 0320 	bic.w	r3, r3, #32
 800b214:	6023      	str	r3, [r4, #0]
 800b216:	2310      	movs	r3, #16
 800b218:	e7b0      	b.n	800b17c <_printf_i+0xfc>
 800b21a:	6823      	ldr	r3, [r4, #0]
 800b21c:	f043 0320 	orr.w	r3, r3, #32
 800b220:	6023      	str	r3, [r4, #0]
 800b222:	2378      	movs	r3, #120	; 0x78
 800b224:	4828      	ldr	r0, [pc, #160]	; (800b2c8 <_printf_i+0x248>)
 800b226:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b22a:	e7e3      	b.n	800b1f4 <_printf_i+0x174>
 800b22c:	065e      	lsls	r6, r3, #25
 800b22e:	bf48      	it	mi
 800b230:	b2ad      	uxthmi	r5, r5
 800b232:	e7e6      	b.n	800b202 <_printf_i+0x182>
 800b234:	4616      	mov	r6, r2
 800b236:	e7bb      	b.n	800b1b0 <_printf_i+0x130>
 800b238:	680b      	ldr	r3, [r1, #0]
 800b23a:	6826      	ldr	r6, [r4, #0]
 800b23c:	6960      	ldr	r0, [r4, #20]
 800b23e:	1d1d      	adds	r5, r3, #4
 800b240:	600d      	str	r5, [r1, #0]
 800b242:	0635      	lsls	r5, r6, #24
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	d501      	bpl.n	800b24c <_printf_i+0x1cc>
 800b248:	6018      	str	r0, [r3, #0]
 800b24a:	e002      	b.n	800b252 <_printf_i+0x1d2>
 800b24c:	0671      	lsls	r1, r6, #25
 800b24e:	d5fb      	bpl.n	800b248 <_printf_i+0x1c8>
 800b250:	8018      	strh	r0, [r3, #0]
 800b252:	2300      	movs	r3, #0
 800b254:	6123      	str	r3, [r4, #16]
 800b256:	4616      	mov	r6, r2
 800b258:	e7ba      	b.n	800b1d0 <_printf_i+0x150>
 800b25a:	680b      	ldr	r3, [r1, #0]
 800b25c:	1d1a      	adds	r2, r3, #4
 800b25e:	600a      	str	r2, [r1, #0]
 800b260:	681e      	ldr	r6, [r3, #0]
 800b262:	6862      	ldr	r2, [r4, #4]
 800b264:	2100      	movs	r1, #0
 800b266:	4630      	mov	r0, r6
 800b268:	f7f4 ffc2 	bl	80001f0 <memchr>
 800b26c:	b108      	cbz	r0, 800b272 <_printf_i+0x1f2>
 800b26e:	1b80      	subs	r0, r0, r6
 800b270:	6060      	str	r0, [r4, #4]
 800b272:	6863      	ldr	r3, [r4, #4]
 800b274:	6123      	str	r3, [r4, #16]
 800b276:	2300      	movs	r3, #0
 800b278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b27c:	e7a8      	b.n	800b1d0 <_printf_i+0x150>
 800b27e:	6923      	ldr	r3, [r4, #16]
 800b280:	4632      	mov	r2, r6
 800b282:	4649      	mov	r1, r9
 800b284:	4640      	mov	r0, r8
 800b286:	47d0      	blx	sl
 800b288:	3001      	adds	r0, #1
 800b28a:	d0ab      	beq.n	800b1e4 <_printf_i+0x164>
 800b28c:	6823      	ldr	r3, [r4, #0]
 800b28e:	079b      	lsls	r3, r3, #30
 800b290:	d413      	bmi.n	800b2ba <_printf_i+0x23a>
 800b292:	68e0      	ldr	r0, [r4, #12]
 800b294:	9b03      	ldr	r3, [sp, #12]
 800b296:	4298      	cmp	r0, r3
 800b298:	bfb8      	it	lt
 800b29a:	4618      	movlt	r0, r3
 800b29c:	e7a4      	b.n	800b1e8 <_printf_i+0x168>
 800b29e:	2301      	movs	r3, #1
 800b2a0:	4632      	mov	r2, r6
 800b2a2:	4649      	mov	r1, r9
 800b2a4:	4640      	mov	r0, r8
 800b2a6:	47d0      	blx	sl
 800b2a8:	3001      	adds	r0, #1
 800b2aa:	d09b      	beq.n	800b1e4 <_printf_i+0x164>
 800b2ac:	3501      	adds	r5, #1
 800b2ae:	68e3      	ldr	r3, [r4, #12]
 800b2b0:	9903      	ldr	r1, [sp, #12]
 800b2b2:	1a5b      	subs	r3, r3, r1
 800b2b4:	42ab      	cmp	r3, r5
 800b2b6:	dcf2      	bgt.n	800b29e <_printf_i+0x21e>
 800b2b8:	e7eb      	b.n	800b292 <_printf_i+0x212>
 800b2ba:	2500      	movs	r5, #0
 800b2bc:	f104 0619 	add.w	r6, r4, #25
 800b2c0:	e7f5      	b.n	800b2ae <_printf_i+0x22e>
 800b2c2:	bf00      	nop
 800b2c4:	0800b7d9 	.word	0x0800b7d9
 800b2c8:	0800b7ea 	.word	0x0800b7ea

0800b2cc <memmove>:
 800b2cc:	4288      	cmp	r0, r1
 800b2ce:	b510      	push	{r4, lr}
 800b2d0:	eb01 0402 	add.w	r4, r1, r2
 800b2d4:	d902      	bls.n	800b2dc <memmove+0x10>
 800b2d6:	4284      	cmp	r4, r0
 800b2d8:	4623      	mov	r3, r4
 800b2da:	d807      	bhi.n	800b2ec <memmove+0x20>
 800b2dc:	1e43      	subs	r3, r0, #1
 800b2de:	42a1      	cmp	r1, r4
 800b2e0:	d008      	beq.n	800b2f4 <memmove+0x28>
 800b2e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2ea:	e7f8      	b.n	800b2de <memmove+0x12>
 800b2ec:	4402      	add	r2, r0
 800b2ee:	4601      	mov	r1, r0
 800b2f0:	428a      	cmp	r2, r1
 800b2f2:	d100      	bne.n	800b2f6 <memmove+0x2a>
 800b2f4:	bd10      	pop	{r4, pc}
 800b2f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2fe:	e7f7      	b.n	800b2f0 <memmove+0x24>

0800b300 <_free_r>:
 800b300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b302:	2900      	cmp	r1, #0
 800b304:	d048      	beq.n	800b398 <_free_r+0x98>
 800b306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b30a:	9001      	str	r0, [sp, #4]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f1a1 0404 	sub.w	r4, r1, #4
 800b312:	bfb8      	it	lt
 800b314:	18e4      	addlt	r4, r4, r3
 800b316:	f000 f8d3 	bl	800b4c0 <__malloc_lock>
 800b31a:	4a20      	ldr	r2, [pc, #128]	; (800b39c <_free_r+0x9c>)
 800b31c:	9801      	ldr	r0, [sp, #4]
 800b31e:	6813      	ldr	r3, [r2, #0]
 800b320:	4615      	mov	r5, r2
 800b322:	b933      	cbnz	r3, 800b332 <_free_r+0x32>
 800b324:	6063      	str	r3, [r4, #4]
 800b326:	6014      	str	r4, [r2, #0]
 800b328:	b003      	add	sp, #12
 800b32a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b32e:	f000 b8cd 	b.w	800b4cc <__malloc_unlock>
 800b332:	42a3      	cmp	r3, r4
 800b334:	d90b      	bls.n	800b34e <_free_r+0x4e>
 800b336:	6821      	ldr	r1, [r4, #0]
 800b338:	1862      	adds	r2, r4, r1
 800b33a:	4293      	cmp	r3, r2
 800b33c:	bf04      	itt	eq
 800b33e:	681a      	ldreq	r2, [r3, #0]
 800b340:	685b      	ldreq	r3, [r3, #4]
 800b342:	6063      	str	r3, [r4, #4]
 800b344:	bf04      	itt	eq
 800b346:	1852      	addeq	r2, r2, r1
 800b348:	6022      	streq	r2, [r4, #0]
 800b34a:	602c      	str	r4, [r5, #0]
 800b34c:	e7ec      	b.n	800b328 <_free_r+0x28>
 800b34e:	461a      	mov	r2, r3
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	b10b      	cbz	r3, 800b358 <_free_r+0x58>
 800b354:	42a3      	cmp	r3, r4
 800b356:	d9fa      	bls.n	800b34e <_free_r+0x4e>
 800b358:	6811      	ldr	r1, [r2, #0]
 800b35a:	1855      	adds	r5, r2, r1
 800b35c:	42a5      	cmp	r5, r4
 800b35e:	d10b      	bne.n	800b378 <_free_r+0x78>
 800b360:	6824      	ldr	r4, [r4, #0]
 800b362:	4421      	add	r1, r4
 800b364:	1854      	adds	r4, r2, r1
 800b366:	42a3      	cmp	r3, r4
 800b368:	6011      	str	r1, [r2, #0]
 800b36a:	d1dd      	bne.n	800b328 <_free_r+0x28>
 800b36c:	681c      	ldr	r4, [r3, #0]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	6053      	str	r3, [r2, #4]
 800b372:	4421      	add	r1, r4
 800b374:	6011      	str	r1, [r2, #0]
 800b376:	e7d7      	b.n	800b328 <_free_r+0x28>
 800b378:	d902      	bls.n	800b380 <_free_r+0x80>
 800b37a:	230c      	movs	r3, #12
 800b37c:	6003      	str	r3, [r0, #0]
 800b37e:	e7d3      	b.n	800b328 <_free_r+0x28>
 800b380:	6825      	ldr	r5, [r4, #0]
 800b382:	1961      	adds	r1, r4, r5
 800b384:	428b      	cmp	r3, r1
 800b386:	bf04      	itt	eq
 800b388:	6819      	ldreq	r1, [r3, #0]
 800b38a:	685b      	ldreq	r3, [r3, #4]
 800b38c:	6063      	str	r3, [r4, #4]
 800b38e:	bf04      	itt	eq
 800b390:	1949      	addeq	r1, r1, r5
 800b392:	6021      	streq	r1, [r4, #0]
 800b394:	6054      	str	r4, [r2, #4]
 800b396:	e7c7      	b.n	800b328 <_free_r+0x28>
 800b398:	b003      	add	sp, #12
 800b39a:	bd30      	pop	{r4, r5, pc}
 800b39c:	20004de4 	.word	0x20004de4

0800b3a0 <_malloc_r>:
 800b3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3a2:	1ccd      	adds	r5, r1, #3
 800b3a4:	f025 0503 	bic.w	r5, r5, #3
 800b3a8:	3508      	adds	r5, #8
 800b3aa:	2d0c      	cmp	r5, #12
 800b3ac:	bf38      	it	cc
 800b3ae:	250c      	movcc	r5, #12
 800b3b0:	2d00      	cmp	r5, #0
 800b3b2:	4606      	mov	r6, r0
 800b3b4:	db01      	blt.n	800b3ba <_malloc_r+0x1a>
 800b3b6:	42a9      	cmp	r1, r5
 800b3b8:	d903      	bls.n	800b3c2 <_malloc_r+0x22>
 800b3ba:	230c      	movs	r3, #12
 800b3bc:	6033      	str	r3, [r6, #0]
 800b3be:	2000      	movs	r0, #0
 800b3c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3c2:	f000 f87d 	bl	800b4c0 <__malloc_lock>
 800b3c6:	4921      	ldr	r1, [pc, #132]	; (800b44c <_malloc_r+0xac>)
 800b3c8:	680a      	ldr	r2, [r1, #0]
 800b3ca:	4614      	mov	r4, r2
 800b3cc:	b99c      	cbnz	r4, 800b3f6 <_malloc_r+0x56>
 800b3ce:	4f20      	ldr	r7, [pc, #128]	; (800b450 <_malloc_r+0xb0>)
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	b923      	cbnz	r3, 800b3de <_malloc_r+0x3e>
 800b3d4:	4621      	mov	r1, r4
 800b3d6:	4630      	mov	r0, r6
 800b3d8:	f000 f862 	bl	800b4a0 <_sbrk_r>
 800b3dc:	6038      	str	r0, [r7, #0]
 800b3de:	4629      	mov	r1, r5
 800b3e0:	4630      	mov	r0, r6
 800b3e2:	f000 f85d 	bl	800b4a0 <_sbrk_r>
 800b3e6:	1c43      	adds	r3, r0, #1
 800b3e8:	d123      	bne.n	800b432 <_malloc_r+0x92>
 800b3ea:	230c      	movs	r3, #12
 800b3ec:	6033      	str	r3, [r6, #0]
 800b3ee:	4630      	mov	r0, r6
 800b3f0:	f000 f86c 	bl	800b4cc <__malloc_unlock>
 800b3f4:	e7e3      	b.n	800b3be <_malloc_r+0x1e>
 800b3f6:	6823      	ldr	r3, [r4, #0]
 800b3f8:	1b5b      	subs	r3, r3, r5
 800b3fa:	d417      	bmi.n	800b42c <_malloc_r+0x8c>
 800b3fc:	2b0b      	cmp	r3, #11
 800b3fe:	d903      	bls.n	800b408 <_malloc_r+0x68>
 800b400:	6023      	str	r3, [r4, #0]
 800b402:	441c      	add	r4, r3
 800b404:	6025      	str	r5, [r4, #0]
 800b406:	e004      	b.n	800b412 <_malloc_r+0x72>
 800b408:	6863      	ldr	r3, [r4, #4]
 800b40a:	42a2      	cmp	r2, r4
 800b40c:	bf0c      	ite	eq
 800b40e:	600b      	streq	r3, [r1, #0]
 800b410:	6053      	strne	r3, [r2, #4]
 800b412:	4630      	mov	r0, r6
 800b414:	f000 f85a 	bl	800b4cc <__malloc_unlock>
 800b418:	f104 000b 	add.w	r0, r4, #11
 800b41c:	1d23      	adds	r3, r4, #4
 800b41e:	f020 0007 	bic.w	r0, r0, #7
 800b422:	1ac2      	subs	r2, r0, r3
 800b424:	d0cc      	beq.n	800b3c0 <_malloc_r+0x20>
 800b426:	1a1b      	subs	r3, r3, r0
 800b428:	50a3      	str	r3, [r4, r2]
 800b42a:	e7c9      	b.n	800b3c0 <_malloc_r+0x20>
 800b42c:	4622      	mov	r2, r4
 800b42e:	6864      	ldr	r4, [r4, #4]
 800b430:	e7cc      	b.n	800b3cc <_malloc_r+0x2c>
 800b432:	1cc4      	adds	r4, r0, #3
 800b434:	f024 0403 	bic.w	r4, r4, #3
 800b438:	42a0      	cmp	r0, r4
 800b43a:	d0e3      	beq.n	800b404 <_malloc_r+0x64>
 800b43c:	1a21      	subs	r1, r4, r0
 800b43e:	4630      	mov	r0, r6
 800b440:	f000 f82e 	bl	800b4a0 <_sbrk_r>
 800b444:	3001      	adds	r0, #1
 800b446:	d1dd      	bne.n	800b404 <_malloc_r+0x64>
 800b448:	e7cf      	b.n	800b3ea <_malloc_r+0x4a>
 800b44a:	bf00      	nop
 800b44c:	20004de4 	.word	0x20004de4
 800b450:	20004de8 	.word	0x20004de8

0800b454 <_realloc_r>:
 800b454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b456:	4607      	mov	r7, r0
 800b458:	4614      	mov	r4, r2
 800b45a:	460e      	mov	r6, r1
 800b45c:	b921      	cbnz	r1, 800b468 <_realloc_r+0x14>
 800b45e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b462:	4611      	mov	r1, r2
 800b464:	f7ff bf9c 	b.w	800b3a0 <_malloc_r>
 800b468:	b922      	cbnz	r2, 800b474 <_realloc_r+0x20>
 800b46a:	f7ff ff49 	bl	800b300 <_free_r>
 800b46e:	4625      	mov	r5, r4
 800b470:	4628      	mov	r0, r5
 800b472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b474:	f000 f830 	bl	800b4d8 <_malloc_usable_size_r>
 800b478:	42a0      	cmp	r0, r4
 800b47a:	d20f      	bcs.n	800b49c <_realloc_r+0x48>
 800b47c:	4621      	mov	r1, r4
 800b47e:	4638      	mov	r0, r7
 800b480:	f7ff ff8e 	bl	800b3a0 <_malloc_r>
 800b484:	4605      	mov	r5, r0
 800b486:	2800      	cmp	r0, #0
 800b488:	d0f2      	beq.n	800b470 <_realloc_r+0x1c>
 800b48a:	4631      	mov	r1, r6
 800b48c:	4622      	mov	r2, r4
 800b48e:	f7ff fbf7 	bl	800ac80 <memcpy>
 800b492:	4631      	mov	r1, r6
 800b494:	4638      	mov	r0, r7
 800b496:	f7ff ff33 	bl	800b300 <_free_r>
 800b49a:	e7e9      	b.n	800b470 <_realloc_r+0x1c>
 800b49c:	4635      	mov	r5, r6
 800b49e:	e7e7      	b.n	800b470 <_realloc_r+0x1c>

0800b4a0 <_sbrk_r>:
 800b4a0:	b538      	push	{r3, r4, r5, lr}
 800b4a2:	4d06      	ldr	r5, [pc, #24]	; (800b4bc <_sbrk_r+0x1c>)
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	4604      	mov	r4, r0
 800b4a8:	4608      	mov	r0, r1
 800b4aa:	602b      	str	r3, [r5, #0]
 800b4ac:	f7f6 f8c4 	bl	8001638 <_sbrk>
 800b4b0:	1c43      	adds	r3, r0, #1
 800b4b2:	d102      	bne.n	800b4ba <_sbrk_r+0x1a>
 800b4b4:	682b      	ldr	r3, [r5, #0]
 800b4b6:	b103      	cbz	r3, 800b4ba <_sbrk_r+0x1a>
 800b4b8:	6023      	str	r3, [r4, #0]
 800b4ba:	bd38      	pop	{r3, r4, r5, pc}
 800b4bc:	200067bc 	.word	0x200067bc

0800b4c0 <__malloc_lock>:
 800b4c0:	4801      	ldr	r0, [pc, #4]	; (800b4c8 <__malloc_lock+0x8>)
 800b4c2:	f000 b811 	b.w	800b4e8 <__retarget_lock_acquire_recursive>
 800b4c6:	bf00      	nop
 800b4c8:	200067c4 	.word	0x200067c4

0800b4cc <__malloc_unlock>:
 800b4cc:	4801      	ldr	r0, [pc, #4]	; (800b4d4 <__malloc_unlock+0x8>)
 800b4ce:	f000 b80c 	b.w	800b4ea <__retarget_lock_release_recursive>
 800b4d2:	bf00      	nop
 800b4d4:	200067c4 	.word	0x200067c4

0800b4d8 <_malloc_usable_size_r>:
 800b4d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4dc:	1f18      	subs	r0, r3, #4
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	bfbc      	itt	lt
 800b4e2:	580b      	ldrlt	r3, [r1, r0]
 800b4e4:	18c0      	addlt	r0, r0, r3
 800b4e6:	4770      	bx	lr

0800b4e8 <__retarget_lock_acquire_recursive>:
 800b4e8:	4770      	bx	lr

0800b4ea <__retarget_lock_release_recursive>:
 800b4ea:	4770      	bx	lr

0800b4ec <_init>:
 800b4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ee:	bf00      	nop
 800b4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4f2:	bc08      	pop	{r3}
 800b4f4:	469e      	mov	lr, r3
 800b4f6:	4770      	bx	lr

0800b4f8 <_fini>:
 800b4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4fa:	bf00      	nop
 800b4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4fe:	bc08      	pop	{r3}
 800b500:	469e      	mov	lr, r3
 800b502:	4770      	bx	lr
